// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/rpc_dump.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_brpc_2frpc_5fdump_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_brpc_2frpc_5fdump_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_brpc_2frpc_5fdump_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_brpc_2frpc_5fdump_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_brpc_2frpc_5fdump_2eproto;
namespace brpc {
class RpcDumpMeta;
class RpcDumpMetaDefaultTypeInternal;
extern RpcDumpMetaDefaultTypeInternal _RpcDumpMeta_default_instance_;
}  // namespace brpc
PROTOBUF_NAMESPACE_OPEN
template<> ::brpc::RpcDumpMeta* Arena::CreateMaybeMessage<::brpc::RpcDumpMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace brpc {

// ===================================================================

class RpcDumpMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:brpc.RpcDumpMeta) */ {
 public:
  inline RpcDumpMeta() : RpcDumpMeta(nullptr) {};
  virtual ~RpcDumpMeta();

  RpcDumpMeta(const RpcDumpMeta& from);
  RpcDumpMeta(RpcDumpMeta&& from) noexcept
    : RpcDumpMeta() {
    *this = ::std::move(from);
  }

  inline RpcDumpMeta& operator=(const RpcDumpMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcDumpMeta& operator=(RpcDumpMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcDumpMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcDumpMeta* internal_default_instance() {
    return reinterpret_cast<const RpcDumpMeta*>(
               &_RpcDumpMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcDumpMeta& a, RpcDumpMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcDumpMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcDumpMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcDumpMeta* New() const final {
    return CreateMaybeMessage<RpcDumpMeta>(nullptr);
  }

  RpcDumpMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcDumpMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcDumpMeta& from);
  void MergeFrom(const RpcDumpMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcDumpMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "brpc.RpcDumpMeta";
  }
  protected:
  explicit RpcDumpMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_brpc_2frpc_5fdump_2eproto);
    return ::descriptor_table_brpc_2frpc_5fdump_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kAuthenticationDataFieldNumber = 7,
    kUserDataFieldNumber = 8,
    kNsheadFieldNumber = 9,
    kMethodIndexFieldNumber = 3,
    kCompressTypeFieldNumber = 4,
    kProtocolTypeFieldNumber = 5,
    kAttachmentSizeFieldNumber = 6,
  };
  // optional string service_name = 1;
  bool has_service_name() const;
  private:
  bool _internal_has_service_name() const;
  public:
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // optional string method_name = 2;
  bool has_method_name() const;
  private:
  bool _internal_has_method_name() const;
  public:
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method_name(
      std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // optional bytes authentication_data = 7;
  bool has_authentication_data() const;
  private:
  bool _internal_has_authentication_data() const;
  public:
  void clear_authentication_data();
  const std::string& authentication_data() const;
  void set_authentication_data(const std::string& value);
  void set_authentication_data(std::string&& value);
  void set_authentication_data(const char* value);
  void set_authentication_data(const void* value, size_t size);
  std::string* mutable_authentication_data();
  std::string* release_authentication_data();
  void set_allocated_authentication_data(std::string* authentication_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_authentication_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_authentication_data(
      std::string* authentication_data);
  private:
  const std::string& _internal_authentication_data() const;
  void _internal_set_authentication_data(const std::string& value);
  std::string* _internal_mutable_authentication_data();
  public:

  // optional bytes user_data = 8;
  bool has_user_data() const;
  private:
  bool _internal_has_user_data() const;
  public:
  void clear_user_data();
  const std::string& user_data() const;
  void set_user_data(const std::string& value);
  void set_user_data(std::string&& value);
  void set_user_data(const char* value);
  void set_user_data(const void* value, size_t size);
  std::string* mutable_user_data();
  std::string* release_user_data();
  void set_allocated_user_data(std::string* user_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_data(
      std::string* user_data);
  private:
  const std::string& _internal_user_data() const;
  void _internal_set_user_data(const std::string& value);
  std::string* _internal_mutable_user_data();
  public:

  // optional bytes nshead = 9;
  bool has_nshead() const;
  private:
  bool _internal_has_nshead() const;
  public:
  void clear_nshead();
  const std::string& nshead() const;
  void set_nshead(const std::string& value);
  void set_nshead(std::string&& value);
  void set_nshead(const char* value);
  void set_nshead(const void* value, size_t size);
  std::string* mutable_nshead();
  std::string* release_nshead();
  void set_allocated_nshead(std::string* nshead);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nshead();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nshead(
      std::string* nshead);
  private:
  const std::string& _internal_nshead() const;
  void _internal_set_nshead(const std::string& value);
  std::string* _internal_mutable_nshead();
  public:

  // optional int32 method_index = 3;
  bool has_method_index() const;
  private:
  bool _internal_has_method_index() const;
  public:
  void clear_method_index();
  ::PROTOBUF_NAMESPACE_ID::int32 method_index() const;
  void set_method_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_method_index() const;
  void _internal_set_method_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .brpc.CompressType compress_type = 4;
  bool has_compress_type() const;
  private:
  bool _internal_has_compress_type() const;
  public:
  void clear_compress_type();
  ::brpc::CompressType compress_type() const;
  void set_compress_type(::brpc::CompressType value);
  private:
  ::brpc::CompressType _internal_compress_type() const;
  void _internal_set_compress_type(::brpc::CompressType value);
  public:

  // optional .brpc.ProtocolType protocol_type = 5;
  bool has_protocol_type() const;
  private:
  bool _internal_has_protocol_type() const;
  public:
  void clear_protocol_type();
  ::brpc::ProtocolType protocol_type() const;
  void set_protocol_type(::brpc::ProtocolType value);
  private:
  ::brpc::ProtocolType _internal_protocol_type() const;
  void _internal_set_protocol_type(::brpc::ProtocolType value);
  public:

  // optional int32 attachment_size = 6;
  bool has_attachment_size() const;
  private:
  bool _internal_has_attachment_size() const;
  public:
  void clear_attachment_size();
  ::PROTOBUF_NAMESPACE_ID::int32 attachment_size() const;
  void set_attachment_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attachment_size() const;
  void _internal_set_attachment_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:brpc.RpcDumpMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authentication_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nshead_;
  ::PROTOBUF_NAMESPACE_ID::int32 method_index_;
  int compress_type_;
  int protocol_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 attachment_size_;
  friend struct ::TableStruct_brpc_2frpc_5fdump_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcDumpMeta

// optional string service_name = 1;
inline bool RpcDumpMeta::_internal_has_service_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcDumpMeta::has_service_name() const {
  return _internal_has_service_name();
}
inline void RpcDumpMeta::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcDumpMeta::service_name() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.service_name)
  return _internal_service_name();
}
inline void RpcDumpMeta::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.service_name)
}
inline std::string* RpcDumpMeta::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:brpc.RpcDumpMeta.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& RpcDumpMeta::_internal_service_name() const {
  return service_name_.Get();
}
inline void RpcDumpMeta::_internal_set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RpcDumpMeta::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.RpcDumpMeta.service_name)
}
inline void RpcDumpMeta::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.RpcDumpMeta.service_name)
}
inline void RpcDumpMeta::set_service_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.RpcDumpMeta.service_name)
}
inline std::string* RpcDumpMeta::_internal_mutable_service_name() {
  _has_bits_[0] |= 0x00000001u;
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RpcDumpMeta::release_service_name() {
  // @@protoc_insertion_point(field_release:brpc.RpcDumpMeta.service_name)
  if (!_internal_has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RpcDumpMeta::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.RpcDumpMeta.service_name)
}
inline std::string* RpcDumpMeta::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:brpc.RpcDumpMeta.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RpcDumpMeta::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.RpcDumpMeta.service_name)
}

// optional string method_name = 2;
inline bool RpcDumpMeta::_internal_has_method_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcDumpMeta::has_method_name() const {
  return _internal_has_method_name();
}
inline void RpcDumpMeta::clear_method_name() {
  method_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcDumpMeta::method_name() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.method_name)
  return _internal_method_name();
}
inline void RpcDumpMeta::set_method_name(const std::string& value) {
  _internal_set_method_name(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.method_name)
}
inline std::string* RpcDumpMeta::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable:brpc.RpcDumpMeta.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& RpcDumpMeta::_internal_method_name() const {
  return method_name_.Get();
}
inline void RpcDumpMeta::_internal_set_method_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RpcDumpMeta::set_method_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  method_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.RpcDumpMeta.method_name)
}
inline void RpcDumpMeta::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.RpcDumpMeta.method_name)
}
inline void RpcDumpMeta::set_method_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.RpcDumpMeta.method_name)
}
inline std::string* RpcDumpMeta::_internal_mutable_method_name() {
  _has_bits_[0] |= 0x00000002u;
  return method_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RpcDumpMeta::release_method_name() {
  // @@protoc_insertion_point(field_release:brpc.RpcDumpMeta.method_name)
  if (!_internal_has_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return method_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RpcDumpMeta::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.RpcDumpMeta.method_name)
}
inline std::string* RpcDumpMeta::unsafe_arena_release_method_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:brpc.RpcDumpMeta.method_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return method_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RpcDumpMeta::unsafe_arena_set_allocated_method_name(
    std::string* method_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.RpcDumpMeta.method_name)
}

// optional int32 method_index = 3;
inline bool RpcDumpMeta::_internal_has_method_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RpcDumpMeta::has_method_index() const {
  return _internal_has_method_index();
}
inline void RpcDumpMeta::clear_method_index() {
  method_index_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcDumpMeta::_internal_method_index() const {
  return method_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcDumpMeta::method_index() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.method_index)
  return _internal_method_index();
}
inline void RpcDumpMeta::_internal_set_method_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  method_index_ = value;
}
inline void RpcDumpMeta::set_method_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_method_index(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.method_index)
}

// optional .brpc.CompressType compress_type = 4;
inline bool RpcDumpMeta::_internal_has_compress_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RpcDumpMeta::has_compress_type() const {
  return _internal_has_compress_type();
}
inline void RpcDumpMeta::clear_compress_type() {
  compress_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::brpc::CompressType RpcDumpMeta::_internal_compress_type() const {
  return static_cast< ::brpc::CompressType >(compress_type_);
}
inline ::brpc::CompressType RpcDumpMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.compress_type)
  return _internal_compress_type();
}
inline void RpcDumpMeta::_internal_set_compress_type(::brpc::CompressType value) {
  assert(::brpc::CompressType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  compress_type_ = value;
}
inline void RpcDumpMeta::set_compress_type(::brpc::CompressType value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.compress_type)
}

// optional .brpc.ProtocolType protocol_type = 5;
inline bool RpcDumpMeta::_internal_has_protocol_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RpcDumpMeta::has_protocol_type() const {
  return _internal_has_protocol_type();
}
inline void RpcDumpMeta::clear_protocol_type() {
  protocol_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::brpc::ProtocolType RpcDumpMeta::_internal_protocol_type() const {
  return static_cast< ::brpc::ProtocolType >(protocol_type_);
}
inline ::brpc::ProtocolType RpcDumpMeta::protocol_type() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.protocol_type)
  return _internal_protocol_type();
}
inline void RpcDumpMeta::_internal_set_protocol_type(::brpc::ProtocolType value) {
  assert(::brpc::ProtocolType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  protocol_type_ = value;
}
inline void RpcDumpMeta::set_protocol_type(::brpc::ProtocolType value) {
  _internal_set_protocol_type(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.protocol_type)
}

// optional int32 attachment_size = 6;
inline bool RpcDumpMeta::_internal_has_attachment_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RpcDumpMeta::has_attachment_size() const {
  return _internal_has_attachment_size();
}
inline void RpcDumpMeta::clear_attachment_size() {
  attachment_size_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcDumpMeta::_internal_attachment_size() const {
  return attachment_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcDumpMeta::attachment_size() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.attachment_size)
  return _internal_attachment_size();
}
inline void RpcDumpMeta::_internal_set_attachment_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  attachment_size_ = value;
}
inline void RpcDumpMeta::set_attachment_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attachment_size(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.attachment_size)
}

// optional bytes authentication_data = 7;
inline bool RpcDumpMeta::_internal_has_authentication_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcDumpMeta::has_authentication_data() const {
  return _internal_has_authentication_data();
}
inline void RpcDumpMeta::clear_authentication_data() {
  authentication_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RpcDumpMeta::authentication_data() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.authentication_data)
  return _internal_authentication_data();
}
inline void RpcDumpMeta::set_authentication_data(const std::string& value) {
  _internal_set_authentication_data(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.authentication_data)
}
inline std::string* RpcDumpMeta::mutable_authentication_data() {
  // @@protoc_insertion_point(field_mutable:brpc.RpcDumpMeta.authentication_data)
  return _internal_mutable_authentication_data();
}
inline const std::string& RpcDumpMeta::_internal_authentication_data() const {
  return authentication_data_.Get();
}
inline void RpcDumpMeta::_internal_set_authentication_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  authentication_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RpcDumpMeta::set_authentication_data(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  authentication_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.RpcDumpMeta.authentication_data)
}
inline void RpcDumpMeta::set_authentication_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  authentication_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.RpcDumpMeta.authentication_data)
}
inline void RpcDumpMeta::set_authentication_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  authentication_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.RpcDumpMeta.authentication_data)
}
inline std::string* RpcDumpMeta::_internal_mutable_authentication_data() {
  _has_bits_[0] |= 0x00000004u;
  return authentication_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RpcDumpMeta::release_authentication_data() {
  // @@protoc_insertion_point(field_release:brpc.RpcDumpMeta.authentication_data)
  if (!_internal_has_authentication_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return authentication_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RpcDumpMeta::set_allocated_authentication_data(std::string* authentication_data) {
  if (authentication_data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  authentication_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authentication_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.RpcDumpMeta.authentication_data)
}
inline std::string* RpcDumpMeta::unsafe_arena_release_authentication_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:brpc.RpcDumpMeta.authentication_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return authentication_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RpcDumpMeta::unsafe_arena_set_allocated_authentication_data(
    std::string* authentication_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (authentication_data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  authentication_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      authentication_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.RpcDumpMeta.authentication_data)
}

// optional bytes user_data = 8;
inline bool RpcDumpMeta::_internal_has_user_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RpcDumpMeta::has_user_data() const {
  return _internal_has_user_data();
}
inline void RpcDumpMeta::clear_user_data() {
  user_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RpcDumpMeta::user_data() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.user_data)
  return _internal_user_data();
}
inline void RpcDumpMeta::set_user_data(const std::string& value) {
  _internal_set_user_data(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.user_data)
}
inline std::string* RpcDumpMeta::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable:brpc.RpcDumpMeta.user_data)
  return _internal_mutable_user_data();
}
inline const std::string& RpcDumpMeta::_internal_user_data() const {
  return user_data_.Get();
}
inline void RpcDumpMeta::_internal_set_user_data(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  user_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RpcDumpMeta::set_user_data(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  user_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.RpcDumpMeta.user_data)
}
inline void RpcDumpMeta::set_user_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  user_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.RpcDumpMeta.user_data)
}
inline void RpcDumpMeta::set_user_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  user_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.RpcDumpMeta.user_data)
}
inline std::string* RpcDumpMeta::_internal_mutable_user_data() {
  _has_bits_[0] |= 0x00000008u;
  return user_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RpcDumpMeta::release_user_data() {
  // @@protoc_insertion_point(field_release:brpc.RpcDumpMeta.user_data)
  if (!_internal_has_user_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return user_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RpcDumpMeta::set_allocated_user_data(std::string* user_data) {
  if (user_data != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.RpcDumpMeta.user_data)
}
inline std::string* RpcDumpMeta::unsafe_arena_release_user_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:brpc.RpcDumpMeta.user_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return user_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RpcDumpMeta::unsafe_arena_set_allocated_user_data(
    std::string* user_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_data != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.RpcDumpMeta.user_data)
}

// optional bytes nshead = 9;
inline bool RpcDumpMeta::_internal_has_nshead() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RpcDumpMeta::has_nshead() const {
  return _internal_has_nshead();
}
inline void RpcDumpMeta::clear_nshead() {
  nshead_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& RpcDumpMeta::nshead() const {
  // @@protoc_insertion_point(field_get:brpc.RpcDumpMeta.nshead)
  return _internal_nshead();
}
inline void RpcDumpMeta::set_nshead(const std::string& value) {
  _internal_set_nshead(value);
  // @@protoc_insertion_point(field_set:brpc.RpcDumpMeta.nshead)
}
inline std::string* RpcDumpMeta::mutable_nshead() {
  // @@protoc_insertion_point(field_mutable:brpc.RpcDumpMeta.nshead)
  return _internal_mutable_nshead();
}
inline const std::string& RpcDumpMeta::_internal_nshead() const {
  return nshead_.Get();
}
inline void RpcDumpMeta::_internal_set_nshead(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  nshead_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RpcDumpMeta::set_nshead(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  nshead_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:brpc.RpcDumpMeta.nshead)
}
inline void RpcDumpMeta::set_nshead(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  nshead_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:brpc.RpcDumpMeta.nshead)
}
inline void RpcDumpMeta::set_nshead(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  nshead_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:brpc.RpcDumpMeta.nshead)
}
inline std::string* RpcDumpMeta::_internal_mutable_nshead() {
  _has_bits_[0] |= 0x00000010u;
  return nshead_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RpcDumpMeta::release_nshead() {
  // @@protoc_insertion_point(field_release:brpc.RpcDumpMeta.nshead)
  if (!_internal_has_nshead()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return nshead_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RpcDumpMeta::set_allocated_nshead(std::string* nshead) {
  if (nshead != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nshead_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nshead,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:brpc.RpcDumpMeta.nshead)
}
inline std::string* RpcDumpMeta::unsafe_arena_release_nshead() {
  // @@protoc_insertion_point(field_unsafe_arena_release:brpc.RpcDumpMeta.nshead)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return nshead_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RpcDumpMeta::unsafe_arena_set_allocated_nshead(
    std::string* nshead) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nshead != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nshead_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nshead, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:brpc.RpcDumpMeta.nshead)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_brpc_2frpc_5fdump_2eproto

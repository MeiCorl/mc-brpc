// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/trackme.proto

#ifndef PROTOBUF_INCLUDED_brpc_2ftrackme_2eproto
#define PROTOBUF_INCLUDED_brpc_2ftrackme_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2ftrackme_2eproto 

namespace protobuf_brpc_2ftrackme_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_brpc_2ftrackme_2eproto
namespace brpc {
class TrackMeRequest;
class TrackMeRequestDefaultTypeInternal;
extern TrackMeRequestDefaultTypeInternal _TrackMeRequest_default_instance_;
class TrackMeResponse;
class TrackMeResponseDefaultTypeInternal;
extern TrackMeResponseDefaultTypeInternal _TrackMeResponse_default_instance_;
}  // namespace brpc
namespace google {
namespace protobuf {
template<> ::brpc::TrackMeRequest* Arena::CreateMaybeMessage<::brpc::TrackMeRequest>(Arena*);
template<> ::brpc::TrackMeResponse* Arena::CreateMaybeMessage<::brpc::TrackMeResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace brpc {

enum TrackMeSeverity {
  TrackMeOK = 0,
  TrackMeWarning = 1,
  TrackMeFatal = 2
};
bool TrackMeSeverity_IsValid(int value);
const TrackMeSeverity TrackMeSeverity_MIN = TrackMeOK;
const TrackMeSeverity TrackMeSeverity_MAX = TrackMeFatal;
const int TrackMeSeverity_ARRAYSIZE = TrackMeSeverity_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrackMeSeverity_descriptor();
inline const ::std::string& TrackMeSeverity_Name(TrackMeSeverity value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrackMeSeverity_descriptor(), value);
}
inline bool TrackMeSeverity_Parse(
    const ::std::string& name, TrackMeSeverity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrackMeSeverity>(
    TrackMeSeverity_descriptor(), name, value);
}
// ===================================================================

class TrackMeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.TrackMeRequest) */ {
 public:
  TrackMeRequest();
  virtual ~TrackMeRequest();

  TrackMeRequest(const TrackMeRequest& from);

  inline TrackMeRequest& operator=(const TrackMeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackMeRequest(TrackMeRequest&& from) noexcept
    : TrackMeRequest() {
    *this = ::std::move(from);
  }

  inline TrackMeRequest& operator=(TrackMeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackMeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackMeRequest* internal_default_instance() {
    return reinterpret_cast<const TrackMeRequest*>(
               &_TrackMeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TrackMeRequest* other);
  friend void swap(TrackMeRequest& a, TrackMeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackMeRequest* New() const final {
    return CreateMaybeMessage<TrackMeRequest>(NULL);
  }

  TrackMeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrackMeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrackMeRequest& from);
  void MergeFrom(const TrackMeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackMeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_addr = 2;
  bool has_server_addr() const;
  void clear_server_addr();
  static const int kServerAddrFieldNumber = 2;
  const ::std::string& server_addr() const;
  void set_server_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_server_addr(::std::string&& value);
  #endif
  void set_server_addr(const char* value);
  void set_server_addr(const char* value, size_t size);
  ::std::string* mutable_server_addr();
  ::std::string* release_server_addr();
  void set_allocated_server_addr(::std::string* server_addr);

  // optional int64 rpc_version = 1;
  bool has_rpc_version() const;
  void clear_rpc_version();
  static const int kRpcVersionFieldNumber = 1;
  ::google::protobuf::int64 rpc_version() const;
  void set_rpc_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:brpc.TrackMeRequest)
 private:
  void set_has_rpc_version();
  void clear_has_rpc_version();
  void set_has_server_addr();
  void clear_has_server_addr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_addr_;
  ::google::protobuf::int64 rpc_version_;
  friend struct ::protobuf_brpc_2ftrackme_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackMeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.TrackMeResponse) */ {
 public:
  TrackMeResponse();
  virtual ~TrackMeResponse();

  TrackMeResponse(const TrackMeResponse& from);

  inline TrackMeResponse& operator=(const TrackMeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackMeResponse(TrackMeResponse&& from) noexcept
    : TrackMeResponse() {
    *this = ::std::move(from);
  }

  inline TrackMeResponse& operator=(TrackMeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackMeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackMeResponse* internal_default_instance() {
    return reinterpret_cast<const TrackMeResponse*>(
               &_TrackMeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TrackMeResponse* other);
  friend void swap(TrackMeResponse& a, TrackMeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackMeResponse* New() const final {
    return CreateMaybeMessage<TrackMeResponse>(NULL);
  }

  TrackMeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrackMeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrackMeResponse& from);
  void MergeFrom(const TrackMeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackMeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_text = 2;
  bool has_error_text() const;
  void clear_error_text();
  static const int kErrorTextFieldNumber = 2;
  const ::std::string& error_text() const;
  void set_error_text(const ::std::string& value);
  #if LANG_CXX11
  void set_error_text(::std::string&& value);
  #endif
  void set_error_text(const char* value);
  void set_error_text(const char* value, size_t size);
  ::std::string* mutable_error_text();
  ::std::string* release_error_text();
  void set_allocated_error_text(::std::string* error_text);

  // optional .brpc.TrackMeSeverity severity = 1;
  bool has_severity() const;
  void clear_severity();
  static const int kSeverityFieldNumber = 1;
  ::brpc::TrackMeSeverity severity() const;
  void set_severity(::brpc::TrackMeSeverity value);

  // optional int32 new_interval = 3;
  bool has_new_interval() const;
  void clear_new_interval();
  static const int kNewIntervalFieldNumber = 3;
  ::google::protobuf::int32 new_interval() const;
  void set_new_interval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:brpc.TrackMeResponse)
 private:
  void set_has_severity();
  void clear_has_severity();
  void set_has_error_text();
  void clear_has_error_text();
  void set_has_new_interval();
  void clear_has_new_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_text_;
  int severity_;
  ::google::protobuf::int32 new_interval_;
  friend struct ::protobuf_brpc_2ftrackme_2eproto::TableStruct;
};
// ===================================================================

class TrackMeService_Stub;

class TrackMeService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TrackMeService() {};
 public:
  virtual ~TrackMeService();

  typedef TrackMeService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void TrackMe(::google::protobuf::RpcController* controller,
                       const ::brpc::TrackMeRequest* request,
                       ::brpc::TrackMeResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TrackMeService);
};

class TrackMeService_Stub : public TrackMeService {
 public:
  TrackMeService_Stub(::google::protobuf::RpcChannel* channel);
  TrackMeService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~TrackMeService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements TrackMeService ------------------------------------------

  void TrackMe(::google::protobuf::RpcController* controller,
                       const ::brpc::TrackMeRequest* request,
                       ::brpc::TrackMeResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TrackMeService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackMeRequest

// optional int64 rpc_version = 1;
inline bool TrackMeRequest::has_rpc_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackMeRequest::set_has_rpc_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackMeRequest::clear_has_rpc_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackMeRequest::clear_rpc_version() {
  rpc_version_ = GOOGLE_LONGLONG(0);
  clear_has_rpc_version();
}
inline ::google::protobuf::int64 TrackMeRequest::rpc_version() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeRequest.rpc_version)
  return rpc_version_;
}
inline void TrackMeRequest::set_rpc_version(::google::protobuf::int64 value) {
  set_has_rpc_version();
  rpc_version_ = value;
  // @@protoc_insertion_point(field_set:brpc.TrackMeRequest.rpc_version)
}

// optional string server_addr = 2;
inline bool TrackMeRequest::has_server_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackMeRequest::set_has_server_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackMeRequest::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackMeRequest::clear_server_addr() {
  server_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_addr();
}
inline const ::std::string& TrackMeRequest::server_addr() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeRequest.server_addr)
  return server_addr_.GetNoArena();
}
inline void TrackMeRequest::set_server_addr(const ::std::string& value) {
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.TrackMeRequest.server_addr)
}
#if LANG_CXX11
inline void TrackMeRequest::set_server_addr(::std::string&& value) {
  set_has_server_addr();
  server_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.TrackMeRequest.server_addr)
}
#endif
inline void TrackMeRequest::set_server_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.TrackMeRequest.server_addr)
}
inline void TrackMeRequest::set_server_addr(const char* value, size_t size) {
  set_has_server_addr();
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.TrackMeRequest.server_addr)
}
inline ::std::string* TrackMeRequest::mutable_server_addr() {
  set_has_server_addr();
  // @@protoc_insertion_point(field_mutable:brpc.TrackMeRequest.server_addr)
  return server_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackMeRequest::release_server_addr() {
  // @@protoc_insertion_point(field_release:brpc.TrackMeRequest.server_addr)
  if (!has_server_addr()) {
    return NULL;
  }
  clear_has_server_addr();
  return server_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackMeRequest::set_allocated_server_addr(::std::string* server_addr) {
  if (server_addr != NULL) {
    set_has_server_addr();
  } else {
    clear_has_server_addr();
  }
  server_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_addr);
  // @@protoc_insertion_point(field_set_allocated:brpc.TrackMeRequest.server_addr)
}

// -------------------------------------------------------------------

// TrackMeResponse

// optional .brpc.TrackMeSeverity severity = 1;
inline bool TrackMeResponse::has_severity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackMeResponse::set_has_severity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackMeResponse::clear_has_severity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackMeResponse::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::brpc::TrackMeSeverity TrackMeResponse::severity() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeResponse.severity)
  return static_cast< ::brpc::TrackMeSeverity >(severity_);
}
inline void TrackMeResponse::set_severity(::brpc::TrackMeSeverity value) {
  assert(::brpc::TrackMeSeverity_IsValid(value));
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:brpc.TrackMeResponse.severity)
}

// optional string error_text = 2;
inline bool TrackMeResponse::has_error_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackMeResponse::set_has_error_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackMeResponse::clear_has_error_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackMeResponse::clear_error_text() {
  error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_text();
}
inline const ::std::string& TrackMeResponse::error_text() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeResponse.error_text)
  return error_text_.GetNoArena();
}
inline void TrackMeResponse::set_error_text(const ::std::string& value) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.TrackMeResponse.error_text)
}
#if LANG_CXX11
inline void TrackMeResponse::set_error_text(::std::string&& value) {
  set_has_error_text();
  error_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.TrackMeResponse.error_text)
}
#endif
inline void TrackMeResponse::set_error_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.TrackMeResponse.error_text)
}
inline void TrackMeResponse::set_error_text(const char* value, size_t size) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.TrackMeResponse.error_text)
}
inline ::std::string* TrackMeResponse::mutable_error_text() {
  set_has_error_text();
  // @@protoc_insertion_point(field_mutable:brpc.TrackMeResponse.error_text)
  return error_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackMeResponse::release_error_text() {
  // @@protoc_insertion_point(field_release:brpc.TrackMeResponse.error_text)
  if (!has_error_text()) {
    return NULL;
  }
  clear_has_error_text();
  return error_text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackMeResponse::set_allocated_error_text(::std::string* error_text) {
  if (error_text != NULL) {
    set_has_error_text();
  } else {
    clear_has_error_text();
  }
  error_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_text);
  // @@protoc_insertion_point(field_set_allocated:brpc.TrackMeResponse.error_text)
}

// optional int32 new_interval = 3;
inline bool TrackMeResponse::has_new_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackMeResponse::set_has_new_interval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackMeResponse::clear_has_new_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackMeResponse::clear_new_interval() {
  new_interval_ = 0;
  clear_has_new_interval();
}
inline ::google::protobuf::int32 TrackMeResponse::new_interval() const {
  // @@protoc_insertion_point(field_get:brpc.TrackMeResponse.new_interval)
  return new_interval_;
}
inline void TrackMeResponse::set_new_interval(::google::protobuf::int32 value) {
  set_has_new_interval();
  new_interval_ = value;
  // @@protoc_insertion_point(field_set:brpc.TrackMeResponse.new_interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::brpc::TrackMeSeverity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::brpc::TrackMeSeverity>() {
  return ::brpc::TrackMeSeverity_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_brpc_2ftrackme_2eproto

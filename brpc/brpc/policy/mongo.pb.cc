// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/mongo.proto

#include "brpc/policy/mongo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_brpc_2fpolicy_2fmongo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fpolicy_2fmongo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MongoHeader;
}  // namespace protobuf_brpc_2fpolicy_2fmongo_2eproto
namespace brpc {
namespace policy {
class MongoHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MongoHeader>
      _instance;
} _MongoHeader_default_instance_;
class MongoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MongoRequest>
      _instance;
} _MongoRequest_default_instance_;
class MongoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MongoResponse>
      _instance;
} _MongoResponse_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace protobuf_brpc_2fpolicy_2fmongo_2eproto {
static void InitDefaultsMongoHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_MongoHeader_default_instance_;
    new (ptr) ::brpc::policy::MongoHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::MongoHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MongoHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMongoHeader}, {}};

static void InitDefaultsMongoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_MongoRequest_default_instance_;
    new (ptr) ::brpc::policy::MongoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::MongoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MongoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMongoRequest}, {
      &protobuf_brpc_2fpolicy_2fmongo_2eproto::scc_info_MongoHeader.base,}};

static void InitDefaultsMongoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_MongoResponse_default_instance_;
    new (ptr) ::brpc::policy::MongoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::MongoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MongoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMongoResponse}, {
      &protobuf_brpc_2fpolicy_2fmongo_2eproto::scc_info_MongoHeader.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MongoHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MongoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MongoResponse.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoHeader, message_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoHeader, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoHeader, response_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoHeader, op_code_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoRequest, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoResponse, response_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoResponse, cursor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoResponse, starting_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoResponse, number_returned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::MongoResponse, message_),
  1,
  3,
  2,
  4,
  5,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::brpc::policy::MongoHeader)},
  { 13, 20, sizeof(::brpc::policy::MongoRequest)},
  { 22, 33, sizeof(::brpc::policy::MongoResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_MongoHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_MongoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_MongoResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "brpc/policy/mongo.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027brpc/policy/mongo.proto\022\013brpc.policy\"u"
      "\n\013MongoHeader\022\026\n\016message_length\030\001 \002(\005\022\022\n"
      "\nrequest_id\030\002 \002(\005\022\023\n\013response_to\030\003 \002(\005\022%"
      "\n\007op_code\030\004 \002(\0162\024.brpc.policy.MongoOp\"I\n"
      "\014MongoRequest\022(\n\006header\030\001 \002(\0132\030.brpc.pol"
      "icy.MongoHeader\022\017\n\007message\030\002 \002(\t\"\245\001\n\rMon"
      "goResponse\022(\n\006header\030\001 \002(\0132\030.brpc.policy"
      ".MongoHeader\022\026\n\016response_flags\030\002 \002(\005\022\021\n\t"
      "cursor_id\030\003 \002(\003\022\025\n\rstarting_from\030\004 \002(\005\022\027"
      "\n\017number_returned\030\005 \002(\005\022\017\n\007message\030\006 \002(\t"
      "*\256\001\n\007MongoOp\022\013\n\007OPREPLY\020\001\022\n\n\005DBMSG\020\350\007\022\016\n"
      "\tDB_UPDATE\020\321\017\022\016\n\tDB_INSERT\020\322\017\022\r\n\010DB_QUER"
      "Y\020\324\017\022\017\n\nDB_GETMORE\020\325\017\022\016\n\tDB_DELETE\020\326\017\022\023\n"
      "\016DB_KILLCURSORS\020\327\017\022\017\n\nDB_COMMAND\020\330\017\022\024\n\017D"
      "B_COMMANDREPLY\020\331\0172W\n\014MongoService\022G\n\016def"
      "ault_method\022\031.brpc.policy.MongoRequest\032\032"
      ".brpc.policy.MongoResponseB#\n\017com.brpc.p"
      "olicyB\nMongoProto\200\001\001\210\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/mongo.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_brpc_2fpolicy_2fmongo_2eproto
namespace brpc {
namespace policy {
const ::google::protobuf::EnumDescriptor* MongoOp_descriptor() {
  protobuf_brpc_2fpolicy_2fmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brpc_2fpolicy_2fmongo_2eproto::file_level_enum_descriptors[0];
}
bool MongoOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 1000:
    case 2001:
    case 2002:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MongoHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MongoHeader::kMessageLengthFieldNumber;
const int MongoHeader::kRequestIdFieldNumber;
const int MongoHeader::kResponseToFieldNumber;
const int MongoHeader::kOpCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MongoHeader::MongoHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fmongo_2eproto::scc_info_MongoHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.MongoHeader)
}
MongoHeader::MongoHeader(const MongoHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_length_, &from.message_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_code_) -
    reinterpret_cast<char*>(&message_length_)) + sizeof(op_code_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.MongoHeader)
}

void MongoHeader::SharedCtor() {
  ::memset(&message_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_to_) -
      reinterpret_cast<char*>(&message_length_)) + sizeof(response_to_));
  op_code_ = 1;
}

MongoHeader::~MongoHeader() {
  // @@protoc_insertion_point(destructor:brpc.policy.MongoHeader)
  SharedDtor();
}

void MongoHeader::SharedDtor() {
}

void MongoHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MongoHeader::descriptor() {
  ::protobuf_brpc_2fpolicy_2fmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fmongo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MongoHeader& MongoHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fmongo_2eproto::scc_info_MongoHeader.base);
  return *internal_default_instance();
}


void MongoHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.MongoHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&message_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_to_) -
        reinterpret_cast<char*>(&message_length_)) + sizeof(response_to_));
    op_code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MongoHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.MongoHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_message_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 request_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 response_to = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_response_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .brpc.policy.MongoOp op_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::policy::MongoOp_IsValid(value)) {
            set_op_code(static_cast< ::brpc::policy::MongoOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.MongoHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.MongoHeader)
  return false;
#undef DO_
}

void MongoHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.MongoHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 message_length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_length(), output);
  }

  // required int32 request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->request_id(), output);
  }

  // required int32 response_to = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->response_to(), output);
  }

  // required .brpc.policy.MongoOp op_code = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->op_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.MongoHeader)
}

::google::protobuf::uint8* MongoHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.MongoHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 message_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_length(), target);
  }

  // required int32 request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->request_id(), target);
  }

  // required int32 response_to = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->response_to(), target);
  }

  // required .brpc.policy.MongoOp op_code = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->op_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.MongoHeader)
  return target;
}

size_t MongoHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.MongoHeader)
  size_t total_size = 0;

  if (has_message_length()) {
    // required int32 message_length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_length());
  }

  if (has_request_id()) {
    // required int32 request_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  if (has_response_to()) {
    // required int32 response_to = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->response_to());
  }

  if (has_op_code()) {
    // required .brpc.policy.MongoOp op_code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_code());
  }

  return total_size;
}
size_t MongoHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.MongoHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 message_length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_length());

    // required int32 request_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());

    // required int32 response_to = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->response_to());

    // required .brpc.policy.MongoOp op_code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MongoHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.MongoHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MongoHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MongoHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.MongoHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.MongoHeader)
    MergeFrom(*source);
  }
}

void MongoHeader::MergeFrom(const MongoHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.MongoHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      message_length_ = from.message_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      response_to_ = from.response_to_;
    }
    if (cached_has_bits & 0x00000008u) {
      op_code_ = from.op_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MongoHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.MongoHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MongoHeader::CopyFrom(const MongoHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.MongoHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void MongoHeader::Swap(MongoHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MongoHeader::InternalSwap(MongoHeader* other) {
  using std::swap;
  swap(message_length_, other->message_length_);
  swap(request_id_, other->request_id_);
  swap(response_to_, other->response_to_);
  swap(op_code_, other->op_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MongoHeader::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fmongo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MongoRequest::InitAsDefaultInstance() {
  ::brpc::policy::_MongoRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::brpc::policy::MongoHeader*>(
      ::brpc::policy::MongoHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MongoRequest::kHeaderFieldNumber;
const int MongoRequest::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MongoRequest::MongoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fmongo_2eproto::scc_info_MongoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.MongoRequest)
}
MongoRequest::MongoRequest(const MongoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_header()) {
    header_ = new ::brpc::policy::MongoHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:brpc.policy.MongoRequest)
}

void MongoRequest::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

MongoRequest::~MongoRequest() {
  // @@protoc_insertion_point(destructor:brpc.policy.MongoRequest)
  SharedDtor();
}

void MongoRequest::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void MongoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MongoRequest::descriptor() {
  ::protobuf_brpc_2fpolicy_2fmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fmongo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MongoRequest& MongoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fmongo_2eproto::scc_info_MongoRequest.base);
  return *internal_default_instance();
}


void MongoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.MongoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MongoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.MongoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .brpc.policy.MongoHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.MongoRequest.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.MongoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.MongoRequest)
  return false;
#undef DO_
}

void MongoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.MongoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .brpc.policy.MongoHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.MongoRequest.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.MongoRequest)
}

::google::protobuf::uint8* MongoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.MongoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .brpc.policy.MongoHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.MongoRequest.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.MongoRequest)
  return target;
}

size_t MongoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.MongoRequest)
  size_t total_size = 0;

  if (has_message()) {
    // required string message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_header()) {
    // required .brpc.policy.MongoHeader header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return total_size;
}
size_t MongoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.MongoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required .brpc.policy.MongoHeader header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MongoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.MongoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MongoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MongoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.MongoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.MongoRequest)
    MergeFrom(*source);
  }
}

void MongoRequest::MergeFrom(const MongoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.MongoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::brpc::policy::MongoHeader::MergeFrom(from.header());
    }
  }
}

void MongoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.MongoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MongoRequest::CopyFrom(const MongoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.MongoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void MongoRequest::Swap(MongoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MongoRequest::InternalSwap(MongoRequest* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MongoRequest::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fmongo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MongoResponse::InitAsDefaultInstance() {
  ::brpc::policy::_MongoResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::brpc::policy::MongoHeader*>(
      ::brpc::policy::MongoHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MongoResponse::kHeaderFieldNumber;
const int MongoResponse::kResponseFlagsFieldNumber;
const int MongoResponse::kCursorIdFieldNumber;
const int MongoResponse::kStartingFromFieldNumber;
const int MongoResponse::kNumberReturnedFieldNumber;
const int MongoResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MongoResponse::MongoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fmongo_2eproto::scc_info_MongoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.MongoResponse)
}
MongoResponse::MongoResponse(const MongoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_header()) {
    header_ = new ::brpc::policy::MongoHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&cursor_id_, &from.cursor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_returned_) -
    reinterpret_cast<char*>(&cursor_id_)) + sizeof(number_returned_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.MongoResponse)
}

void MongoResponse::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_returned_) -
      reinterpret_cast<char*>(&header_)) + sizeof(number_returned_));
}

MongoResponse::~MongoResponse() {
  // @@protoc_insertion_point(destructor:brpc.policy.MongoResponse)
  SharedDtor();
}

void MongoResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void MongoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MongoResponse::descriptor() {
  ::protobuf_brpc_2fpolicy_2fmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fmongo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MongoResponse& MongoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fmongo_2eproto::scc_info_MongoResponse.base);
  return *internal_default_instance();
}


void MongoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.MongoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&cursor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_returned_) -
        reinterpret_cast<char*>(&cursor_id_)) + sizeof(number_returned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MongoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.MongoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .brpc.policy.MongoHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 response_flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_response_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 cursor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cursor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cursor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 starting_from = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_starting_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starting_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 number_returned = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_number_returned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_returned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.MongoResponse.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.MongoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.MongoResponse)
  return false;
#undef DO_
}

void MongoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.MongoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .brpc.policy.MongoHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // required int32 response_flags = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->response_flags(), output);
  }

  // required int64 cursor_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cursor_id(), output);
  }

  // required int32 starting_from = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starting_from(), output);
  }

  // required int32 number_returned = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->number_returned(), output);
  }

  // required string message = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.MongoResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.MongoResponse)
}

::google::protobuf::uint8* MongoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.MongoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .brpc.policy.MongoHeader header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // required int32 response_flags = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->response_flags(), target);
  }

  // required int64 cursor_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cursor_id(), target);
  }

  // required int32 starting_from = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starting_from(), target);
  }

  // required int32 number_returned = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->number_returned(), target);
  }

  // required string message = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.MongoResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.MongoResponse)
  return target;
}

size_t MongoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.MongoResponse)
  size_t total_size = 0;

  if (has_message()) {
    // required string message = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_header()) {
    // required .brpc.policy.MongoHeader header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (has_cursor_id()) {
    // required int64 cursor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cursor_id());
  }

  if (has_response_flags()) {
    // required int32 response_flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->response_flags());
  }

  if (has_starting_from()) {
    // required int32 starting_from = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->starting_from());
  }

  if (has_number_returned()) {
    // required int32 number_returned = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_returned());
  }

  return total_size;
}
size_t MongoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.MongoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string message = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required .brpc.policy.MongoHeader header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);

    // required int64 cursor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cursor_id());

    // required int32 response_flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->response_flags());

    // required int32 starting_from = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->starting_from());

    // required int32 number_returned = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_returned());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MongoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.MongoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MongoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MongoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.MongoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.MongoResponse)
    MergeFrom(*source);
  }
}

void MongoResponse::MergeFrom(const MongoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.MongoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::brpc::policy::MongoHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      cursor_id_ = from.cursor_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      response_flags_ = from.response_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      starting_from_ = from.starting_from_;
    }
    if (cached_has_bits & 0x00000020u) {
      number_returned_ = from.number_returned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MongoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.MongoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MongoResponse::CopyFrom(const MongoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.MongoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void MongoResponse::Swap(MongoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MongoResponse::InternalSwap(MongoResponse* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(cursor_id_, other->cursor_id_);
  swap(response_flags_, other->response_flags_);
  swap(starting_from_, other->starting_from_);
  swap(number_returned_, other->number_returned_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MongoResponse::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fmongo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

MongoService::~MongoService() {}

const ::google::protobuf::ServiceDescriptor* MongoService::descriptor() {
  protobuf_brpc_2fpolicy_2fmongo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brpc_2fpolicy_2fmongo_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* MongoService::GetDescriptor() {
  return descriptor();
}

void MongoService::default_method(::google::protobuf::RpcController* controller,
                         const ::brpc::policy::MongoRequest*,
                         ::brpc::policy::MongoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method default_method() not implemented.");
  done->Run();
}

void MongoService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_brpc_2fpolicy_2fmongo_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      default_method(controller,
             ::google::protobuf::down_cast<const ::brpc::policy::MongoRequest*>(request),
             ::google::protobuf::down_cast< ::brpc::policy::MongoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MongoService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::policy::MongoRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& MongoService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::brpc::policy::MongoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MongoService_Stub::MongoService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MongoService_Stub::MongoService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MongoService_Stub::~MongoService_Stub() {
  if (owns_channel_) delete channel_;
}

void MongoService_Stub::default_method(::google::protobuf::RpcController* controller,
                              const ::brpc::policy::MongoRequest* request,
                              ::brpc::policy::MongoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::MongoHeader* Arena::CreateMaybeMessage< ::brpc::policy::MongoHeader >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::MongoHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::MongoRequest* Arena::CreateMaybeMessage< ::brpc::policy::MongoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::MongoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::MongoResponse* Arena::CreateMaybeMessage< ::brpc::policy::MongoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::MongoResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

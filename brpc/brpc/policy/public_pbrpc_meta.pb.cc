// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/public_pbrpc_meta.proto

#include "brpc/policy/public_pbrpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestBody;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestHead;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseBody;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseHead;
}  // namespace protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto
namespace brpc {
namespace policy {
class PublicPbrpcRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublicPbrpcRequest>
      _instance;
} _PublicPbrpcRequest_default_instance_;
class RequestHeadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestHead>
      _instance;
} _RequestHead_default_instance_;
class RequestBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestBody>
      _instance;
} _RequestBody_default_instance_;
class PublicPbrpcResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublicPbrpcResponse>
      _instance;
} _PublicPbrpcResponse_default_instance_;
class ResponseHeadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseHead>
      _instance;
} _ResponseHead_default_instance_;
class ResponseBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseBody>
      _instance;
} _ResponseBody_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto {
static void InitDefaultsPublicPbrpcRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_PublicPbrpcRequest_default_instance_;
    new (ptr) ::brpc::policy::PublicPbrpcRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::PublicPbrpcRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PublicPbrpcRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPublicPbrpcRequest}, {
      &protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_RequestHead.base,
      &protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_RequestBody.base,}};

static void InitDefaultsRequestHead() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_RequestHead_default_instance_;
    new (ptr) ::brpc::policy::RequestHead();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::RequestHead::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestHead =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestHead}, {}};

static void InitDefaultsRequestBody() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_RequestBody_default_instance_;
    new (ptr) ::brpc::policy::RequestBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::RequestBody::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestBody =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestBody}, {}};

static void InitDefaultsPublicPbrpcResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_PublicPbrpcResponse_default_instance_;
    new (ptr) ::brpc::policy::PublicPbrpcResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::PublicPbrpcResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PublicPbrpcResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPublicPbrpcResponse}, {
      &protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_ResponseHead.base,
      &protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_ResponseBody.base,}};

static void InitDefaultsResponseHead() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_ResponseHead_default_instance_;
    new (ptr) ::brpc::policy::ResponseHead();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::ResponseHead::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseHead =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseHead}, {}};

static void InitDefaultsResponseBody() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_ResponseBody_default_instance_;
    new (ptr) ::brpc::policy::ResponseBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::ResponseBody::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseBody =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseBody}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PublicPbrpcRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestHead.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestBody.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublicPbrpcResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseHead.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseBody.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::PublicPbrpcRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::PublicPbrpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::PublicPbrpcRequest, requesthead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::PublicPbrpcRequest, requestbody_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestHead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestHead, from_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestHead, content_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestHead, connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestHead, charset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestHead, accept_charset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestHead, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestHead, log_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestHead, compress_type_),
  0,
  4,
  5,
  1,
  2,
  3,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestBody, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestBody, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestBody, charset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestBody, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestBody, method_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestBody, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RequestBody, serialized_request_),
  0,
  1,
  2,
  5,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::PublicPbrpcResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::PublicPbrpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::PublicPbrpcResponse, responsehead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::PublicPbrpcResponse, responsebody_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseHead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseHead, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseHead, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseHead, from_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseHead, compress_type_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseBody, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseBody, serialized_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseBody, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseBody, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::ResponseBody, id_),
  0,
  1,
  3,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::brpc::policy::PublicPbrpcRequest)},
  { 9, 22, sizeof(::brpc::policy::RequestHead)},
  { 30, 41, sizeof(::brpc::policy::RequestBody)},
  { 47, 54, sizeof(::brpc::policy::PublicPbrpcResponse)},
  { 56, 65, sizeof(::brpc::policy::ResponseHead)},
  { 69, 78, sizeof(::brpc::policy::ResponseBody)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_PublicPbrpcRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_RequestHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_RequestBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_PublicPbrpcResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_ResponseHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_ResponseBody_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "brpc/policy/public_pbrpc_meta.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#brpc/policy/public_pbrpc_meta.proto\022\013b"
      "rpc.policy\"r\n\022PublicPbrpcRequest\022-\n\013requ"
      "estHead\030\001 \001(\0132\030.brpc.policy.RequestHead\022"
      "-\n\013requestBody\030\002 \003(\0132\030.brpc.policy.Reque"
      "stBody\"\257\001\n\013RequestHead\022\021\n\tfrom_host\030\001 \001("
      "\t\022\024\n\014content_type\030\002 \001(\r\022\022\n\nconnection\030\003 "
      "\001(\010\022\017\n\007charset\030\004 \001(\t\022\026\n\016accept_charset\030\005"
      " \001(\t\022\023\n\013create_time\030\006 \001(\t\022\016\n\006log_id\030\007 \001("
      "\004\022\025\n\rcompress_type\030\010 \001(\r\"{\n\013RequestBody\022"
      "\017\n\007version\030\001 \001(\t\022\017\n\007charset\030\002 \001(\t\022\017\n\007ser"
      "vice\030\003 \002(\t\022\021\n\tmethod_id\030\004 \002(\r\022\n\n\002id\030\005 \002("
      "\004\022\032\n\022serialized_request\030\006 \001(\014\"w\n\023PublicP"
      "brpcResponse\022/\n\014responseHead\030\001 \001(\0132\031.brp"
      "c.policy.ResponseHead\022/\n\014responseBody\030\002 "
      "\003(\0132\031.brpc.policy.ResponseBody\"T\n\014Respon"
      "seHead\022\014\n\004code\030\001 \002(\021\022\014\n\004text\030\002 \001(\t\022\021\n\tfr"
      "om_host\030\003 \001(\t\022\025\n\rcompress_type\030\004 \001(\r\"W\n\014"
      "ResponseBody\022\033\n\023serialized_response\030\001 \001("
      "\014\022\017\n\007version\030\002 \001(\t\022\r\n\005error\030\003 \001(\005\022\n\n\002id\030"
      "\004 \002(\004B#\n\017com.brpc.policyB\020PublicPbrpcPro"
      "to"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 802);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/public_pbrpc_meta.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto
namespace brpc {
namespace policy {

// ===================================================================

void PublicPbrpcRequest::InitAsDefaultInstance() {
  ::brpc::policy::_PublicPbrpcRequest_default_instance_._instance.get_mutable()->requesthead_ = const_cast< ::brpc::policy::RequestHead*>(
      ::brpc::policy::RequestHead::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicPbrpcRequest::kRequestHeadFieldNumber;
const int PublicPbrpcRequest::kRequestBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicPbrpcRequest::PublicPbrpcRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_PublicPbrpcRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.PublicPbrpcRequest)
}
PublicPbrpcRequest::PublicPbrpcRequest(const PublicPbrpcRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      requestbody_(from.requestbody_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_requesthead()) {
    requesthead_ = new ::brpc::policy::RequestHead(*from.requesthead_);
  } else {
    requesthead_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:brpc.policy.PublicPbrpcRequest)
}

void PublicPbrpcRequest::SharedCtor() {
  requesthead_ = NULL;
}

PublicPbrpcRequest::~PublicPbrpcRequest() {
  // @@protoc_insertion_point(destructor:brpc.policy.PublicPbrpcRequest)
  SharedDtor();
}

void PublicPbrpcRequest::SharedDtor() {
  if (this != internal_default_instance()) delete requesthead_;
}

void PublicPbrpcRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublicPbrpcRequest::descriptor() {
  ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublicPbrpcRequest& PublicPbrpcRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_PublicPbrpcRequest.base);
  return *internal_default_instance();
}


void PublicPbrpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.PublicPbrpcRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestbody_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(requesthead_ != NULL);
    requesthead_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublicPbrpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.PublicPbrpcRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .brpc.policy.RequestHead requestHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requesthead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .brpc.policy.RequestBody requestBody = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_requestbody()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.PublicPbrpcRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.PublicPbrpcRequest)
  return false;
#undef DO_
}

void PublicPbrpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.PublicPbrpcRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .brpc.policy.RequestHead requestHead = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_requesthead(), output);
  }

  // repeated .brpc.policy.RequestBody requestBody = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requestbody_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->requestbody(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.PublicPbrpcRequest)
}

::google::protobuf::uint8* PublicPbrpcRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.PublicPbrpcRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .brpc.policy.RequestHead requestHead = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_requesthead(), deterministic, target);
  }

  // repeated .brpc.policy.RequestBody requestBody = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requestbody_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->requestbody(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.PublicPbrpcRequest)
  return target;
}

size_t PublicPbrpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.PublicPbrpcRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .brpc.policy.RequestBody requestBody = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->requestbody_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->requestbody(static_cast<int>(i)));
    }
  }

  // optional .brpc.policy.RequestHead requestHead = 1;
  if (has_requesthead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *requesthead_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicPbrpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.PublicPbrpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicPbrpcRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicPbrpcRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.PublicPbrpcRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.PublicPbrpcRequest)
    MergeFrom(*source);
  }
}

void PublicPbrpcRequest::MergeFrom(const PublicPbrpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.PublicPbrpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requestbody_.MergeFrom(from.requestbody_);
  if (from.has_requesthead()) {
    mutable_requesthead()->::brpc::policy::RequestHead::MergeFrom(from.requesthead());
  }
}

void PublicPbrpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.PublicPbrpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicPbrpcRequest::CopyFrom(const PublicPbrpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.PublicPbrpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicPbrpcRequest::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->requestbody())) return false;
  return true;
}

void PublicPbrpcRequest::Swap(PublicPbrpcRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicPbrpcRequest::InternalSwap(PublicPbrpcRequest* other) {
  using std::swap;
  CastToBase(&requestbody_)->InternalSwap(CastToBase(&other->requestbody_));
  swap(requesthead_, other->requesthead_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublicPbrpcRequest::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestHead::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHead::kFromHostFieldNumber;
const int RequestHead::kContentTypeFieldNumber;
const int RequestHead::kConnectionFieldNumber;
const int RequestHead::kCharsetFieldNumber;
const int RequestHead::kAcceptCharsetFieldNumber;
const int RequestHead::kCreateTimeFieldNumber;
const int RequestHead::kLogIdFieldNumber;
const int RequestHead::kCompressTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHead::RequestHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_RequestHead.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RequestHead)
}
RequestHead::RequestHead(const RequestHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_host()) {
    from_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_host_);
  }
  charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_charset()) {
    charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charset_);
  }
  accept_charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_accept_charset()) {
    accept_charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accept_charset_);
  }
  create_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_create_time()) {
    create_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_time_);
  }
  ::memcpy(&content_type_, &from.content_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&compress_type_) -
    reinterpret_cast<char*>(&content_type_)) + sizeof(compress_type_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RequestHead)
}

void RequestHead::SharedCtor() {
  from_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accept_charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&content_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_type_) -
      reinterpret_cast<char*>(&content_type_)) + sizeof(compress_type_));
}

RequestHead::~RequestHead() {
  // @@protoc_insertion_point(destructor:brpc.policy.RequestHead)
  SharedDtor();
}

void RequestHead::SharedDtor() {
  from_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accept_charset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestHead::descriptor() {
  ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestHead& RequestHead::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_RequestHead.base);
  return *internal_default_instance();
}


void RequestHead::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RequestHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      from_host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      charset_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      accept_charset_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      create_time_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&content_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compress_type_) -
        reinterpret_cast<char*>(&content_type_)) + sizeof(compress_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RequestHead)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_host().data(), static_cast<int>(this->from_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestHead.from_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 content_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_content_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_connection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string charset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charset().data(), static_cast<int>(this->charset().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestHead.charset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string accept_charset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accept_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accept_charset().data(), static_cast<int>(this->accept_charset().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestHead.accept_charset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string create_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->create_time().data(), static_cast<int>(this->create_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestHead.create_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 log_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_log_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 compress_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_compress_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compress_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RequestHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RequestHead)
  return false;
#undef DO_
}

void RequestHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RequestHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), static_cast<int>(this->from_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.from_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_host(), output);
  }

  // optional uint32 content_type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->content_type(), output);
  }

  // optional bool connection = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->connection(), output);
  }

  // optional string charset = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), static_cast<int>(this->charset().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charset(), output);
  }

  // optional string accept_charset = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accept_charset().data(), static_cast<int>(this->accept_charset().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.accept_charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->accept_charset(), output);
  }

  // optional string create_time = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_time().data(), static_cast<int>(this->create_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.create_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->create_time(), output);
  }

  // optional uint64 log_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->log_id(), output);
  }

  // optional uint32 compress_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->compress_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RequestHead)
}

::google::protobuf::uint8* RequestHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RequestHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), static_cast<int>(this->from_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.from_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_host(), target);
  }

  // optional uint32 content_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->content_type(), target);
  }

  // optional bool connection = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->connection(), target);
  }

  // optional string charset = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), static_cast<int>(this->charset().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charset(), target);
  }

  // optional string accept_charset = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accept_charset().data(), static_cast<int>(this->accept_charset().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.accept_charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accept_charset(), target);
  }

  // optional string create_time = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_time().data(), static_cast<int>(this->create_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestHead.create_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->create_time(), target);
  }

  // optional uint64 log_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->log_id(), target);
  }

  // optional uint32 compress_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->compress_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RequestHead)
  return target;
}

size_t RequestHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RequestHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string from_host = 1;
    if (has_from_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_host());
    }

    // optional string charset = 4;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

    // optional string accept_charset = 5;
    if (has_accept_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accept_charset());
    }

    // optional string create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time());
    }

    // optional uint32 content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_type());
    }

    // optional bool connection = 3;
    if (has_connection()) {
      total_size += 1 + 1;
    }

    // optional uint64 log_id = 7;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

    // optional uint32 compress_type = 8;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compress_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.RequestHead)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.RequestHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.RequestHead)
    MergeFrom(*source);
  }
}

void RequestHead::MergeFrom(const RequestHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RequestHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_host();
      from_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_host_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_charset();
      charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charset_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_accept_charset();
      accept_charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accept_charset_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_create_time();
      create_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_time_);
    }
    if (cached_has_bits & 0x00000010u) {
      content_type_ = from.content_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      connection_ = from.connection_;
    }
    if (cached_has_bits & 0x00000040u) {
      log_id_ = from.log_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      compress_type_ = from.compress_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.RequestHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHead::CopyFrom(const RequestHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RequestHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHead::IsInitialized() const {
  return true;
}

void RequestHead::Swap(RequestHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHead::InternalSwap(RequestHead* other) {
  using std::swap;
  from_host_.Swap(&other->from_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  charset_.Swap(&other->charset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  accept_charset_.Swap(&other->accept_charset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  create_time_.Swap(&other->create_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_type_, other->content_type_);
  swap(connection_, other->connection_);
  swap(log_id_, other->log_id_);
  swap(compress_type_, other->compress_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestHead::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestBody::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestBody::kVersionFieldNumber;
const int RequestBody::kCharsetFieldNumber;
const int RequestBody::kServiceFieldNumber;
const int RequestBody::kMethodIdFieldNumber;
const int RequestBody::kIdFieldNumber;
const int RequestBody::kSerializedRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestBody::RequestBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_RequestBody.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RequestBody)
}
RequestBody::RequestBody(const RequestBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_charset()) {
    charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charset_);
  }
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_service()) {
    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  serialized_request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_request()) {
    serialized_request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RequestBody)
}

void RequestBody::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
}

RequestBody::~RequestBody() {
  // @@protoc_insertion_point(destructor:brpc.policy.RequestBody)
  SharedDtor();
}

void RequestBody::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestBody::descriptor() {
  ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestBody& RequestBody::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_RequestBody.base);
  return *internal_default_instance();
}


void RequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RequestBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      charset_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      service_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      serialized_request_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RequestBody)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestBody.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string charset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charset().data(), static_cast<int>(this->charset().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestBody.charset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string service = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service().data(), static_cast<int>(this->service().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RequestBody.service");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 method_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_method_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &method_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes serialized_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RequestBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RequestBody)
  return false;
#undef DO_
}

void RequestBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RequestBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional string charset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), static_cast<int>(this->charset().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->charset(), output);
  }

  // required string service = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->service(), output);
  }

  // required uint32 method_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->method_id(), output);
  }

  // required uint64 id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->id(), output);
  }

  // optional bytes serialized_request = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->serialized_request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RequestBody)
}

::google::protobuf::uint8* RequestBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RequestBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string charset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), static_cast<int>(this->charset().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charset(), target);
  }

  // required string service = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RequestBody.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service(), target);
  }

  // required uint32 method_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->method_id(), target);
  }

  // required uint64 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->id(), target);
  }

  // optional bytes serialized_request = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->serialized_request(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RequestBody)
  return target;
}

size_t RequestBody::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.RequestBody)
  size_t total_size = 0;

  if (has_service()) {
    // required string service = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  if (has_id()) {
    // required uint64 id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_method_id()) {
    // required uint32 method_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->method_id());
  }

  return total_size;
}
size_t RequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RequestBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000034) ^ 0x00000034) == 0) {  // All required fields are present.
    // required string service = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());

    // required uint64 id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint32 method_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->method_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string charset = 2;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

  }
  // optional bytes serialized_request = 6;
  if (has_serialized_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->serialized_request());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.RequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.RequestBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.RequestBody)
    MergeFrom(*source);
  }
}

void RequestBody::MergeFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_charset();
      charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charset_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_service();
      service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_serialized_request();
      serialized_request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      method_id_ = from.method_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBody::CopyFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000034) != 0x00000034) return false;
  return true;
}

void RequestBody::Swap(RequestBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestBody::InternalSwap(RequestBody* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  charset_.Swap(&other->charset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_.Swap(&other->service_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_request_.Swap(&other->serialized_request_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(method_id_, other->method_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestBody::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublicPbrpcResponse::InitAsDefaultInstance() {
  ::brpc::policy::_PublicPbrpcResponse_default_instance_._instance.get_mutable()->responsehead_ = const_cast< ::brpc::policy::ResponseHead*>(
      ::brpc::policy::ResponseHead::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicPbrpcResponse::kResponseHeadFieldNumber;
const int PublicPbrpcResponse::kResponseBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicPbrpcResponse::PublicPbrpcResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_PublicPbrpcResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.PublicPbrpcResponse)
}
PublicPbrpcResponse::PublicPbrpcResponse(const PublicPbrpcResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      responsebody_(from.responsebody_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_responsehead()) {
    responsehead_ = new ::brpc::policy::ResponseHead(*from.responsehead_);
  } else {
    responsehead_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:brpc.policy.PublicPbrpcResponse)
}

void PublicPbrpcResponse::SharedCtor() {
  responsehead_ = NULL;
}

PublicPbrpcResponse::~PublicPbrpcResponse() {
  // @@protoc_insertion_point(destructor:brpc.policy.PublicPbrpcResponse)
  SharedDtor();
}

void PublicPbrpcResponse::SharedDtor() {
  if (this != internal_default_instance()) delete responsehead_;
}

void PublicPbrpcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublicPbrpcResponse::descriptor() {
  ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublicPbrpcResponse& PublicPbrpcResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_PublicPbrpcResponse.base);
  return *internal_default_instance();
}


void PublicPbrpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.PublicPbrpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responsebody_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(responsehead_ != NULL);
    responsehead_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublicPbrpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.PublicPbrpcResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .brpc.policy.ResponseHead responseHead = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_responsehead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .brpc.policy.ResponseBody responseBody = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_responsebody()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.PublicPbrpcResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.PublicPbrpcResponse)
  return false;
#undef DO_
}

void PublicPbrpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.PublicPbrpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .brpc.policy.ResponseHead responseHead = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_responsehead(), output);
  }

  // repeated .brpc.policy.ResponseBody responseBody = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responsebody_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->responsebody(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.PublicPbrpcResponse)
}

::google::protobuf::uint8* PublicPbrpcResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.PublicPbrpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .brpc.policy.ResponseHead responseHead = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_responsehead(), deterministic, target);
  }

  // repeated .brpc.policy.ResponseBody responseBody = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responsebody_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->responsebody(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.PublicPbrpcResponse)
  return target;
}

size_t PublicPbrpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.PublicPbrpcResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .brpc.policy.ResponseBody responseBody = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->responsebody_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->responsebody(static_cast<int>(i)));
    }
  }

  // optional .brpc.policy.ResponseHead responseHead = 1;
  if (has_responsehead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *responsehead_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicPbrpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.PublicPbrpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicPbrpcResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicPbrpcResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.PublicPbrpcResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.PublicPbrpcResponse)
    MergeFrom(*source);
  }
}

void PublicPbrpcResponse::MergeFrom(const PublicPbrpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.PublicPbrpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responsebody_.MergeFrom(from.responsebody_);
  if (from.has_responsehead()) {
    mutable_responsehead()->::brpc::policy::ResponseHead::MergeFrom(from.responsehead());
  }
}

void PublicPbrpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.PublicPbrpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicPbrpcResponse::CopyFrom(const PublicPbrpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.PublicPbrpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicPbrpcResponse::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->responsebody())) return false;
  if (has_responsehead()) {
    if (!this->responsehead_->IsInitialized()) return false;
  }
  return true;
}

void PublicPbrpcResponse::Swap(PublicPbrpcResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicPbrpcResponse::InternalSwap(PublicPbrpcResponse* other) {
  using std::swap;
  CastToBase(&responsebody_)->InternalSwap(CastToBase(&other->responsebody_));
  swap(responsehead_, other->responsehead_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublicPbrpcResponse::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseHead::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHead::kCodeFieldNumber;
const int ResponseHead::kTextFieldNumber;
const int ResponseHead::kFromHostFieldNumber;
const int ResponseHead::kCompressTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHead::ResponseHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_ResponseHead.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.ResponseHead)
}
ResponseHead::ResponseHead(const ResponseHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  from_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_host()) {
    from_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_host_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&compress_type_) -
    reinterpret_cast<char*>(&code_)) + sizeof(compress_type_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.ResponseHead)
}

void ResponseHead::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_type_) -
      reinterpret_cast<char*>(&code_)) + sizeof(compress_type_));
}

ResponseHead::~ResponseHead() {
  // @@protoc_insertion_point(destructor:brpc.policy.ResponseHead)
  SharedDtor();
}

void ResponseHead::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseHead::descriptor() {
  ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseHead& ResponseHead::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_ResponseHead.base);
  return *internal_default_instance();
}


void ResponseHead::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.ResponseHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      from_host_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compress_type_) -
        reinterpret_cast<char*>(&code_)) + sizeof(compress_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.ResponseHead)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.ResponseHead.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_host = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_host().data(), static_cast<int>(this->from_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.ResponseHead.from_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 compress_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_compress_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compress_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.ResponseHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.ResponseHead)
  return false;
#undef DO_
}

void ResponseHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.ResponseHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 code = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->code(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseHead.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional string from_host = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), static_cast<int>(this->from_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseHead.from_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_host(), output);
  }

  // optional uint32 compress_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->compress_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.ResponseHead)
}

::google::protobuf::uint8* ResponseHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.ResponseHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->code(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseHead.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional string from_host = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_host().data(), static_cast<int>(this->from_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseHead.from_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_host(), target);
  }

  // optional uint32 compress_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->compress_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.ResponseHead)
  return target;
}

size_t ResponseHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.ResponseHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required sint32 code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->code());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string from_host = 3;
    if (has_from_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_host());
    }

  }
  // optional uint32 compress_type = 4;
  if (has_compress_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->compress_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.ResponseHead)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.ResponseHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.ResponseHead)
    MergeFrom(*source);
  }
}

void ResponseHead::MergeFrom(const ResponseHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.ResponseHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_from_host();
      from_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_host_);
    }
    if (cached_has_bits & 0x00000004u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000008u) {
      compress_type_ = from.compress_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.ResponseHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHead::CopyFrom(const ResponseHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.ResponseHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void ResponseHead::Swap(ResponseHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHead::InternalSwap(ResponseHead* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_host_.Swap(&other->from_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(compress_type_, other->compress_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseHead::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseBody::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseBody::kSerializedResponseFieldNumber;
const int ResponseBody::kVersionFieldNumber;
const int ResponseBody::kErrorFieldNumber;
const int ResponseBody::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseBody::ResponseBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_ResponseBody.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.ResponseBody)
}
ResponseBody::ResponseBody(const ResponseBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_response()) {
    serialized_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_response_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.ResponseBody)
}

void ResponseBody::SharedCtor() {
  serialized_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_));
}

ResponseBody::~ResponseBody() {
  // @@protoc_insertion_point(destructor:brpc.policy.ResponseBody)
  SharedDtor();
}

void ResponseBody::SharedDtor() {
  serialized_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseBody::descriptor() {
  ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseBody& ResponseBody::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::scc_info_ResponseBody.base);
  return *internal_default_instance();
}


void ResponseBody::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.ResponseBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serialized_response_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.ResponseBody)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.ResponseBody.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.ResponseBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.ResponseBody)
  return false;
#undef DO_
}

void ResponseBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.ResponseBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_response(), output);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseBody.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 error = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error(), output);
  }

  // required uint64 id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.ResponseBody)
}

::google::protobuf::uint8* ResponseBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.ResponseBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_response = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_response(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.ResponseBody.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int32 error = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error(), target);
  }

  // required uint64 id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.ResponseBody)
  return target;
}

size_t ResponseBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.ResponseBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 id = 4;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes serialized_response = 1;
    if (has_serialized_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_response());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // optional int32 error = 3;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.ResponseBody)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.ResponseBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.ResponseBody)
    MergeFrom(*source);
  }
}

void ResponseBody::MergeFrom(const ResponseBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.ResponseBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serialized_response();
      serialized_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_response_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.ResponseBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBody::CopyFrom(const ResponseBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.ResponseBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void ResponseBody::Swap(ResponseBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseBody::InternalSwap(ResponseBody* other) {
  using std::swap;
  serialized_response_.Swap(&other->serialized_response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseBody::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::PublicPbrpcRequest* Arena::CreateMaybeMessage< ::brpc::policy::PublicPbrpcRequest >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::PublicPbrpcRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::RequestHead* Arena::CreateMaybeMessage< ::brpc::policy::RequestHead >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::RequestHead >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::RequestBody* Arena::CreateMaybeMessage< ::brpc::policy::RequestBody >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::RequestBody >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::PublicPbrpcResponse* Arena::CreateMaybeMessage< ::brpc::policy::PublicPbrpcResponse >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::PublicPbrpcResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::ResponseHead* Arena::CreateMaybeMessage< ::brpc::policy::ResponseHead >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::ResponseHead >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::ResponseBody* Arena::CreateMaybeMessage< ::brpc::policy::ResponseBody >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::ResponseBody >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

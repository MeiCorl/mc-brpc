// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/public_pbrpc_meta.proto

#ifndef PROTOBUF_INCLUDED_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto
#define PROTOBUF_INCLUDED_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto 

namespace protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto
namespace brpc {
namespace policy {
class PublicPbrpcRequest;
class PublicPbrpcRequestDefaultTypeInternal;
extern PublicPbrpcRequestDefaultTypeInternal _PublicPbrpcRequest_default_instance_;
class PublicPbrpcResponse;
class PublicPbrpcResponseDefaultTypeInternal;
extern PublicPbrpcResponseDefaultTypeInternal _PublicPbrpcResponse_default_instance_;
class RequestBody;
class RequestBodyDefaultTypeInternal;
extern RequestBodyDefaultTypeInternal _RequestBody_default_instance_;
class RequestHead;
class RequestHeadDefaultTypeInternal;
extern RequestHeadDefaultTypeInternal _RequestHead_default_instance_;
class ResponseBody;
class ResponseBodyDefaultTypeInternal;
extern ResponseBodyDefaultTypeInternal _ResponseBody_default_instance_;
class ResponseHead;
class ResponseHeadDefaultTypeInternal;
extern ResponseHeadDefaultTypeInternal _ResponseHead_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
template<> ::brpc::policy::PublicPbrpcRequest* Arena::CreateMaybeMessage<::brpc::policy::PublicPbrpcRequest>(Arena*);
template<> ::brpc::policy::PublicPbrpcResponse* Arena::CreateMaybeMessage<::brpc::policy::PublicPbrpcResponse>(Arena*);
template<> ::brpc::policy::RequestBody* Arena::CreateMaybeMessage<::brpc::policy::RequestBody>(Arena*);
template<> ::brpc::policy::RequestHead* Arena::CreateMaybeMessage<::brpc::policy::RequestHead>(Arena*);
template<> ::brpc::policy::ResponseBody* Arena::CreateMaybeMessage<::brpc::policy::ResponseBody>(Arena*);
template<> ::brpc::policy::ResponseHead* Arena::CreateMaybeMessage<::brpc::policy::ResponseHead>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace brpc {
namespace policy {

// ===================================================================

class PublicPbrpcRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.PublicPbrpcRequest) */ {
 public:
  PublicPbrpcRequest();
  virtual ~PublicPbrpcRequest();

  PublicPbrpcRequest(const PublicPbrpcRequest& from);

  inline PublicPbrpcRequest& operator=(const PublicPbrpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublicPbrpcRequest(PublicPbrpcRequest&& from) noexcept
    : PublicPbrpcRequest() {
    *this = ::std::move(from);
  }

  inline PublicPbrpcRequest& operator=(PublicPbrpcRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublicPbrpcRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicPbrpcRequest* internal_default_instance() {
    return reinterpret_cast<const PublicPbrpcRequest*>(
               &_PublicPbrpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PublicPbrpcRequest* other);
  friend void swap(PublicPbrpcRequest& a, PublicPbrpcRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublicPbrpcRequest* New() const final {
    return CreateMaybeMessage<PublicPbrpcRequest>(NULL);
  }

  PublicPbrpcRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublicPbrpcRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublicPbrpcRequest& from);
  void MergeFrom(const PublicPbrpcRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicPbrpcRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .brpc.policy.RequestBody requestBody = 2;
  int requestbody_size() const;
  void clear_requestbody();
  static const int kRequestBodyFieldNumber = 2;
  ::brpc::policy::RequestBody* mutable_requestbody(int index);
  ::google::protobuf::RepeatedPtrField< ::brpc::policy::RequestBody >*
      mutable_requestbody();
  const ::brpc::policy::RequestBody& requestbody(int index) const;
  ::brpc::policy::RequestBody* add_requestbody();
  const ::google::protobuf::RepeatedPtrField< ::brpc::policy::RequestBody >&
      requestbody() const;

  // optional .brpc.policy.RequestHead requestHead = 1;
  bool has_requesthead() const;
  void clear_requesthead();
  static const int kRequestHeadFieldNumber = 1;
  private:
  const ::brpc::policy::RequestHead& _internal_requesthead() const;
  public:
  const ::brpc::policy::RequestHead& requesthead() const;
  ::brpc::policy::RequestHead* release_requesthead();
  ::brpc::policy::RequestHead* mutable_requesthead();
  void set_allocated_requesthead(::brpc::policy::RequestHead* requesthead);

  // @@protoc_insertion_point(class_scope:brpc.policy.PublicPbrpcRequest)
 private:
  void set_has_requesthead();
  void clear_has_requesthead();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::brpc::policy::RequestBody > requestbody_;
  ::brpc::policy::RequestHead* requesthead_;
  friend struct ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.RequestHead) */ {
 public:
  RequestHead();
  virtual ~RequestHead();

  RequestHead(const RequestHead& from);

  inline RequestHead& operator=(const RequestHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestHead(RequestHead&& from) noexcept
    : RequestHead() {
    *this = ::std::move(from);
  }

  inline RequestHead& operator=(RequestHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestHead* internal_default_instance() {
    return reinterpret_cast<const RequestHead*>(
               &_RequestHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RequestHead* other);
  friend void swap(RequestHead& a, RequestHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestHead* New() const final {
    return CreateMaybeMessage<RequestHead>(NULL);
  }

  RequestHead* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestHead>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestHead& from);
  void MergeFrom(const RequestHead& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string from_host = 1;
  bool has_from_host() const;
  void clear_from_host();
  static const int kFromHostFieldNumber = 1;
  const ::std::string& from_host() const;
  void set_from_host(const ::std::string& value);
  #if LANG_CXX11
  void set_from_host(::std::string&& value);
  #endif
  void set_from_host(const char* value);
  void set_from_host(const char* value, size_t size);
  ::std::string* mutable_from_host();
  ::std::string* release_from_host();
  void set_allocated_from_host(::std::string* from_host);

  // optional string charset = 4;
  bool has_charset() const;
  void clear_charset();
  static const int kCharsetFieldNumber = 4;
  const ::std::string& charset() const;
  void set_charset(const ::std::string& value);
  #if LANG_CXX11
  void set_charset(::std::string&& value);
  #endif
  void set_charset(const char* value);
  void set_charset(const char* value, size_t size);
  ::std::string* mutable_charset();
  ::std::string* release_charset();
  void set_allocated_charset(::std::string* charset);

  // optional string accept_charset = 5;
  bool has_accept_charset() const;
  void clear_accept_charset();
  static const int kAcceptCharsetFieldNumber = 5;
  const ::std::string& accept_charset() const;
  void set_accept_charset(const ::std::string& value);
  #if LANG_CXX11
  void set_accept_charset(::std::string&& value);
  #endif
  void set_accept_charset(const char* value);
  void set_accept_charset(const char* value, size_t size);
  ::std::string* mutable_accept_charset();
  ::std::string* release_accept_charset();
  void set_allocated_accept_charset(::std::string* accept_charset);

  // optional string create_time = 6;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  const ::std::string& create_time() const;
  void set_create_time(const ::std::string& value);
  #if LANG_CXX11
  void set_create_time(::std::string&& value);
  #endif
  void set_create_time(const char* value);
  void set_create_time(const char* value, size_t size);
  ::std::string* mutable_create_time();
  ::std::string* release_create_time();
  void set_allocated_create_time(::std::string* create_time);

  // optional uint32 content_type = 2;
  bool has_content_type() const;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 2;
  ::google::protobuf::uint32 content_type() const;
  void set_content_type(::google::protobuf::uint32 value);

  // optional bool connection = 3;
  bool has_connection() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 3;
  bool connection() const;
  void set_connection(bool value);

  // optional uint64 log_id = 7;
  bool has_log_id() const;
  void clear_log_id();
  static const int kLogIdFieldNumber = 7;
  ::google::protobuf::uint64 log_id() const;
  void set_log_id(::google::protobuf::uint64 value);

  // optional uint32 compress_type = 8;
  bool has_compress_type() const;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 8;
  ::google::protobuf::uint32 compress_type() const;
  void set_compress_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:brpc.policy.RequestHead)
 private:
  void set_has_from_host();
  void clear_has_from_host();
  void set_has_content_type();
  void clear_has_content_type();
  void set_has_connection();
  void clear_has_connection();
  void set_has_charset();
  void clear_has_charset();
  void set_has_accept_charset();
  void clear_has_accept_charset();
  void set_has_create_time();
  void clear_has_create_time();
  void set_has_log_id();
  void clear_has_log_id();
  void set_has_compress_type();
  void clear_has_compress_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_host_;
  ::google::protobuf::internal::ArenaStringPtr charset_;
  ::google::protobuf::internal::ArenaStringPtr accept_charset_;
  ::google::protobuf::internal::ArenaStringPtr create_time_;
  ::google::protobuf::uint32 content_type_;
  bool connection_;
  ::google::protobuf::uint64 log_id_;
  ::google::protobuf::uint32 compress_type_;
  friend struct ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.RequestBody) */ {
 public:
  RequestBody();
  virtual ~RequestBody();

  RequestBody(const RequestBody& from);

  inline RequestBody& operator=(const RequestBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestBody(RequestBody&& from) noexcept
    : RequestBody() {
    *this = ::std::move(from);
  }

  inline RequestBody& operator=(RequestBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestBody* internal_default_instance() {
    return reinterpret_cast<const RequestBody*>(
               &_RequestBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RequestBody* other);
  friend void swap(RequestBody& a, RequestBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestBody* New() const final {
    return CreateMaybeMessage<RequestBody>(NULL);
  }

  RequestBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestBody& from);
  void MergeFrom(const RequestBody& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string charset = 2;
  bool has_charset() const;
  void clear_charset();
  static const int kCharsetFieldNumber = 2;
  const ::std::string& charset() const;
  void set_charset(const ::std::string& value);
  #if LANG_CXX11
  void set_charset(::std::string&& value);
  #endif
  void set_charset(const char* value);
  void set_charset(const char* value, size_t size);
  ::std::string* mutable_charset();
  ::std::string* release_charset();
  void set_allocated_charset(::std::string* charset);

  // required string service = 3;
  bool has_service() const;
  void clear_service();
  static const int kServiceFieldNumber = 3;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // optional bytes serialized_request = 6;
  bool has_serialized_request() const;
  void clear_serialized_request();
  static const int kSerializedRequestFieldNumber = 6;
  const ::std::string& serialized_request() const;
  void set_serialized_request(const ::std::string& value);
  #if LANG_CXX11
  void set_serialized_request(::std::string&& value);
  #endif
  void set_serialized_request(const char* value);
  void set_serialized_request(const void* value, size_t size);
  ::std::string* mutable_serialized_request();
  ::std::string* release_serialized_request();
  void set_allocated_serialized_request(::std::string* serialized_request);

  // required uint64 id = 5;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 5;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required uint32 method_id = 4;
  bool has_method_id() const;
  void clear_method_id();
  static const int kMethodIdFieldNumber = 4;
  ::google::protobuf::uint32 method_id() const;
  void set_method_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:brpc.policy.RequestBody)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_charset();
  void clear_has_charset();
  void set_has_service();
  void clear_has_service();
  void set_has_method_id();
  void clear_has_method_id();
  void set_has_id();
  void clear_has_id();
  void set_has_serialized_request();
  void clear_has_serialized_request();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr charset_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr serialized_request_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 method_id_;
  friend struct ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublicPbrpcResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.PublicPbrpcResponse) */ {
 public:
  PublicPbrpcResponse();
  virtual ~PublicPbrpcResponse();

  PublicPbrpcResponse(const PublicPbrpcResponse& from);

  inline PublicPbrpcResponse& operator=(const PublicPbrpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublicPbrpcResponse(PublicPbrpcResponse&& from) noexcept
    : PublicPbrpcResponse() {
    *this = ::std::move(from);
  }

  inline PublicPbrpcResponse& operator=(PublicPbrpcResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublicPbrpcResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicPbrpcResponse* internal_default_instance() {
    return reinterpret_cast<const PublicPbrpcResponse*>(
               &_PublicPbrpcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PublicPbrpcResponse* other);
  friend void swap(PublicPbrpcResponse& a, PublicPbrpcResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublicPbrpcResponse* New() const final {
    return CreateMaybeMessage<PublicPbrpcResponse>(NULL);
  }

  PublicPbrpcResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublicPbrpcResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublicPbrpcResponse& from);
  void MergeFrom(const PublicPbrpcResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicPbrpcResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .brpc.policy.ResponseBody responseBody = 2;
  int responsebody_size() const;
  void clear_responsebody();
  static const int kResponseBodyFieldNumber = 2;
  ::brpc::policy::ResponseBody* mutable_responsebody(int index);
  ::google::protobuf::RepeatedPtrField< ::brpc::policy::ResponseBody >*
      mutable_responsebody();
  const ::brpc::policy::ResponseBody& responsebody(int index) const;
  ::brpc::policy::ResponseBody* add_responsebody();
  const ::google::protobuf::RepeatedPtrField< ::brpc::policy::ResponseBody >&
      responsebody() const;

  // optional .brpc.policy.ResponseHead responseHead = 1;
  bool has_responsehead() const;
  void clear_responsehead();
  static const int kResponseHeadFieldNumber = 1;
  private:
  const ::brpc::policy::ResponseHead& _internal_responsehead() const;
  public:
  const ::brpc::policy::ResponseHead& responsehead() const;
  ::brpc::policy::ResponseHead* release_responsehead();
  ::brpc::policy::ResponseHead* mutable_responsehead();
  void set_allocated_responsehead(::brpc::policy::ResponseHead* responsehead);

  // @@protoc_insertion_point(class_scope:brpc.policy.PublicPbrpcResponse)
 private:
  void set_has_responsehead();
  void clear_has_responsehead();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::brpc::policy::ResponseBody > responsebody_;
  ::brpc::policy::ResponseHead* responsehead_;
  friend struct ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.ResponseHead) */ {
 public:
  ResponseHead();
  virtual ~ResponseHead();

  ResponseHead(const ResponseHead& from);

  inline ResponseHead& operator=(const ResponseHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseHead(ResponseHead&& from) noexcept
    : ResponseHead() {
    *this = ::std::move(from);
  }

  inline ResponseHead& operator=(ResponseHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHead* internal_default_instance() {
    return reinterpret_cast<const ResponseHead*>(
               &_ResponseHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ResponseHead* other);
  friend void swap(ResponseHead& a, ResponseHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseHead* New() const final {
    return CreateMaybeMessage<ResponseHead>(NULL);
  }

  ResponseHead* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseHead>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseHead& from);
  void MergeFrom(const ResponseHead& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string from_host = 3;
  bool has_from_host() const;
  void clear_from_host();
  static const int kFromHostFieldNumber = 3;
  const ::std::string& from_host() const;
  void set_from_host(const ::std::string& value);
  #if LANG_CXX11
  void set_from_host(::std::string&& value);
  #endif
  void set_from_host(const char* value);
  void set_from_host(const char* value, size_t size);
  ::std::string* mutable_from_host();
  ::std::string* release_from_host();
  void set_allocated_from_host(::std::string* from_host);

  // required sint32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional uint32 compress_type = 4;
  bool has_compress_type() const;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 4;
  ::google::protobuf::uint32 compress_type() const;
  void set_compress_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:brpc.policy.ResponseHead)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_text();
  void clear_has_text();
  void set_has_from_host();
  void clear_has_from_host();
  void set_has_compress_type();
  void clear_has_compress_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr from_host_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::uint32 compress_type_;
  friend struct ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.ResponseBody) */ {
 public:
  ResponseBody();
  virtual ~ResponseBody();

  ResponseBody(const ResponseBody& from);

  inline ResponseBody& operator=(const ResponseBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseBody(ResponseBody&& from) noexcept
    : ResponseBody() {
    *this = ::std::move(from);
  }

  inline ResponseBody& operator=(ResponseBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseBody* internal_default_instance() {
    return reinterpret_cast<const ResponseBody*>(
               &_ResponseBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ResponseBody* other);
  friend void swap(ResponseBody& a, ResponseBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseBody* New() const final {
    return CreateMaybeMessage<ResponseBody>(NULL);
  }

  ResponseBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseBody& from);
  void MergeFrom(const ResponseBody& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes serialized_response = 1;
  bool has_serialized_response() const;
  void clear_serialized_response();
  static const int kSerializedResponseFieldNumber = 1;
  const ::std::string& serialized_response() const;
  void set_serialized_response(const ::std::string& value);
  #if LANG_CXX11
  void set_serialized_response(::std::string&& value);
  #endif
  void set_serialized_response(const char* value);
  void set_serialized_response(const void* value, size_t size);
  ::std::string* mutable_serialized_response();
  ::std::string* release_serialized_response();
  void set_allocated_serialized_response(::std::string* serialized_response);

  // optional string version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // required uint64 id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional int32 error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:brpc.policy.ResponseBody)
 private:
  void set_has_serialized_response();
  void clear_has_serialized_response();
  void set_has_version();
  void clear_has_version();
  void set_has_error();
  void clear_has_error();
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serialized_response_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 error_;
  friend struct ::protobuf_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicPbrpcRequest

// optional .brpc.policy.RequestHead requestHead = 1;
inline bool PublicPbrpcRequest::has_requesthead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublicPbrpcRequest::set_has_requesthead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublicPbrpcRequest::clear_has_requesthead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublicPbrpcRequest::clear_requesthead() {
  if (requesthead_ != NULL) requesthead_->Clear();
  clear_has_requesthead();
}
inline const ::brpc::policy::RequestHead& PublicPbrpcRequest::_internal_requesthead() const {
  return *requesthead_;
}
inline const ::brpc::policy::RequestHead& PublicPbrpcRequest::requesthead() const {
  const ::brpc::policy::RequestHead* p = requesthead_;
  // @@protoc_insertion_point(field_get:brpc.policy.PublicPbrpcRequest.requestHead)
  return p != NULL ? *p : *reinterpret_cast<const ::brpc::policy::RequestHead*>(
      &::brpc::policy::_RequestHead_default_instance_);
}
inline ::brpc::policy::RequestHead* PublicPbrpcRequest::release_requesthead() {
  // @@protoc_insertion_point(field_release:brpc.policy.PublicPbrpcRequest.requestHead)
  clear_has_requesthead();
  ::brpc::policy::RequestHead* temp = requesthead_;
  requesthead_ = NULL;
  return temp;
}
inline ::brpc::policy::RequestHead* PublicPbrpcRequest::mutable_requesthead() {
  set_has_requesthead();
  if (requesthead_ == NULL) {
    auto* p = CreateMaybeMessage<::brpc::policy::RequestHead>(GetArenaNoVirtual());
    requesthead_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.PublicPbrpcRequest.requestHead)
  return requesthead_;
}
inline void PublicPbrpcRequest::set_allocated_requesthead(::brpc::policy::RequestHead* requesthead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete requesthead_;
  }
  if (requesthead) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      requesthead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requesthead, submessage_arena);
    }
    set_has_requesthead();
  } else {
    clear_has_requesthead();
  }
  requesthead_ = requesthead;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.PublicPbrpcRequest.requestHead)
}

// repeated .brpc.policy.RequestBody requestBody = 2;
inline int PublicPbrpcRequest::requestbody_size() const {
  return requestbody_.size();
}
inline void PublicPbrpcRequest::clear_requestbody() {
  requestbody_.Clear();
}
inline ::brpc::policy::RequestBody* PublicPbrpcRequest::mutable_requestbody(int index) {
  // @@protoc_insertion_point(field_mutable:brpc.policy.PublicPbrpcRequest.requestBody)
  return requestbody_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::brpc::policy::RequestBody >*
PublicPbrpcRequest::mutable_requestbody() {
  // @@protoc_insertion_point(field_mutable_list:brpc.policy.PublicPbrpcRequest.requestBody)
  return &requestbody_;
}
inline const ::brpc::policy::RequestBody& PublicPbrpcRequest::requestbody(int index) const {
  // @@protoc_insertion_point(field_get:brpc.policy.PublicPbrpcRequest.requestBody)
  return requestbody_.Get(index);
}
inline ::brpc::policy::RequestBody* PublicPbrpcRequest::add_requestbody() {
  // @@protoc_insertion_point(field_add:brpc.policy.PublicPbrpcRequest.requestBody)
  return requestbody_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::brpc::policy::RequestBody >&
PublicPbrpcRequest::requestbody() const {
  // @@protoc_insertion_point(field_list:brpc.policy.PublicPbrpcRequest.requestBody)
  return requestbody_;
}

// -------------------------------------------------------------------

// RequestHead

// optional string from_host = 1;
inline bool RequestHead::has_from_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestHead::set_has_from_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestHead::clear_has_from_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestHead::clear_from_host() {
  from_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_host();
}
inline const ::std::string& RequestHead::from_host() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.from_host)
  return from_host_.GetNoArena();
}
inline void RequestHead::set_from_host(const ::std::string& value) {
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.from_host)
}
#if LANG_CXX11
inline void RequestHead::set_from_host(::std::string&& value) {
  set_has_from_host();
  from_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.RequestHead.from_host)
}
#endif
inline void RequestHead::set_from_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestHead.from_host)
}
inline void RequestHead::set_from_host(const char* value, size_t size) {
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestHead.from_host)
}
inline ::std::string* RequestHead::mutable_from_host() {
  set_has_from_host();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestHead.from_host)
  return from_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHead::release_from_host() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestHead.from_host)
  if (!has_from_host()) {
    return NULL;
  }
  clear_has_from_host();
  return from_host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHead::set_allocated_from_host(::std::string* from_host) {
  if (from_host != NULL) {
    set_has_from_host();
  } else {
    clear_has_from_host();
  }
  from_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_host);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestHead.from_host)
}

// optional uint32 content_type = 2;
inline bool RequestHead::has_content_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestHead::set_has_content_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestHead::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestHead::clear_content_type() {
  content_type_ = 0u;
  clear_has_content_type();
}
inline ::google::protobuf::uint32 RequestHead::content_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.content_type)
  return content_type_;
}
inline void RequestHead::set_content_type(::google::protobuf::uint32 value) {
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.content_type)
}

// optional bool connection = 3;
inline bool RequestHead::has_connection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestHead::set_has_connection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RequestHead::clear_has_connection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RequestHead::clear_connection() {
  connection_ = false;
  clear_has_connection();
}
inline bool RequestHead::connection() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.connection)
  return connection_;
}
inline void RequestHead::set_connection(bool value) {
  set_has_connection();
  connection_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.connection)
}

// optional string charset = 4;
inline bool RequestHead::has_charset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestHead::set_has_charset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestHead::clear_has_charset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestHead::clear_charset() {
  charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_charset();
}
inline const ::std::string& RequestHead::charset() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.charset)
  return charset_.GetNoArena();
}
inline void RequestHead::set_charset(const ::std::string& value) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.charset)
}
#if LANG_CXX11
inline void RequestHead::set_charset(::std::string&& value) {
  set_has_charset();
  charset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.RequestHead.charset)
}
#endif
inline void RequestHead::set_charset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestHead.charset)
}
inline void RequestHead::set_charset(const char* value, size_t size) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestHead.charset)
}
inline ::std::string* RequestHead::mutable_charset() {
  set_has_charset();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestHead.charset)
  return charset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHead::release_charset() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestHead.charset)
  if (!has_charset()) {
    return NULL;
  }
  clear_has_charset();
  return charset_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHead::set_allocated_charset(::std::string* charset) {
  if (charset != NULL) {
    set_has_charset();
  } else {
    clear_has_charset();
  }
  charset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), charset);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestHead.charset)
}

// optional string accept_charset = 5;
inline bool RequestHead::has_accept_charset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestHead::set_has_accept_charset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestHead::clear_has_accept_charset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestHead::clear_accept_charset() {
  accept_charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_accept_charset();
}
inline const ::std::string& RequestHead::accept_charset() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.accept_charset)
  return accept_charset_.GetNoArena();
}
inline void RequestHead::set_accept_charset(const ::std::string& value) {
  set_has_accept_charset();
  accept_charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.accept_charset)
}
#if LANG_CXX11
inline void RequestHead::set_accept_charset(::std::string&& value) {
  set_has_accept_charset();
  accept_charset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.RequestHead.accept_charset)
}
#endif
inline void RequestHead::set_accept_charset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_accept_charset();
  accept_charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestHead.accept_charset)
}
inline void RequestHead::set_accept_charset(const char* value, size_t size) {
  set_has_accept_charset();
  accept_charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestHead.accept_charset)
}
inline ::std::string* RequestHead::mutable_accept_charset() {
  set_has_accept_charset();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestHead.accept_charset)
  return accept_charset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHead::release_accept_charset() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestHead.accept_charset)
  if (!has_accept_charset()) {
    return NULL;
  }
  clear_has_accept_charset();
  return accept_charset_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHead::set_allocated_accept_charset(::std::string* accept_charset) {
  if (accept_charset != NULL) {
    set_has_accept_charset();
  } else {
    clear_has_accept_charset();
  }
  accept_charset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accept_charset);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestHead.accept_charset)
}

// optional string create_time = 6;
inline bool RequestHead::has_create_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestHead::set_has_create_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestHead::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestHead::clear_create_time() {
  create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_create_time();
}
inline const ::std::string& RequestHead::create_time() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.create_time)
  return create_time_.GetNoArena();
}
inline void RequestHead::set_create_time(const ::std::string& value) {
  set_has_create_time();
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.create_time)
}
#if LANG_CXX11
inline void RequestHead::set_create_time(::std::string&& value) {
  set_has_create_time();
  create_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.RequestHead.create_time)
}
#endif
inline void RequestHead::set_create_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_create_time();
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestHead.create_time)
}
inline void RequestHead::set_create_time(const char* value, size_t size) {
  set_has_create_time();
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestHead.create_time)
}
inline ::std::string* RequestHead::mutable_create_time() {
  set_has_create_time();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestHead.create_time)
  return create_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHead::release_create_time() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestHead.create_time)
  if (!has_create_time()) {
    return NULL;
  }
  clear_has_create_time();
  return create_time_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHead::set_allocated_create_time(::std::string* create_time) {
  if (create_time != NULL) {
    set_has_create_time();
  } else {
    clear_has_create_time();
  }
  create_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_time);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestHead.create_time)
}

// optional uint64 log_id = 7;
inline bool RequestHead::has_log_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RequestHead::set_has_log_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RequestHead::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RequestHead::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
  clear_has_log_id();
}
inline ::google::protobuf::uint64 RequestHead::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.log_id)
  return log_id_;
}
inline void RequestHead::set_log_id(::google::protobuf::uint64 value) {
  set_has_log_id();
  log_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.log_id)
}

// optional uint32 compress_type = 8;
inline bool RequestHead::has_compress_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RequestHead::set_has_compress_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RequestHead::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RequestHead::clear_compress_type() {
  compress_type_ = 0u;
  clear_has_compress_type();
}
inline ::google::protobuf::uint32 RequestHead::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestHead.compress_type)
  return compress_type_;
}
inline void RequestHead::set_compress_type(::google::protobuf::uint32 value) {
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestHead.compress_type)
}

// -------------------------------------------------------------------

// RequestBody

// optional string version = 1;
inline bool RequestBody::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestBody::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestBody::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestBody::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& RequestBody::version() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.version)
  return version_.GetNoArena();
}
inline void RequestBody::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.version)
}
#if LANG_CXX11
inline void RequestBody::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.RequestBody.version)
}
#endif
inline void RequestBody::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestBody.version)
}
inline void RequestBody::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestBody.version)
}
inline ::std::string* RequestBody::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestBody.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestBody::release_version() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestBody.version)
  if (!has_version()) {
    return NULL;
  }
  clear_has_version();
  return version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestBody::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestBody.version)
}

// optional string charset = 2;
inline bool RequestBody::has_charset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestBody::set_has_charset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestBody::clear_has_charset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestBody::clear_charset() {
  charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_charset();
}
inline const ::std::string& RequestBody::charset() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.charset)
  return charset_.GetNoArena();
}
inline void RequestBody::set_charset(const ::std::string& value) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.charset)
}
#if LANG_CXX11
inline void RequestBody::set_charset(::std::string&& value) {
  set_has_charset();
  charset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.RequestBody.charset)
}
#endif
inline void RequestBody::set_charset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestBody.charset)
}
inline void RequestBody::set_charset(const char* value, size_t size) {
  set_has_charset();
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestBody.charset)
}
inline ::std::string* RequestBody::mutable_charset() {
  set_has_charset();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestBody.charset)
  return charset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestBody::release_charset() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestBody.charset)
  if (!has_charset()) {
    return NULL;
  }
  clear_has_charset();
  return charset_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestBody::set_allocated_charset(::std::string* charset) {
  if (charset != NULL) {
    set_has_charset();
  } else {
    clear_has_charset();
  }
  charset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), charset);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestBody.charset)
}

// required string service = 3;
inline bool RequestBody::has_service() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestBody::set_has_service() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestBody::clear_has_service() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestBody::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service();
}
inline const ::std::string& RequestBody::service() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.service)
  return service_.GetNoArena();
}
inline void RequestBody::set_service(const ::std::string& value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.service)
}
#if LANG_CXX11
inline void RequestBody::set_service(::std::string&& value) {
  set_has_service();
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.RequestBody.service)
}
#endif
inline void RequestBody::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestBody.service)
}
inline void RequestBody::set_service(const char* value, size_t size) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestBody.service)
}
inline ::std::string* RequestBody::mutable_service() {
  set_has_service();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestBody.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestBody::release_service() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestBody.service)
  if (!has_service()) {
    return NULL;
  }
  clear_has_service();
  return service_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestBody::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    set_has_service();
  } else {
    clear_has_service();
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestBody.service)
}

// required uint32 method_id = 4;
inline bool RequestBody::has_method_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestBody::set_has_method_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RequestBody::clear_has_method_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RequestBody::clear_method_id() {
  method_id_ = 0u;
  clear_has_method_id();
}
inline ::google::protobuf::uint32 RequestBody::method_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.method_id)
  return method_id_;
}
inline void RequestBody::set_method_id(::google::protobuf::uint32 value) {
  set_has_method_id();
  method_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.method_id)
}

// required uint64 id = 5;
inline bool RequestBody::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestBody::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestBody::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestBody::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RequestBody::id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.id)
  return id_;
}
inline void RequestBody::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.id)
}

// optional bytes serialized_request = 6;
inline bool RequestBody::has_serialized_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestBody::set_has_serialized_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestBody::clear_has_serialized_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestBody::clear_serialized_request() {
  serialized_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_request();
}
inline const ::std::string& RequestBody::serialized_request() const {
  // @@protoc_insertion_point(field_get:brpc.policy.RequestBody.serialized_request)
  return serialized_request_.GetNoArena();
}
inline void RequestBody::set_serialized_request(const ::std::string& value) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.RequestBody.serialized_request)
}
#if LANG_CXX11
inline void RequestBody::set_serialized_request(::std::string&& value) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.RequestBody.serialized_request)
}
#endif
inline void RequestBody::set_serialized_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.RequestBody.serialized_request)
}
inline void RequestBody::set_serialized_request(const void* value, size_t size) {
  set_has_serialized_request();
  serialized_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.RequestBody.serialized_request)
}
inline ::std::string* RequestBody::mutable_serialized_request() {
  set_has_serialized_request();
  // @@protoc_insertion_point(field_mutable:brpc.policy.RequestBody.serialized_request)
  return serialized_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestBody::release_serialized_request() {
  // @@protoc_insertion_point(field_release:brpc.policy.RequestBody.serialized_request)
  if (!has_serialized_request()) {
    return NULL;
  }
  clear_has_serialized_request();
  return serialized_request_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestBody::set_allocated_serialized_request(::std::string* serialized_request) {
  if (serialized_request != NULL) {
    set_has_serialized_request();
  } else {
    clear_has_serialized_request();
  }
  serialized_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_request);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.RequestBody.serialized_request)
}

// -------------------------------------------------------------------

// PublicPbrpcResponse

// optional .brpc.policy.ResponseHead responseHead = 1;
inline bool PublicPbrpcResponse::has_responsehead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublicPbrpcResponse::set_has_responsehead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublicPbrpcResponse::clear_has_responsehead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublicPbrpcResponse::clear_responsehead() {
  if (responsehead_ != NULL) responsehead_->Clear();
  clear_has_responsehead();
}
inline const ::brpc::policy::ResponseHead& PublicPbrpcResponse::_internal_responsehead() const {
  return *responsehead_;
}
inline const ::brpc::policy::ResponseHead& PublicPbrpcResponse::responsehead() const {
  const ::brpc::policy::ResponseHead* p = responsehead_;
  // @@protoc_insertion_point(field_get:brpc.policy.PublicPbrpcResponse.responseHead)
  return p != NULL ? *p : *reinterpret_cast<const ::brpc::policy::ResponseHead*>(
      &::brpc::policy::_ResponseHead_default_instance_);
}
inline ::brpc::policy::ResponseHead* PublicPbrpcResponse::release_responsehead() {
  // @@protoc_insertion_point(field_release:brpc.policy.PublicPbrpcResponse.responseHead)
  clear_has_responsehead();
  ::brpc::policy::ResponseHead* temp = responsehead_;
  responsehead_ = NULL;
  return temp;
}
inline ::brpc::policy::ResponseHead* PublicPbrpcResponse::mutable_responsehead() {
  set_has_responsehead();
  if (responsehead_ == NULL) {
    auto* p = CreateMaybeMessage<::brpc::policy::ResponseHead>(GetArenaNoVirtual());
    responsehead_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.PublicPbrpcResponse.responseHead)
  return responsehead_;
}
inline void PublicPbrpcResponse::set_allocated_responsehead(::brpc::policy::ResponseHead* responsehead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete responsehead_;
  }
  if (responsehead) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      responsehead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsehead, submessage_arena);
    }
    set_has_responsehead();
  } else {
    clear_has_responsehead();
  }
  responsehead_ = responsehead;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.PublicPbrpcResponse.responseHead)
}

// repeated .brpc.policy.ResponseBody responseBody = 2;
inline int PublicPbrpcResponse::responsebody_size() const {
  return responsebody_.size();
}
inline void PublicPbrpcResponse::clear_responsebody() {
  responsebody_.Clear();
}
inline ::brpc::policy::ResponseBody* PublicPbrpcResponse::mutable_responsebody(int index) {
  // @@protoc_insertion_point(field_mutable:brpc.policy.PublicPbrpcResponse.responseBody)
  return responsebody_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::brpc::policy::ResponseBody >*
PublicPbrpcResponse::mutable_responsebody() {
  // @@protoc_insertion_point(field_mutable_list:brpc.policy.PublicPbrpcResponse.responseBody)
  return &responsebody_;
}
inline const ::brpc::policy::ResponseBody& PublicPbrpcResponse::responsebody(int index) const {
  // @@protoc_insertion_point(field_get:brpc.policy.PublicPbrpcResponse.responseBody)
  return responsebody_.Get(index);
}
inline ::brpc::policy::ResponseBody* PublicPbrpcResponse::add_responsebody() {
  // @@protoc_insertion_point(field_add:brpc.policy.PublicPbrpcResponse.responseBody)
  return responsebody_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::brpc::policy::ResponseBody >&
PublicPbrpcResponse::responsebody() const {
  // @@protoc_insertion_point(field_list:brpc.policy.PublicPbrpcResponse.responseBody)
  return responsebody_;
}

// -------------------------------------------------------------------

// ResponseHead

// required sint32 code = 1;
inline bool ResponseHead::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseHead::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseHead::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseHead::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ResponseHead::code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseHead.code)
  return code_;
}
inline void ResponseHead::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseHead.code)
}

// optional string text = 2;
inline bool ResponseHead::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseHead::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseHead::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseHead::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& ResponseHead::text() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseHead.text)
  return text_.GetNoArena();
}
inline void ResponseHead::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseHead.text)
}
#if LANG_CXX11
inline void ResponseHead::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.ResponseHead.text)
}
#endif
inline void ResponseHead::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.ResponseHead.text)
}
inline void ResponseHead::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.ResponseHead.text)
}
inline ::std::string* ResponseHead::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:brpc.policy.ResponseHead.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseHead::release_text() {
  // @@protoc_insertion_point(field_release:brpc.policy.ResponseHead.text)
  if (!has_text()) {
    return NULL;
  }
  clear_has_text();
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseHead::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.ResponseHead.text)
}

// optional string from_host = 3;
inline bool ResponseHead::has_from_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseHead::set_has_from_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseHead::clear_has_from_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseHead::clear_from_host() {
  from_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_host();
}
inline const ::std::string& ResponseHead::from_host() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseHead.from_host)
  return from_host_.GetNoArena();
}
inline void ResponseHead::set_from_host(const ::std::string& value) {
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseHead.from_host)
}
#if LANG_CXX11
inline void ResponseHead::set_from_host(::std::string&& value) {
  set_has_from_host();
  from_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.ResponseHead.from_host)
}
#endif
inline void ResponseHead::set_from_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.ResponseHead.from_host)
}
inline void ResponseHead::set_from_host(const char* value, size_t size) {
  set_has_from_host();
  from_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.ResponseHead.from_host)
}
inline ::std::string* ResponseHead::mutable_from_host() {
  set_has_from_host();
  // @@protoc_insertion_point(field_mutable:brpc.policy.ResponseHead.from_host)
  return from_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseHead::release_from_host() {
  // @@protoc_insertion_point(field_release:brpc.policy.ResponseHead.from_host)
  if (!has_from_host()) {
    return NULL;
  }
  clear_has_from_host();
  return from_host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseHead::set_allocated_from_host(::std::string* from_host) {
  if (from_host != NULL) {
    set_has_from_host();
  } else {
    clear_has_from_host();
  }
  from_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_host);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.ResponseHead.from_host)
}

// optional uint32 compress_type = 4;
inline bool ResponseHead::has_compress_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseHead::set_has_compress_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseHead::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseHead::clear_compress_type() {
  compress_type_ = 0u;
  clear_has_compress_type();
}
inline ::google::protobuf::uint32 ResponseHead::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseHead.compress_type)
  return compress_type_;
}
inline void ResponseHead::set_compress_type(::google::protobuf::uint32 value) {
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseHead.compress_type)
}

// -------------------------------------------------------------------

// ResponseBody

// optional bytes serialized_response = 1;
inline bool ResponseBody::has_serialized_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseBody::set_has_serialized_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseBody::clear_has_serialized_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseBody::clear_serialized_response() {
  serialized_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_response();
}
inline const ::std::string& ResponseBody::serialized_response() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseBody.serialized_response)
  return serialized_response_.GetNoArena();
}
inline void ResponseBody::set_serialized_response(const ::std::string& value) {
  set_has_serialized_response();
  serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseBody.serialized_response)
}
#if LANG_CXX11
inline void ResponseBody::set_serialized_response(::std::string&& value) {
  set_has_serialized_response();
  serialized_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.ResponseBody.serialized_response)
}
#endif
inline void ResponseBody::set_serialized_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized_response();
  serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.ResponseBody.serialized_response)
}
inline void ResponseBody::set_serialized_response(const void* value, size_t size) {
  set_has_serialized_response();
  serialized_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.ResponseBody.serialized_response)
}
inline ::std::string* ResponseBody::mutable_serialized_response() {
  set_has_serialized_response();
  // @@protoc_insertion_point(field_mutable:brpc.policy.ResponseBody.serialized_response)
  return serialized_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseBody::release_serialized_response() {
  // @@protoc_insertion_point(field_release:brpc.policy.ResponseBody.serialized_response)
  if (!has_serialized_response()) {
    return NULL;
  }
  clear_has_serialized_response();
  return serialized_response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseBody::set_allocated_serialized_response(::std::string* serialized_response) {
  if (serialized_response != NULL) {
    set_has_serialized_response();
  } else {
    clear_has_serialized_response();
  }
  serialized_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_response);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.ResponseBody.serialized_response)
}

// optional string version = 2;
inline bool ResponseBody::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseBody::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseBody::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseBody::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& ResponseBody::version() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseBody.version)
  return version_.GetNoArena();
}
inline void ResponseBody::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseBody.version)
}
#if LANG_CXX11
inline void ResponseBody::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.ResponseBody.version)
}
#endif
inline void ResponseBody::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.ResponseBody.version)
}
inline void ResponseBody::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.ResponseBody.version)
}
inline ::std::string* ResponseBody::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:brpc.policy.ResponseBody.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseBody::release_version() {
  // @@protoc_insertion_point(field_release:brpc.policy.ResponseBody.version)
  if (!has_version()) {
    return NULL;
  }
  clear_has_version();
  return version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseBody::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.ResponseBody.version)
}

// optional int32 error = 3;
inline bool ResponseBody::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseBody::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseBody::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseBody::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 ResponseBody::error() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseBody.error)
  return error_;
}
inline void ResponseBody::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseBody.error)
}

// required uint64 id = 4;
inline bool ResponseBody::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseBody::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseBody::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseBody::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ResponseBody::id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.ResponseBody.id)
  return id_;
}
inline void ResponseBody::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.ResponseBody.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_brpc_2fpolicy_2fpublic_5fpbrpc_5fmeta_2eproto

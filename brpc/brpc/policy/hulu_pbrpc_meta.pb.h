// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/hulu_pbrpc_meta.proto

#ifndef PROTOBUF_INCLUDED_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto
#define PROTOBUF_INCLUDED_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto 

namespace protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto
namespace brpc {
namespace policy {
class HuluRpcRequestMeta;
class HuluRpcRequestMetaDefaultTypeInternal;
extern HuluRpcRequestMetaDefaultTypeInternal _HuluRpcRequestMeta_default_instance_;
class HuluRpcResponseMeta;
class HuluRpcResponseMetaDefaultTypeInternal;
extern HuluRpcResponseMetaDefaultTypeInternal _HuluRpcResponseMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
template<> ::brpc::policy::HuluRpcRequestMeta* Arena::CreateMaybeMessage<::brpc::policy::HuluRpcRequestMeta>(Arena*);
template<> ::brpc::policy::HuluRpcResponseMeta* Arena::CreateMaybeMessage<::brpc::policy::HuluRpcResponseMeta>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace brpc {
namespace policy {

// ===================================================================

class HuluRpcRequestMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.HuluRpcRequestMeta) */ {
 public:
  HuluRpcRequestMeta();
  virtual ~HuluRpcRequestMeta();

  HuluRpcRequestMeta(const HuluRpcRequestMeta& from);

  inline HuluRpcRequestMeta& operator=(const HuluRpcRequestMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuluRpcRequestMeta(HuluRpcRequestMeta&& from) noexcept
    : HuluRpcRequestMeta() {
    *this = ::std::move(from);
  }

  inline HuluRpcRequestMeta& operator=(HuluRpcRequestMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HuluRpcRequestMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HuluRpcRequestMeta* internal_default_instance() {
    return reinterpret_cast<const HuluRpcRequestMeta*>(
               &_HuluRpcRequestMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HuluRpcRequestMeta* other);
  friend void swap(HuluRpcRequestMeta& a, HuluRpcRequestMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuluRpcRequestMeta* New() const final {
    return CreateMaybeMessage<HuluRpcRequestMeta>(NULL);
  }

  HuluRpcRequestMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HuluRpcRequestMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HuluRpcRequestMeta& from);
  void MergeFrom(const HuluRpcRequestMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HuluRpcRequestMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string service_name = 1;
  bool has_service_name() const;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // optional bytes user_data = 11;
  bool has_user_data() const;
  void clear_user_data();
  static const int kUserDataFieldNumber = 11;
  const ::std::string& user_data() const;
  void set_user_data(const ::std::string& value);
  #if LANG_CXX11
  void set_user_data(::std::string&& value);
  #endif
  void set_user_data(const char* value);
  void set_user_data(const void* value, size_t size);
  ::std::string* mutable_user_data();
  ::std::string* release_user_data();
  void set_allocated_user_data(::std::string* user_data);

  // optional string method_name = 14;
  bool has_method_name() const;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 14;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // optional bytes credential_data = 15;
  bool has_credential_data() const;
  void clear_credential_data();
  static const int kCredentialDataFieldNumber = 15;
  const ::std::string& credential_data() const;
  void set_credential_data(const ::std::string& value);
  #if LANG_CXX11
  void set_credential_data(::std::string&& value);
  #endif
  void set_credential_data(const char* value);
  void set_credential_data(const void* value, size_t size);
  ::std::string* mutable_credential_data();
  ::std::string* release_credential_data();
  void set_allocated_credential_data(::std::string* credential_data);

  // optional .brpc.ChunkInfo chuck_info = 6;
  bool has_chuck_info() const;
  void clear_chuck_info();
  static const int kChuckInfoFieldNumber = 6;
  private:
  const ::brpc::ChunkInfo& _internal_chuck_info() const;
  public:
  const ::brpc::ChunkInfo& chuck_info() const;
  ::brpc::ChunkInfo* release_chuck_info();
  ::brpc::ChunkInfo* mutable_chuck_info();
  void set_allocated_chuck_info(::brpc::ChunkInfo* chuck_info);

  // required int32 method_index = 2;
  bool has_method_index() const;
  void clear_method_index();
  static const int kMethodIndexFieldNumber = 2;
  ::google::protobuf::int32 method_index() const;
  void set_method_index(::google::protobuf::int32 value);

  // optional int32 compress_type = 3;
  bool has_compress_type() const;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 3;
  ::google::protobuf::int32 compress_type() const;
  void set_compress_type(::google::protobuf::int32 value);

  // optional int64 correlation_id = 4;
  bool has_correlation_id() const;
  void clear_correlation_id();
  static const int kCorrelationIdFieldNumber = 4;
  ::google::protobuf::int64 correlation_id() const;
  void set_correlation_id(::google::protobuf::int64 value);

  // optional int64 log_id = 5;
  bool has_log_id() const;
  void clear_log_id();
  static const int kLogIdFieldNumber = 5;
  ::google::protobuf::int64 log_id() const;
  void set_log_id(::google::protobuf::int64 value);

  // optional int64 trace_id = 7;
  bool has_trace_id() const;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 7;
  ::google::protobuf::int64 trace_id() const;
  void set_trace_id(::google::protobuf::int64 value);

  // optional int64 parent_span_id = 8;
  bool has_parent_span_id() const;
  void clear_parent_span_id();
  static const int kParentSpanIdFieldNumber = 8;
  ::google::protobuf::int64 parent_span_id() const;
  void set_parent_span_id(::google::protobuf::int64 value);

  // optional int64 span_id = 9;
  bool has_span_id() const;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 9;
  ::google::protobuf::int64 span_id() const;
  void set_span_id(::google::protobuf::int64 value);

  // optional .brpc.TalkType request_talk_type = 10;
  bool has_request_talk_type() const;
  void clear_request_talk_type();
  static const int kRequestTalkTypeFieldNumber = 10;
  ::brpc::TalkType request_talk_type() const;
  void set_request_talk_type(::brpc::TalkType value);

  // optional int32 user_message_size = 12;
  bool has_user_message_size() const;
  void clear_user_message_size();
  static const int kUserMessageSizeFieldNumber = 12;
  ::google::protobuf::int32 user_message_size() const;
  void set_user_message_size(::google::protobuf::int32 value);

  // optional int64 user_defined_source_addr = 13;
  bool has_user_defined_source_addr() const;
  void clear_user_defined_source_addr();
  static const int kUserDefinedSourceAddrFieldNumber = 13;
  ::google::protobuf::int64 user_defined_source_addr() const;
  void set_user_defined_source_addr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:brpc.policy.HuluRpcRequestMeta)
 private:
  void set_has_service_name();
  void clear_has_service_name();
  void set_has_method_index();
  void clear_has_method_index();
  void set_has_compress_type();
  void clear_has_compress_type();
  void set_has_correlation_id();
  void clear_has_correlation_id();
  void set_has_log_id();
  void clear_has_log_id();
  void set_has_chuck_info();
  void clear_has_chuck_info();
  void set_has_trace_id();
  void clear_has_trace_id();
  void set_has_parent_span_id();
  void clear_has_parent_span_id();
  void set_has_span_id();
  void clear_has_span_id();
  void set_has_request_talk_type();
  void clear_has_request_talk_type();
  void set_has_user_data();
  void clear_has_user_data();
  void set_has_user_message_size();
  void clear_has_user_message_size();
  void set_has_user_defined_source_addr();
  void clear_has_user_defined_source_addr();
  void set_has_method_name();
  void clear_has_method_name();
  void set_has_credential_data();
  void clear_has_credential_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr user_data_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr credential_data_;
  ::brpc::ChunkInfo* chuck_info_;
  ::google::protobuf::int32 method_index_;
  ::google::protobuf::int32 compress_type_;
  ::google::protobuf::int64 correlation_id_;
  ::google::protobuf::int64 log_id_;
  ::google::protobuf::int64 trace_id_;
  ::google::protobuf::int64 parent_span_id_;
  ::google::protobuf::int64 span_id_;
  int request_talk_type_;
  ::google::protobuf::int32 user_message_size_;
  ::google::protobuf::int64 user_defined_source_addr_;
  friend struct ::protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuluRpcResponseMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.policy.HuluRpcResponseMeta) */ {
 public:
  HuluRpcResponseMeta();
  virtual ~HuluRpcResponseMeta();

  HuluRpcResponseMeta(const HuluRpcResponseMeta& from);

  inline HuluRpcResponseMeta& operator=(const HuluRpcResponseMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuluRpcResponseMeta(HuluRpcResponseMeta&& from) noexcept
    : HuluRpcResponseMeta() {
    *this = ::std::move(from);
  }

  inline HuluRpcResponseMeta& operator=(HuluRpcResponseMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HuluRpcResponseMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HuluRpcResponseMeta* internal_default_instance() {
    return reinterpret_cast<const HuluRpcResponseMeta*>(
               &_HuluRpcResponseMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HuluRpcResponseMeta* other);
  friend void swap(HuluRpcResponseMeta& a, HuluRpcResponseMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuluRpcResponseMeta* New() const final {
    return CreateMaybeMessage<HuluRpcResponseMeta>(NULL);
  }

  HuluRpcResponseMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HuluRpcResponseMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HuluRpcResponseMeta& from);
  void MergeFrom(const HuluRpcResponseMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HuluRpcResponseMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_text = 2;
  bool has_error_text() const;
  void clear_error_text();
  static const int kErrorTextFieldNumber = 2;
  const ::std::string& error_text() const;
  void set_error_text(const ::std::string& value);
  #if LANG_CXX11
  void set_error_text(::std::string&& value);
  #endif
  void set_error_text(const char* value);
  void set_error_text(const char* value, size_t size);
  ::std::string* mutable_error_text();
  ::std::string* release_error_text();
  void set_allocated_error_text(::std::string* error_text);

  // optional bytes user_data = 7;
  bool has_user_data() const;
  void clear_user_data();
  static const int kUserDataFieldNumber = 7;
  const ::std::string& user_data() const;
  void set_user_data(const ::std::string& value);
  #if LANG_CXX11
  void set_user_data(::std::string&& value);
  #endif
  void set_user_data(const char* value);
  void set_user_data(const void* value, size_t size);
  ::std::string* mutable_user_data();
  ::std::string* release_user_data();
  void set_allocated_user_data(::std::string* user_data);

  // optional .brpc.ChunkInfo chuck_info = 5;
  bool has_chuck_info() const;
  void clear_chuck_info();
  static const int kChuckInfoFieldNumber = 5;
  private:
  const ::brpc::ChunkInfo& _internal_chuck_info() const;
  public:
  const ::brpc::ChunkInfo& chuck_info() const;
  ::brpc::ChunkInfo* release_chuck_info();
  ::brpc::ChunkInfo* mutable_chuck_info();
  void set_allocated_chuck_info(::brpc::ChunkInfo* chuck_info);

  // optional int32 error_code = 1;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional int32 compress_type = 4;
  bool has_compress_type() const;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 4;
  ::google::protobuf::int32 compress_type() const;
  void set_compress_type(::google::protobuf::int32 value);

  // optional sint64 correlation_id = 3;
  bool has_correlation_id() const;
  void clear_correlation_id();
  static const int kCorrelationIdFieldNumber = 3;
  ::google::protobuf::int64 correlation_id() const;
  void set_correlation_id(::google::protobuf::int64 value);

  // optional .brpc.TalkType response_talk_type = 6;
  bool has_response_talk_type() const;
  void clear_response_talk_type();
  static const int kResponseTalkTypeFieldNumber = 6;
  ::brpc::TalkType response_talk_type() const;
  void set_response_talk_type(::brpc::TalkType value);

  // optional int32 user_message_size = 8;
  bool has_user_message_size() const;
  void clear_user_message_size();
  static const int kUserMessageSizeFieldNumber = 8;
  ::google::protobuf::int32 user_message_size() const;
  void set_user_message_size(::google::protobuf::int32 value);

  // optional int64 user_defined_source_addr = 9;
  bool has_user_defined_source_addr() const;
  void clear_user_defined_source_addr();
  static const int kUserDefinedSourceAddrFieldNumber = 9;
  ::google::protobuf::int64 user_defined_source_addr() const;
  void set_user_defined_source_addr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:brpc.policy.HuluRpcResponseMeta)
 private:
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_text();
  void clear_has_error_text();
  void set_has_correlation_id();
  void clear_has_correlation_id();
  void set_has_compress_type();
  void clear_has_compress_type();
  void set_has_chuck_info();
  void clear_has_chuck_info();
  void set_has_response_talk_type();
  void clear_has_response_talk_type();
  void set_has_user_data();
  void clear_has_user_data();
  void set_has_user_message_size();
  void clear_has_user_message_size();
  void set_has_user_defined_source_addr();
  void clear_has_user_defined_source_addr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_text_;
  ::google::protobuf::internal::ArenaStringPtr user_data_;
  ::brpc::ChunkInfo* chuck_info_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 compress_type_;
  ::google::protobuf::int64 correlation_id_;
  int response_talk_type_;
  ::google::protobuf::int32 user_message_size_;
  ::google::protobuf::int64 user_defined_source_addr_;
  friend struct ::protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HuluRpcRequestMeta

// required string service_name = 1;
inline bool HuluRpcRequestMeta::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HuluRpcRequestMeta::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HuluRpcRequestMeta::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HuluRpcRequestMeta::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_name();
}
inline const ::std::string& HuluRpcRequestMeta::service_name() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.service_name)
  return service_name_.GetNoArena();
}
inline void HuluRpcRequestMeta::set_service_name(const ::std::string& value) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.service_name)
}
#if LANG_CXX11
inline void HuluRpcRequestMeta::set_service_name(::std::string&& value) {
  set_has_service_name();
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcRequestMeta.service_name)
}
#endif
inline void HuluRpcRequestMeta::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcRequestMeta.service_name)
}
inline void HuluRpcRequestMeta::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcRequestMeta.service_name)
}
inline ::std::string* HuluRpcRequestMeta::mutable_service_name() {
  set_has_service_name();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HuluRpcRequestMeta::release_service_name() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.service_name)
  if (!has_service_name()) {
    return NULL;
  }
  clear_has_service_name();
  return service_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HuluRpcRequestMeta::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    set_has_service_name();
  } else {
    clear_has_service_name();
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.service_name)
}

// required int32 method_index = 2;
inline bool HuluRpcRequestMeta::has_method_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HuluRpcRequestMeta::set_has_method_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HuluRpcRequestMeta::clear_has_method_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HuluRpcRequestMeta::clear_method_index() {
  method_index_ = 0;
  clear_has_method_index();
}
inline ::google::protobuf::int32 HuluRpcRequestMeta::method_index() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.method_index)
  return method_index_;
}
inline void HuluRpcRequestMeta::set_method_index(::google::protobuf::int32 value) {
  set_has_method_index();
  method_index_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.method_index)
}

// optional int32 compress_type = 3;
inline bool HuluRpcRequestMeta::has_compress_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HuluRpcRequestMeta::set_has_compress_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HuluRpcRequestMeta::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HuluRpcRequestMeta::clear_compress_type() {
  compress_type_ = 0;
  clear_has_compress_type();
}
inline ::google::protobuf::int32 HuluRpcRequestMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.compress_type)
  return compress_type_;
}
inline void HuluRpcRequestMeta::set_compress_type(::google::protobuf::int32 value) {
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.compress_type)
}

// optional int64 correlation_id = 4;
inline bool HuluRpcRequestMeta::has_correlation_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HuluRpcRequestMeta::set_has_correlation_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HuluRpcRequestMeta::clear_has_correlation_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HuluRpcRequestMeta::clear_correlation_id() {
  correlation_id_ = GOOGLE_LONGLONG(0);
  clear_has_correlation_id();
}
inline ::google::protobuf::int64 HuluRpcRequestMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.correlation_id)
  return correlation_id_;
}
inline void HuluRpcRequestMeta::set_correlation_id(::google::protobuf::int64 value) {
  set_has_correlation_id();
  correlation_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.correlation_id)
}

// optional int64 log_id = 5;
inline bool HuluRpcRequestMeta::has_log_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HuluRpcRequestMeta::set_has_log_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HuluRpcRequestMeta::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HuluRpcRequestMeta::clear_log_id() {
  log_id_ = GOOGLE_LONGLONG(0);
  clear_has_log_id();
}
inline ::google::protobuf::int64 HuluRpcRequestMeta::log_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.log_id)
  return log_id_;
}
inline void HuluRpcRequestMeta::set_log_id(::google::protobuf::int64 value) {
  set_has_log_id();
  log_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.log_id)
}

// optional .brpc.ChunkInfo chuck_info = 6;
inline bool HuluRpcRequestMeta::has_chuck_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HuluRpcRequestMeta::set_has_chuck_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HuluRpcRequestMeta::clear_has_chuck_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::brpc::ChunkInfo& HuluRpcRequestMeta::_internal_chuck_info() const {
  return *chuck_info_;
}
inline const ::brpc::ChunkInfo& HuluRpcRequestMeta::chuck_info() const {
  const ::brpc::ChunkInfo* p = chuck_info_;
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.chuck_info)
  return p != NULL ? *p : *reinterpret_cast<const ::brpc::ChunkInfo*>(
      &::brpc::_ChunkInfo_default_instance_);
}
inline ::brpc::ChunkInfo* HuluRpcRequestMeta::release_chuck_info() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.chuck_info)
  clear_has_chuck_info();
  ::brpc::ChunkInfo* temp = chuck_info_;
  chuck_info_ = NULL;
  return temp;
}
inline ::brpc::ChunkInfo* HuluRpcRequestMeta::mutable_chuck_info() {
  set_has_chuck_info();
  if (chuck_info_ == NULL) {
    auto* p = CreateMaybeMessage<::brpc::ChunkInfo>(GetArenaNoVirtual());
    chuck_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.chuck_info)
  return chuck_info_;
}
inline void HuluRpcRequestMeta::set_allocated_chuck_info(::brpc::ChunkInfo* chuck_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(chuck_info_);
  }
  if (chuck_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chuck_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chuck_info, submessage_arena);
    }
    set_has_chuck_info();
  } else {
    clear_has_chuck_info();
  }
  chuck_info_ = chuck_info;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.chuck_info)
}

// optional int64 trace_id = 7;
inline bool HuluRpcRequestMeta::has_trace_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HuluRpcRequestMeta::set_has_trace_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HuluRpcRequestMeta::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HuluRpcRequestMeta::clear_trace_id() {
  trace_id_ = GOOGLE_LONGLONG(0);
  clear_has_trace_id();
}
inline ::google::protobuf::int64 HuluRpcRequestMeta::trace_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.trace_id)
  return trace_id_;
}
inline void HuluRpcRequestMeta::set_trace_id(::google::protobuf::int64 value) {
  set_has_trace_id();
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.trace_id)
}

// optional int64 parent_span_id = 8;
inline bool HuluRpcRequestMeta::has_parent_span_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HuluRpcRequestMeta::set_has_parent_span_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HuluRpcRequestMeta::clear_has_parent_span_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HuluRpcRequestMeta::clear_parent_span_id() {
  parent_span_id_ = GOOGLE_LONGLONG(0);
  clear_has_parent_span_id();
}
inline ::google::protobuf::int64 HuluRpcRequestMeta::parent_span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.parent_span_id)
  return parent_span_id_;
}
inline void HuluRpcRequestMeta::set_parent_span_id(::google::protobuf::int64 value) {
  set_has_parent_span_id();
  parent_span_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.parent_span_id)
}

// optional int64 span_id = 9;
inline bool HuluRpcRequestMeta::has_span_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HuluRpcRequestMeta::set_has_span_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HuluRpcRequestMeta::clear_has_span_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HuluRpcRequestMeta::clear_span_id() {
  span_id_ = GOOGLE_LONGLONG(0);
  clear_has_span_id();
}
inline ::google::protobuf::int64 HuluRpcRequestMeta::span_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.span_id)
  return span_id_;
}
inline void HuluRpcRequestMeta::set_span_id(::google::protobuf::int64 value) {
  set_has_span_id();
  span_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.span_id)
}

// optional .brpc.TalkType request_talk_type = 10;
inline bool HuluRpcRequestMeta::has_request_talk_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HuluRpcRequestMeta::set_has_request_talk_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HuluRpcRequestMeta::clear_has_request_talk_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HuluRpcRequestMeta::clear_request_talk_type() {
  request_talk_type_ = 0;
  clear_has_request_talk_type();
}
inline ::brpc::TalkType HuluRpcRequestMeta::request_talk_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.request_talk_type)
  return static_cast< ::brpc::TalkType >(request_talk_type_);
}
inline void HuluRpcRequestMeta::set_request_talk_type(::brpc::TalkType value) {
  assert(::brpc::TalkType_IsValid(value));
  set_has_request_talk_type();
  request_talk_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.request_talk_type)
}

// optional bytes user_data = 11;
inline bool HuluRpcRequestMeta::has_user_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HuluRpcRequestMeta::set_has_user_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HuluRpcRequestMeta::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HuluRpcRequestMeta::clear_user_data() {
  user_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_data();
}
inline const ::std::string& HuluRpcRequestMeta::user_data() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.user_data)
  return user_data_.GetNoArena();
}
inline void HuluRpcRequestMeta::set_user_data(const ::std::string& value) {
  set_has_user_data();
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.user_data)
}
#if LANG_CXX11
inline void HuluRpcRequestMeta::set_user_data(::std::string&& value) {
  set_has_user_data();
  user_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcRequestMeta.user_data)
}
#endif
inline void HuluRpcRequestMeta::set_user_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_data();
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcRequestMeta.user_data)
}
inline void HuluRpcRequestMeta::set_user_data(const void* value, size_t size) {
  set_has_user_data();
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcRequestMeta.user_data)
}
inline ::std::string* HuluRpcRequestMeta::mutable_user_data() {
  set_has_user_data();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.user_data)
  return user_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HuluRpcRequestMeta::release_user_data() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.user_data)
  if (!has_user_data()) {
    return NULL;
  }
  clear_has_user_data();
  return user_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HuluRpcRequestMeta::set_allocated_user_data(::std::string* user_data) {
  if (user_data != NULL) {
    set_has_user_data();
  } else {
    clear_has_user_data();
  }
  user_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_data);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.user_data)
}

// optional int32 user_message_size = 12;
inline bool HuluRpcRequestMeta::has_user_message_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HuluRpcRequestMeta::set_has_user_message_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HuluRpcRequestMeta::clear_has_user_message_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HuluRpcRequestMeta::clear_user_message_size() {
  user_message_size_ = 0;
  clear_has_user_message_size();
}
inline ::google::protobuf::int32 HuluRpcRequestMeta::user_message_size() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.user_message_size)
  return user_message_size_;
}
inline void HuluRpcRequestMeta::set_user_message_size(::google::protobuf::int32 value) {
  set_has_user_message_size();
  user_message_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.user_message_size)
}

// optional int64 user_defined_source_addr = 13;
inline bool HuluRpcRequestMeta::has_user_defined_source_addr() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HuluRpcRequestMeta::set_has_user_defined_source_addr() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HuluRpcRequestMeta::clear_has_user_defined_source_addr() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HuluRpcRequestMeta::clear_user_defined_source_addr() {
  user_defined_source_addr_ = GOOGLE_LONGLONG(0);
  clear_has_user_defined_source_addr();
}
inline ::google::protobuf::int64 HuluRpcRequestMeta::user_defined_source_addr() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.user_defined_source_addr)
  return user_defined_source_addr_;
}
inline void HuluRpcRequestMeta::set_user_defined_source_addr(::google::protobuf::int64 value) {
  set_has_user_defined_source_addr();
  user_defined_source_addr_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.user_defined_source_addr)
}

// optional string method_name = 14;
inline bool HuluRpcRequestMeta::has_method_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HuluRpcRequestMeta::set_has_method_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HuluRpcRequestMeta::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HuluRpcRequestMeta::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method_name();
}
inline const ::std::string& HuluRpcRequestMeta::method_name() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.method_name)
  return method_name_.GetNoArena();
}
inline void HuluRpcRequestMeta::set_method_name(const ::std::string& value) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.method_name)
}
#if LANG_CXX11
inline void HuluRpcRequestMeta::set_method_name(::std::string&& value) {
  set_has_method_name();
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcRequestMeta.method_name)
}
#endif
inline void HuluRpcRequestMeta::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcRequestMeta.method_name)
}
inline void HuluRpcRequestMeta::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcRequestMeta.method_name)
}
inline ::std::string* HuluRpcRequestMeta::mutable_method_name() {
  set_has_method_name();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HuluRpcRequestMeta::release_method_name() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.method_name)
  if (!has_method_name()) {
    return NULL;
  }
  clear_has_method_name();
  return method_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HuluRpcRequestMeta::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    set_has_method_name();
  } else {
    clear_has_method_name();
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.method_name)
}

// optional bytes credential_data = 15;
inline bool HuluRpcRequestMeta::has_credential_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HuluRpcRequestMeta::set_has_credential_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HuluRpcRequestMeta::clear_has_credential_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HuluRpcRequestMeta::clear_credential_data() {
  credential_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_credential_data();
}
inline const ::std::string& HuluRpcRequestMeta::credential_data() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcRequestMeta.credential_data)
  return credential_data_.GetNoArena();
}
inline void HuluRpcRequestMeta::set_credential_data(const ::std::string& value) {
  set_has_credential_data();
  credential_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcRequestMeta.credential_data)
}
#if LANG_CXX11
inline void HuluRpcRequestMeta::set_credential_data(::std::string&& value) {
  set_has_credential_data();
  credential_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcRequestMeta.credential_data)
}
#endif
inline void HuluRpcRequestMeta::set_credential_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_credential_data();
  credential_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcRequestMeta.credential_data)
}
inline void HuluRpcRequestMeta::set_credential_data(const void* value, size_t size) {
  set_has_credential_data();
  credential_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcRequestMeta.credential_data)
}
inline ::std::string* HuluRpcRequestMeta::mutable_credential_data() {
  set_has_credential_data();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcRequestMeta.credential_data)
  return credential_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HuluRpcRequestMeta::release_credential_data() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcRequestMeta.credential_data)
  if (!has_credential_data()) {
    return NULL;
  }
  clear_has_credential_data();
  return credential_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HuluRpcRequestMeta::set_allocated_credential_data(::std::string* credential_data) {
  if (credential_data != NULL) {
    set_has_credential_data();
  } else {
    clear_has_credential_data();
  }
  credential_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), credential_data);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcRequestMeta.credential_data)
}

// -------------------------------------------------------------------

// HuluRpcResponseMeta

// optional int32 error_code = 1;
inline bool HuluRpcResponseMeta::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HuluRpcResponseMeta::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HuluRpcResponseMeta::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HuluRpcResponseMeta::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 HuluRpcResponseMeta::error_code() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.error_code)
  return error_code_;
}
inline void HuluRpcResponseMeta::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.error_code)
}

// optional string error_text = 2;
inline bool HuluRpcResponseMeta::has_error_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HuluRpcResponseMeta::set_has_error_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HuluRpcResponseMeta::clear_has_error_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HuluRpcResponseMeta::clear_error_text() {
  error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_text();
}
inline const ::std::string& HuluRpcResponseMeta::error_text() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.error_text)
  return error_text_.GetNoArena();
}
inline void HuluRpcResponseMeta::set_error_text(const ::std::string& value) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.error_text)
}
#if LANG_CXX11
inline void HuluRpcResponseMeta::set_error_text(::std::string&& value) {
  set_has_error_text();
  error_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcResponseMeta.error_text)
}
#endif
inline void HuluRpcResponseMeta::set_error_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcResponseMeta.error_text)
}
inline void HuluRpcResponseMeta::set_error_text(const char* value, size_t size) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcResponseMeta.error_text)
}
inline ::std::string* HuluRpcResponseMeta::mutable_error_text() {
  set_has_error_text();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcResponseMeta.error_text)
  return error_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HuluRpcResponseMeta::release_error_text() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcResponseMeta.error_text)
  if (!has_error_text()) {
    return NULL;
  }
  clear_has_error_text();
  return error_text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HuluRpcResponseMeta::set_allocated_error_text(::std::string* error_text) {
  if (error_text != NULL) {
    set_has_error_text();
  } else {
    clear_has_error_text();
  }
  error_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_text);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcResponseMeta.error_text)
}

// optional sint64 correlation_id = 3;
inline bool HuluRpcResponseMeta::has_correlation_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HuluRpcResponseMeta::set_has_correlation_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HuluRpcResponseMeta::clear_has_correlation_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HuluRpcResponseMeta::clear_correlation_id() {
  correlation_id_ = GOOGLE_LONGLONG(0);
  clear_has_correlation_id();
}
inline ::google::protobuf::int64 HuluRpcResponseMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.correlation_id)
  return correlation_id_;
}
inline void HuluRpcResponseMeta::set_correlation_id(::google::protobuf::int64 value) {
  set_has_correlation_id();
  correlation_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.correlation_id)
}

// optional int32 compress_type = 4;
inline bool HuluRpcResponseMeta::has_compress_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HuluRpcResponseMeta::set_has_compress_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HuluRpcResponseMeta::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HuluRpcResponseMeta::clear_compress_type() {
  compress_type_ = 0;
  clear_has_compress_type();
}
inline ::google::protobuf::int32 HuluRpcResponseMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.compress_type)
  return compress_type_;
}
inline void HuluRpcResponseMeta::set_compress_type(::google::protobuf::int32 value) {
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.compress_type)
}

// optional .brpc.ChunkInfo chuck_info = 5;
inline bool HuluRpcResponseMeta::has_chuck_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HuluRpcResponseMeta::set_has_chuck_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HuluRpcResponseMeta::clear_has_chuck_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::brpc::ChunkInfo& HuluRpcResponseMeta::_internal_chuck_info() const {
  return *chuck_info_;
}
inline const ::brpc::ChunkInfo& HuluRpcResponseMeta::chuck_info() const {
  const ::brpc::ChunkInfo* p = chuck_info_;
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.chuck_info)
  return p != NULL ? *p : *reinterpret_cast<const ::brpc::ChunkInfo*>(
      &::brpc::_ChunkInfo_default_instance_);
}
inline ::brpc::ChunkInfo* HuluRpcResponseMeta::release_chuck_info() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcResponseMeta.chuck_info)
  clear_has_chuck_info();
  ::brpc::ChunkInfo* temp = chuck_info_;
  chuck_info_ = NULL;
  return temp;
}
inline ::brpc::ChunkInfo* HuluRpcResponseMeta::mutable_chuck_info() {
  set_has_chuck_info();
  if (chuck_info_ == NULL) {
    auto* p = CreateMaybeMessage<::brpc::ChunkInfo>(GetArenaNoVirtual());
    chuck_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcResponseMeta.chuck_info)
  return chuck_info_;
}
inline void HuluRpcResponseMeta::set_allocated_chuck_info(::brpc::ChunkInfo* chuck_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(chuck_info_);
  }
  if (chuck_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chuck_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chuck_info, submessage_arena);
    }
    set_has_chuck_info();
  } else {
    clear_has_chuck_info();
  }
  chuck_info_ = chuck_info;
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcResponseMeta.chuck_info)
}

// optional .brpc.TalkType response_talk_type = 6;
inline bool HuluRpcResponseMeta::has_response_talk_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HuluRpcResponseMeta::set_has_response_talk_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HuluRpcResponseMeta::clear_has_response_talk_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HuluRpcResponseMeta::clear_response_talk_type() {
  response_talk_type_ = 0;
  clear_has_response_talk_type();
}
inline ::brpc::TalkType HuluRpcResponseMeta::response_talk_type() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.response_talk_type)
  return static_cast< ::brpc::TalkType >(response_talk_type_);
}
inline void HuluRpcResponseMeta::set_response_talk_type(::brpc::TalkType value) {
  assert(::brpc::TalkType_IsValid(value));
  set_has_response_talk_type();
  response_talk_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.response_talk_type)
}

// optional bytes user_data = 7;
inline bool HuluRpcResponseMeta::has_user_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HuluRpcResponseMeta::set_has_user_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HuluRpcResponseMeta::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HuluRpcResponseMeta::clear_user_data() {
  user_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_data();
}
inline const ::std::string& HuluRpcResponseMeta::user_data() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.user_data)
  return user_data_.GetNoArena();
}
inline void HuluRpcResponseMeta::set_user_data(const ::std::string& value) {
  set_has_user_data();
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.user_data)
}
#if LANG_CXX11
inline void HuluRpcResponseMeta::set_user_data(::std::string&& value) {
  set_has_user_data();
  user_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:brpc.policy.HuluRpcResponseMeta.user_data)
}
#endif
inline void HuluRpcResponseMeta::set_user_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_data();
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:brpc.policy.HuluRpcResponseMeta.user_data)
}
inline void HuluRpcResponseMeta::set_user_data(const void* value, size_t size) {
  set_has_user_data();
  user_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:brpc.policy.HuluRpcResponseMeta.user_data)
}
inline ::std::string* HuluRpcResponseMeta::mutable_user_data() {
  set_has_user_data();
  // @@protoc_insertion_point(field_mutable:brpc.policy.HuluRpcResponseMeta.user_data)
  return user_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HuluRpcResponseMeta::release_user_data() {
  // @@protoc_insertion_point(field_release:brpc.policy.HuluRpcResponseMeta.user_data)
  if (!has_user_data()) {
    return NULL;
  }
  clear_has_user_data();
  return user_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HuluRpcResponseMeta::set_allocated_user_data(::std::string* user_data) {
  if (user_data != NULL) {
    set_has_user_data();
  } else {
    clear_has_user_data();
  }
  user_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_data);
  // @@protoc_insertion_point(field_set_allocated:brpc.policy.HuluRpcResponseMeta.user_data)
}

// optional int32 user_message_size = 8;
inline bool HuluRpcResponseMeta::has_user_message_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HuluRpcResponseMeta::set_has_user_message_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HuluRpcResponseMeta::clear_has_user_message_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HuluRpcResponseMeta::clear_user_message_size() {
  user_message_size_ = 0;
  clear_has_user_message_size();
}
inline ::google::protobuf::int32 HuluRpcResponseMeta::user_message_size() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.user_message_size)
  return user_message_size_;
}
inline void HuluRpcResponseMeta::set_user_message_size(::google::protobuf::int32 value) {
  set_has_user_message_size();
  user_message_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.user_message_size)
}

// optional int64 user_defined_source_addr = 9;
inline bool HuluRpcResponseMeta::has_user_defined_source_addr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HuluRpcResponseMeta::set_has_user_defined_source_addr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HuluRpcResponseMeta::clear_has_user_defined_source_addr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HuluRpcResponseMeta::clear_user_defined_source_addr() {
  user_defined_source_addr_ = GOOGLE_LONGLONG(0);
  clear_has_user_defined_source_addr();
}
inline ::google::protobuf::int64 HuluRpcResponseMeta::user_defined_source_addr() const {
  // @@protoc_insertion_point(field_get:brpc.policy.HuluRpcResponseMeta.user_defined_source_addr)
  return user_defined_source_addr_;
}
inline void HuluRpcResponseMeta::set_user_defined_source_addr(::google::protobuf::int64 value) {
  set_has_user_defined_source_addr();
  user_defined_source_addr_ = value;
  // @@protoc_insertion_point(field_set:brpc.policy.HuluRpcResponseMeta.user_defined_source_addr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace policy
}  // namespace brpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto

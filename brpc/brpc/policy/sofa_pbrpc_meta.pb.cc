// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/sofa_pbrpc_meta.proto

#include "brpc/policy/sofa_pbrpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace brpc {
namespace policy {
class SofaRpcMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SofaRpcMeta>
      _instance;
} _SofaRpcMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto {
static void InitDefaultsSofaRpcMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_SofaRpcMeta_default_instance_;
    new (ptr) ::brpc::policy::SofaRpcMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::SofaRpcMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SofaRpcMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSofaRpcMeta}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SofaRpcMeta.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::SofaRpcMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::SofaRpcMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::SofaRpcMeta, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::SofaRpcMeta, sequence_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::SofaRpcMeta, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::SofaRpcMeta, failed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::SofaRpcMeta, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::SofaRpcMeta, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::SofaRpcMeta, compress_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::SofaRpcMeta, expected_response_compress_type_),
  4,
  2,
  0,
  5,
  6,
  1,
  7,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::brpc::policy::SofaRpcMeta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_SofaRpcMeta_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "brpc/policy/sofa_pbrpc_meta.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!brpc/policy/sofa_pbrpc_meta.proto\022\013brp"
      "c.policy\"\271\002\n\013SofaRpcMeta\022+\n\004type\030\001 \002(\0162\035"
      ".brpc.policy.SofaRpcMeta.Type\022\023\n\013sequenc"
      "e_id\030\002 \002(\004\022\016\n\006method\030d \001(\t\022\017\n\006failed\030\310\001 "
      "\001(\010\022\023\n\nerror_code\030\311\001 \001(\005\022\017\n\006reason\030\312\001 \001("
      "\t\0225\n\rcompress_type\030\254\002 \001(\0162\035.brpc.policy."
      "SofaCompressType\022G\n\037expected_response_co"
      "mpress_type\030\255\002 \001(\0162\035.brpc.policy.SofaCom"
      "pressType\"!\n\004Type\022\013\n\007REQUEST\020\000\022\014\n\010RESPON"
      "SE\020\001*\244\001\n\020SofaCompressType\022\033\n\027SOFA_COMPRE"
      "SS_TYPE_NONE\020\000\022\033\n\027SOFA_COMPRESS_TYPE_GZI"
      "P\020\001\022\033\n\027SOFA_COMPRESS_TYPE_ZLIB\020\002\022\035\n\031SOFA"
      "_COMPRESS_TYPE_SNAPPY\020\003\022\032\n\026SOFA_COMPRESS"
      "_TYPE_LZ4\020\004B\037\n\017com.brpc.policyB\014SofaRpcP"
      "roto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 564);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/sofa_pbrpc_meta.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto
namespace brpc {
namespace policy {
const ::google::protobuf::EnumDescriptor* SofaRpcMeta_Type_descriptor() {
  protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto::file_level_enum_descriptors[0];
}
bool SofaRpcMeta_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SofaRpcMeta_Type SofaRpcMeta::REQUEST;
const SofaRpcMeta_Type SofaRpcMeta::RESPONSE;
const SofaRpcMeta_Type SofaRpcMeta::Type_MIN;
const SofaRpcMeta_Type SofaRpcMeta::Type_MAX;
const int SofaRpcMeta::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SofaCompressType_descriptor() {
  protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto::file_level_enum_descriptors[1];
}
bool SofaCompressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SofaRpcMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SofaRpcMeta::kTypeFieldNumber;
const int SofaRpcMeta::kSequenceIdFieldNumber;
const int SofaRpcMeta::kMethodFieldNumber;
const int SofaRpcMeta::kFailedFieldNumber;
const int SofaRpcMeta::kErrorCodeFieldNumber;
const int SofaRpcMeta::kReasonFieldNumber;
const int SofaRpcMeta::kCompressTypeFieldNumber;
const int SofaRpcMeta::kExpectedResponseCompressTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SofaRpcMeta::SofaRpcMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto::scc_info_SofaRpcMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.SofaRpcMeta)
}
SofaRpcMeta::SofaRpcMeta(const SofaRpcMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method()) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&sequence_id_, &from.sequence_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&compress_type_) -
    reinterpret_cast<char*>(&sequence_id_)) + sizeof(compress_type_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.SofaRpcMeta)
}

void SofaRpcMeta::SharedCtor() {
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_type_) -
      reinterpret_cast<char*>(&sequence_id_)) + sizeof(compress_type_));
}

SofaRpcMeta::~SofaRpcMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.SofaRpcMeta)
  SharedDtor();
}

void SofaRpcMeta::SharedDtor() {
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SofaRpcMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SofaRpcMeta::descriptor() {
  ::protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SofaRpcMeta& SofaRpcMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto::scc_info_SofaRpcMeta.base);
  return *internal_default_instance();
}


void SofaRpcMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.SofaRpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      method_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&sequence_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compress_type_) -
        reinterpret_cast<char*>(&sequence_id_)) + sizeof(compress_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SofaRpcMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.SofaRpcMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .brpc.policy.SofaRpcMeta.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::policy::SofaRpcMeta_Type_IsValid(value)) {
            set_type(static_cast< ::brpc::policy::SofaRpcMeta_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 sequence_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), static_cast<int>(this->method().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.SofaRpcMeta.method");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool failed = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 1600 & 0xFF */)) {
          set_has_failed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 error_code = 201;
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 1608 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 202;
      case 202: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 1618 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.SofaRpcMeta.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.policy.SofaCompressType compress_type = 300;
      case 300: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 2400 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::policy::SofaCompressType_IsValid(value)) {
            set_compress_type(static_cast< ::brpc::policy::SofaCompressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                300, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.policy.SofaCompressType expected_response_compress_type = 301;
      case 301: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 2408 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::policy::SofaCompressType_IsValid(value)) {
            set_expected_response_compress_type(static_cast< ::brpc::policy::SofaCompressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                301, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.SofaRpcMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.SofaRpcMeta)
  return false;
#undef DO_
}

void SofaRpcMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.SofaRpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .brpc.policy.SofaRpcMeta.Type type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 sequence_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sequence_id(), output);
  }

  // optional string method = 100;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.SofaRpcMeta.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->method(), output);
  }

  // optional bool failed = 200;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(200, this->failed(), output);
  }

  // optional int32 error_code = 201;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->error_code(), output);
  }

  // optional string reason = 202;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.SofaRpcMeta.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->reason(), output);
  }

  // optional .brpc.policy.SofaCompressType compress_type = 300;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      300, this->compress_type(), output);
  }

  // optional .brpc.policy.SofaCompressType expected_response_compress_type = 301;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      301, this->expected_response_compress_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.SofaRpcMeta)
}

::google::protobuf::uint8* SofaRpcMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.SofaRpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .brpc.policy.SofaRpcMeta.Type type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 sequence_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sequence_id(), target);
  }

  // optional string method = 100;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.SofaRpcMeta.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->method(), target);
  }

  // optional bool failed = 200;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(200, this->failed(), target);
  }

  // optional int32 error_code = 201;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->error_code(), target);
  }

  // optional string reason = 202;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.SofaRpcMeta.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->reason(), target);
  }

  // optional .brpc.policy.SofaCompressType compress_type = 300;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      300, this->compress_type(), target);
  }

  // optional .brpc.policy.SofaCompressType expected_response_compress_type = 301;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      301, this->expected_response_compress_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.SofaRpcMeta)
  return target;
}

size_t SofaRpcMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.SofaRpcMeta)
  size_t total_size = 0;

  if (has_sequence_id()) {
    // required uint64 sequence_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence_id());
  }

  if (has_type()) {
    // required .brpc.policy.SofaRpcMeta.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t SofaRpcMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.SofaRpcMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000014) ^ 0x00000014) == 0) {  // All required fields are present.
    // required uint64 sequence_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence_id());

    // required .brpc.policy.SofaRpcMeta.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string method = 100;
    if (has_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional string reason = 202;
    if (has_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  // optional .brpc.policy.SofaCompressType expected_response_compress_type = 301;
  if (has_expected_response_compress_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->expected_response_compress_type());
  }

  if (_has_bits_[0 / 32] & 224u) {
    // optional bool failed = 200;
    if (has_failed()) {
      total_size += 2 + 1;
    }

    // optional int32 error_code = 201;
    if (has_error_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .brpc.policy.SofaCompressType compress_type = 300;
    if (has_compress_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compress_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SofaRpcMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.SofaRpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SofaRpcMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SofaRpcMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.SofaRpcMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.SofaRpcMeta)
    MergeFrom(*source);
  }
}

void SofaRpcMeta::MergeFrom(const SofaRpcMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.SofaRpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_method();
      method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      expected_response_compress_type_ = from.expected_response_compress_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      failed_ = from.failed_;
    }
    if (cached_has_bits & 0x00000040u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      compress_type_ = from.compress_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SofaRpcMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.SofaRpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SofaRpcMeta::CopyFrom(const SofaRpcMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.SofaRpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SofaRpcMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000014) != 0x00000014) return false;
  return true;
}

void SofaRpcMeta::Swap(SofaRpcMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SofaRpcMeta::InternalSwap(SofaRpcMeta* other) {
  using std::swap;
  method_.Swap(&other->method_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequence_id_, other->sequence_id_);
  swap(expected_response_compress_type_, other->expected_response_compress_type_);
  swap(type_, other->type_);
  swap(failed_, other->failed_);
  swap(error_code_, other->error_code_);
  swap(compress_type_, other->compress_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SofaRpcMeta::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fsofa_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::SofaRpcMeta* Arena::CreateMaybeMessage< ::brpc::policy::SofaRpcMeta >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::SofaRpcMeta >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

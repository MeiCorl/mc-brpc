// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/hulu_pbrpc_meta.proto

#include "brpc/policy/hulu_pbrpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_brpc_2foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChunkInfo;
}  // namespace protobuf_brpc_2foptions_2eproto
namespace brpc {
namespace policy {
class HuluRpcRequestMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuluRpcRequestMeta>
      _instance;
} _HuluRpcRequestMeta_default_instance_;
class HuluRpcResponseMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HuluRpcResponseMeta>
      _instance;
} _HuluRpcResponseMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto {
static void InitDefaultsHuluRpcRequestMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_HuluRpcRequestMeta_default_instance_;
    new (ptr) ::brpc::policy::HuluRpcRequestMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::HuluRpcRequestMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HuluRpcRequestMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHuluRpcRequestMeta}, {
      &protobuf_brpc_2foptions_2eproto::scc_info_ChunkInfo.base,}};

static void InitDefaultsHuluRpcResponseMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_HuluRpcResponseMeta_default_instance_;
    new (ptr) ::brpc::policy::HuluRpcResponseMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::HuluRpcResponseMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HuluRpcResponseMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHuluRpcResponseMeta}, {
      &protobuf_brpc_2foptions_2eproto::scc_info_ChunkInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HuluRpcRequestMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HuluRpcResponseMeta.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, service_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, method_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, compress_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, correlation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, log_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, chuck_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, parent_span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, request_talk_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, user_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, user_message_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, user_defined_source_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, method_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcRequestMeta, credential_data_),
  0,
  5,
  6,
  7,
  8,
  4,
  9,
  10,
  11,
  12,
  1,
  13,
  14,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, error_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, correlation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, compress_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, chuck_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, response_talk_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, user_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, user_message_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::HuluRpcResponseMeta, user_defined_source_addr_),
  3,
  0,
  5,
  4,
  2,
  6,
  1,
  7,
  8,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::brpc::policy::HuluRpcRequestMeta)},
  { 35, 49, sizeof(::brpc::policy::HuluRpcResponseMeta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_HuluRpcRequestMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_HuluRpcResponseMeta_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "brpc/policy/hulu_pbrpc_meta.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!brpc/policy/hulu_pbrpc_meta.proto\022\013brp"
      "c.policy\032\022brpc/options.proto\"\210\003\n\022HuluRpc"
      "RequestMeta\022\024\n\014service_name\030\001 \002(\t\022\024\n\014met"
      "hod_index\030\002 \002(\005\022\025\n\rcompress_type\030\003 \001(\005\022\026"
      "\n\016correlation_id\030\004 \001(\003\022\016\n\006log_id\030\005 \001(\003\022#"
      "\n\nchuck_info\030\006 \001(\0132\017.brpc.ChunkInfo\022\020\n\010t"
      "race_id\030\007 \001(\003\022\026\n\016parent_span_id\030\010 \001(\003\022\017\n"
      "\007span_id\030\t \001(\003\022)\n\021request_talk_type\030\n \001("
      "\0162\016.brpc.TalkType\022\021\n\tuser_data\030\013 \001(\014\022\031\n\021"
      "user_message_size\030\014 \001(\005\022 \n\030user_defined_"
      "source_addr\030\r \001(\003\022\023\n\013method_name\030\016 \001(\t\022\027"
      "\n\017credential_data\030\017 \001(\014\"\215\002\n\023HuluRpcRespo"
      "nseMeta\022\022\n\nerror_code\030\001 \001(\005\022\022\n\nerror_tex"
      "t\030\002 \001(\t\022\026\n\016correlation_id\030\003 \001(\022\022\025\n\rcompr"
      "ess_type\030\004 \001(\005\022#\n\nchuck_info\030\005 \001(\0132\017.brp"
      "c.ChunkInfo\022*\n\022response_talk_type\030\006 \001(\0162"
      "\016.brpc.TalkType\022\021\n\tuser_data\030\007 \001(\014\022\031\n\021us"
      "er_message_size\030\010 \001(\005\022 \n\030user_defined_so"
      "urce_addr\030\t \001(\003B\037\n\017com.brpc.policyB\014Hulu"
      "RpcProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 768);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/hulu_pbrpc_meta.proto", &protobuf_RegisterTypes);
  ::protobuf_brpc_2foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto
namespace brpc {
namespace policy {

// ===================================================================

void HuluRpcRequestMeta::InitAsDefaultInstance() {
  ::brpc::policy::_HuluRpcRequestMeta_default_instance_._instance.get_mutable()->chuck_info_ = const_cast< ::brpc::ChunkInfo*>(
      ::brpc::ChunkInfo::internal_default_instance());
}
void HuluRpcRequestMeta::clear_chuck_info() {
  if (chuck_info_ != NULL) chuck_info_->Clear();
  clear_has_chuck_info();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuluRpcRequestMeta::kServiceNameFieldNumber;
const int HuluRpcRequestMeta::kMethodIndexFieldNumber;
const int HuluRpcRequestMeta::kCompressTypeFieldNumber;
const int HuluRpcRequestMeta::kCorrelationIdFieldNumber;
const int HuluRpcRequestMeta::kLogIdFieldNumber;
const int HuluRpcRequestMeta::kChuckInfoFieldNumber;
const int HuluRpcRequestMeta::kTraceIdFieldNumber;
const int HuluRpcRequestMeta::kParentSpanIdFieldNumber;
const int HuluRpcRequestMeta::kSpanIdFieldNumber;
const int HuluRpcRequestMeta::kRequestTalkTypeFieldNumber;
const int HuluRpcRequestMeta::kUserDataFieldNumber;
const int HuluRpcRequestMeta::kUserMessageSizeFieldNumber;
const int HuluRpcRequestMeta::kUserDefinedSourceAddrFieldNumber;
const int HuluRpcRequestMeta::kMethodNameFieldNumber;
const int HuluRpcRequestMeta::kCredentialDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuluRpcRequestMeta::HuluRpcRequestMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::scc_info_HuluRpcRequestMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.HuluRpcRequestMeta)
}
HuluRpcRequestMeta::HuluRpcRequestMeta(const HuluRpcRequestMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_name()) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  user_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_data()) {
    user_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_data_);
  }
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_name()) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  credential_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_credential_data()) {
    credential_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.credential_data_);
  }
  if (from.has_chuck_info()) {
    chuck_info_ = new ::brpc::ChunkInfo(*from.chuck_info_);
  } else {
    chuck_info_ = NULL;
  }
  ::memcpy(&method_index_, &from.method_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_defined_source_addr_) -
    reinterpret_cast<char*>(&method_index_)) + sizeof(user_defined_source_addr_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.HuluRpcRequestMeta)
}

void HuluRpcRequestMeta::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credential_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chuck_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_defined_source_addr_) -
      reinterpret_cast<char*>(&chuck_info_)) + sizeof(user_defined_source_addr_));
}

HuluRpcRequestMeta::~HuluRpcRequestMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.HuluRpcRequestMeta)
  SharedDtor();
}

void HuluRpcRequestMeta::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credential_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chuck_info_;
}

void HuluRpcRequestMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HuluRpcRequestMeta::descriptor() {
  ::protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuluRpcRequestMeta& HuluRpcRequestMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::scc_info_HuluRpcRequestMeta.base);
  return *internal_default_instance();
}


void HuluRpcRequestMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.HuluRpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      service_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      method_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      credential_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(chuck_info_ != NULL);
      chuck_info_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&method_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&correlation_id_) -
        reinterpret_cast<char*>(&method_index_)) + sizeof(correlation_id_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&log_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_defined_source_addr_) -
        reinterpret_cast<char*>(&log_id_)) + sizeof(user_defined_source_addr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HuluRpcRequestMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.HuluRpcRequestMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.HuluRpcRequestMeta.service_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 method_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_method_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 compress_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_compress_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compress_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 correlation_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_correlation_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &correlation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 log_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_log_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.ChunkInfo chuck_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chuck_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trace_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_trace_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 parent_span_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_parent_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 span_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.TalkType request_talk_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::TalkType_IsValid(value)) {
            set_request_talk_type(static_cast< ::brpc::TalkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes user_data = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_message_size = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_user_message_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_message_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 user_defined_source_addr = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_user_defined_source_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_defined_source_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method_name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.HuluRpcRequestMeta.method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes credential_data = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_credential_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.HuluRpcRequestMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.HuluRpcRequestMeta)
  return false;
#undef DO_
}

void HuluRpcRequestMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.HuluRpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.HuluRpcRequestMeta.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // required int32 method_index = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->method_index(), output);
  }

  // optional int32 compress_type = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compress_type(), output);
  }

  // optional int64 correlation_id = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->correlation_id(), output);
  }

  // optional int64 log_id = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->log_id(), output);
  }

  // optional .brpc.ChunkInfo chuck_info = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_chuck_info(), output);
  }

  // optional int64 trace_id = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->trace_id(), output);
  }

  // optional int64 parent_span_id = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->parent_span_id(), output);
  }

  // optional int64 span_id = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->span_id(), output);
  }

  // optional .brpc.TalkType request_talk_type = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->request_talk_type(), output);
  }

  // optional bytes user_data = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->user_data(), output);
  }

  // optional int32 user_message_size = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->user_message_size(), output);
  }

  // optional int64 user_defined_source_addr = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->user_defined_source_addr(), output);
  }

  // optional string method_name = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.HuluRpcRequestMeta.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->method_name(), output);
  }

  // optional bytes credential_data = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->credential_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.HuluRpcRequestMeta)
}

::google::protobuf::uint8* HuluRpcRequestMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.HuluRpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.HuluRpcRequestMeta.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // required int32 method_index = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->method_index(), target);
  }

  // optional int32 compress_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compress_type(), target);
  }

  // optional int64 correlation_id = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->correlation_id(), target);
  }

  // optional int64 log_id = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->log_id(), target);
  }

  // optional .brpc.ChunkInfo chuck_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_chuck_info(), deterministic, target);
  }

  // optional int64 trace_id = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->trace_id(), target);
  }

  // optional int64 parent_span_id = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->parent_span_id(), target);
  }

  // optional int64 span_id = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->span_id(), target);
  }

  // optional .brpc.TalkType request_talk_type = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->request_talk_type(), target);
  }

  // optional bytes user_data = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->user_data(), target);
  }

  // optional int32 user_message_size = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->user_message_size(), target);
  }

  // optional int64 user_defined_source_addr = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->user_defined_source_addr(), target);
  }

  // optional string method_name = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.HuluRpcRequestMeta.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->method_name(), target);
  }

  // optional bytes credential_data = 15;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->credential_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.HuluRpcRequestMeta)
  return target;
}

size_t HuluRpcRequestMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.HuluRpcRequestMeta)
  size_t total_size = 0;

  if (has_service_name()) {
    // required string service_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  if (has_method_index()) {
    // required int32 method_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->method_index());
  }

  return total_size;
}
size_t HuluRpcRequestMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.HuluRpcRequestMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string service_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());

    // required int32 method_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->method_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional bytes user_data = 11;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_data());
    }

    // optional string method_name = 14;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional bytes credential_data = 15;
    if (has_credential_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->credential_data());
    }

    // optional .brpc.ChunkInfo chuck_info = 6;
    if (has_chuck_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chuck_info_);
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 compress_type = 3;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compress_type());
    }

    // optional int64 correlation_id = 4;
    if (has_correlation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->correlation_id());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int64 log_id = 5;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_id());
    }

    // optional int64 trace_id = 7;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trace_id());
    }

    // optional int64 parent_span_id = 8;
    if (has_parent_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parent_span_id());
    }

    // optional int64 span_id = 9;
    if (has_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->span_id());
    }

    // optional .brpc.TalkType request_talk_type = 10;
    if (has_request_talk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_talk_type());
    }

    // optional int32 user_message_size = 12;
    if (has_user_message_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_message_size());
    }

    // optional int64 user_defined_source_addr = 13;
    if (has_user_defined_source_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_defined_source_addr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuluRpcRequestMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.HuluRpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const HuluRpcRequestMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuluRpcRequestMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.HuluRpcRequestMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.HuluRpcRequestMeta)
    MergeFrom(*source);
  }
}

void HuluRpcRequestMeta::MergeFrom(const HuluRpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.HuluRpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_service_name();
      service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_data();
      user_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_method_name();
      method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_credential_data();
      credential_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.credential_data_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_chuck_info()->::brpc::ChunkInfo::MergeFrom(from.chuck_info());
    }
    if (cached_has_bits & 0x00000020u) {
      method_index_ = from.method_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      compress_type_ = from.compress_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      correlation_id_ = from.correlation_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      log_id_ = from.log_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      trace_id_ = from.trace_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      parent_span_id_ = from.parent_span_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      span_id_ = from.span_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      request_talk_type_ = from.request_talk_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      user_message_size_ = from.user_message_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      user_defined_source_addr_ = from.user_defined_source_addr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HuluRpcRequestMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.HuluRpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuluRpcRequestMeta::CopyFrom(const HuluRpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.HuluRpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuluRpcRequestMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  if (has_chuck_info()) {
    if (!this->chuck_info_->IsInitialized()) return false;
  }
  return true;
}

void HuluRpcRequestMeta::Swap(HuluRpcRequestMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuluRpcRequestMeta::InternalSwap(HuluRpcRequestMeta* other) {
  using std::swap;
  service_name_.Swap(&other->service_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_data_.Swap(&other->user_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_name_.Swap(&other->method_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  credential_data_.Swap(&other->credential_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chuck_info_, other->chuck_info_);
  swap(method_index_, other->method_index_);
  swap(compress_type_, other->compress_type_);
  swap(correlation_id_, other->correlation_id_);
  swap(log_id_, other->log_id_);
  swap(trace_id_, other->trace_id_);
  swap(parent_span_id_, other->parent_span_id_);
  swap(span_id_, other->span_id_);
  swap(request_talk_type_, other->request_talk_type_);
  swap(user_message_size_, other->user_message_size_);
  swap(user_defined_source_addr_, other->user_defined_source_addr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HuluRpcRequestMeta::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HuluRpcResponseMeta::InitAsDefaultInstance() {
  ::brpc::policy::_HuluRpcResponseMeta_default_instance_._instance.get_mutable()->chuck_info_ = const_cast< ::brpc::ChunkInfo*>(
      ::brpc::ChunkInfo::internal_default_instance());
}
void HuluRpcResponseMeta::clear_chuck_info() {
  if (chuck_info_ != NULL) chuck_info_->Clear();
  clear_has_chuck_info();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuluRpcResponseMeta::kErrorCodeFieldNumber;
const int HuluRpcResponseMeta::kErrorTextFieldNumber;
const int HuluRpcResponseMeta::kCorrelationIdFieldNumber;
const int HuluRpcResponseMeta::kCompressTypeFieldNumber;
const int HuluRpcResponseMeta::kChuckInfoFieldNumber;
const int HuluRpcResponseMeta::kResponseTalkTypeFieldNumber;
const int HuluRpcResponseMeta::kUserDataFieldNumber;
const int HuluRpcResponseMeta::kUserMessageSizeFieldNumber;
const int HuluRpcResponseMeta::kUserDefinedSourceAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuluRpcResponseMeta::HuluRpcResponseMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::scc_info_HuluRpcResponseMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.HuluRpcResponseMeta)
}
HuluRpcResponseMeta::HuluRpcResponseMeta(const HuluRpcResponseMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_text()) {
    error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
  }
  user_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_data()) {
    user_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_data_);
  }
  if (from.has_chuck_info()) {
    chuck_info_ = new ::brpc::ChunkInfo(*from.chuck_info_);
  } else {
    chuck_info_ = NULL;
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_defined_source_addr_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(user_defined_source_addr_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.HuluRpcResponseMeta)
}

void HuluRpcResponseMeta::SharedCtor() {
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chuck_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_defined_source_addr_) -
      reinterpret_cast<char*>(&chuck_info_)) + sizeof(user_defined_source_addr_));
}

HuluRpcResponseMeta::~HuluRpcResponseMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.HuluRpcResponseMeta)
  SharedDtor();
}

void HuluRpcResponseMeta::SharedDtor() {
  error_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chuck_info_;
}

void HuluRpcResponseMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HuluRpcResponseMeta::descriptor() {
  ::protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuluRpcResponseMeta& HuluRpcResponseMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::scc_info_HuluRpcResponseMeta.base);
  return *internal_default_instance();
}


void HuluRpcResponseMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.HuluRpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      error_text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chuck_info_ != NULL);
      chuck_info_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&error_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_message_size_) -
        reinterpret_cast<char*>(&error_code_)) + sizeof(user_message_size_));
  }
  user_defined_source_addr_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HuluRpcResponseMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.HuluRpcResponseMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_text().data(), static_cast<int>(this->error_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.HuluRpcResponseMeta.error_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 correlation_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_correlation_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &correlation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 compress_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_compress_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compress_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.ChunkInfo chuck_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chuck_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.TalkType response_talk_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::TalkType_IsValid(value)) {
            set_response_talk_type(static_cast< ::brpc::TalkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes user_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_message_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_user_message_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_message_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 user_defined_source_addr = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_user_defined_source_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_defined_source_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.HuluRpcResponseMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.HuluRpcResponseMeta)
  return false;
#undef DO_
}

void HuluRpcResponseMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.HuluRpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), static_cast<int>(this->error_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.HuluRpcResponseMeta.error_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_text(), output);
  }

  // optional sint64 correlation_id = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->correlation_id(), output);
  }

  // optional int32 compress_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->compress_type(), output);
  }

  // optional .brpc.ChunkInfo chuck_info = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_chuck_info(), output);
  }

  // optional .brpc.TalkType response_talk_type = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->response_talk_type(), output);
  }

  // optional bytes user_data = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->user_data(), output);
  }

  // optional int32 user_message_size = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->user_message_size(), output);
  }

  // optional int64 user_defined_source_addr = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->user_defined_source_addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.HuluRpcResponseMeta)
}

::google::protobuf::uint8* HuluRpcResponseMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.HuluRpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional string error_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), static_cast<int>(this->error_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.HuluRpcResponseMeta.error_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_text(), target);
  }

  // optional sint64 correlation_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->correlation_id(), target);
  }

  // optional int32 compress_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->compress_type(), target);
  }

  // optional .brpc.ChunkInfo chuck_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_chuck_info(), deterministic, target);
  }

  // optional .brpc.TalkType response_talk_type = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->response_talk_type(), target);
  }

  // optional bytes user_data = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->user_data(), target);
  }

  // optional int32 user_message_size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->user_message_size(), target);
  }

  // optional int64 user_defined_source_addr = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->user_defined_source_addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.HuluRpcResponseMeta)
  return target;
}

size_t HuluRpcResponseMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.HuluRpcResponseMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string error_text = 2;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }

    // optional bytes user_data = 7;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_data());
    }

    // optional .brpc.ChunkInfo chuck_info = 5;
    if (has_chuck_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chuck_info_);
    }

    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 compress_type = 4;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compress_type());
    }

    // optional sint64 correlation_id = 3;
    if (has_correlation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->correlation_id());
    }

    // optional .brpc.TalkType response_talk_type = 6;
    if (has_response_talk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_talk_type());
    }

    // optional int32 user_message_size = 8;
    if (has_user_message_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_message_size());
    }

  }
  // optional int64 user_defined_source_addr = 9;
  if (has_user_defined_source_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_defined_source_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HuluRpcResponseMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.HuluRpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const HuluRpcResponseMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuluRpcResponseMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.HuluRpcResponseMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.HuluRpcResponseMeta)
    MergeFrom(*source);
  }
}

void HuluRpcResponseMeta::MergeFrom(const HuluRpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.HuluRpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_text();
      error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_data();
      user_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_chuck_info()->::brpc::ChunkInfo::MergeFrom(from.chuck_info());
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      compress_type_ = from.compress_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      correlation_id_ = from.correlation_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      response_talk_type_ = from.response_talk_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      user_message_size_ = from.user_message_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_user_defined_source_addr(from.user_defined_source_addr());
  }
}

void HuluRpcResponseMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.HuluRpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuluRpcResponseMeta::CopyFrom(const HuluRpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.HuluRpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuluRpcResponseMeta::IsInitialized() const {
  if (has_chuck_info()) {
    if (!this->chuck_info_->IsInitialized()) return false;
  }
  return true;
}

void HuluRpcResponseMeta::Swap(HuluRpcResponseMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuluRpcResponseMeta::InternalSwap(HuluRpcResponseMeta* other) {
  using std::swap;
  error_text_.Swap(&other->error_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_data_.Swap(&other->user_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chuck_info_, other->chuck_info_);
  swap(error_code_, other->error_code_);
  swap(compress_type_, other->compress_type_);
  swap(correlation_id_, other->correlation_id_);
  swap(response_talk_type_, other->response_talk_type_);
  swap(user_message_size_, other->user_message_size_);
  swap(user_defined_source_addr_, other->user_defined_source_addr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HuluRpcResponseMeta::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fhulu_5fpbrpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::HuluRpcRequestMeta* Arena::CreateMaybeMessage< ::brpc::policy::HuluRpcRequestMeta >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::HuluRpcRequestMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::HuluRpcResponseMeta* Arena::CreateMaybeMessage< ::brpc::policy::HuluRpcResponseMeta >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::HuluRpcResponseMeta >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

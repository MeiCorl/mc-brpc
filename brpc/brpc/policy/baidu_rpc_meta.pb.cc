// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/policy/baidu_rpc_meta.proto

#include "brpc/policy/baidu_rpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_brpc_2foptions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChunkInfo;
}  // namespace protobuf_brpc_2foptions_2eproto
namespace protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RpcRequestMeta;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RpcResponseMeta;
}  // namespace protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto
namespace protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StreamSettings;
}  // namespace protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto
namespace brpc {
namespace policy {
class RpcMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcMeta>
      _instance;
} _RpcMeta_default_instance_;
class RpcRequestMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcRequestMeta>
      _instance;
} _RpcRequestMeta_default_instance_;
class RpcResponseMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcResponseMeta>
      _instance;
} _RpcResponseMeta_default_instance_;
}  // namespace policy
}  // namespace brpc
namespace protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto {
static void InitDefaultsRpcMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_RpcMeta_default_instance_;
    new (ptr) ::brpc::policy::RpcMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::RpcMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RpcMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRpcMeta}, {
      &protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::scc_info_RpcRequestMeta.base,
      &protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::scc_info_RpcResponseMeta.base,
      &protobuf_brpc_2foptions_2eproto::scc_info_ChunkInfo.base,
      &protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::scc_info_StreamSettings.base,}};

static void InitDefaultsRpcRequestMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_RpcRequestMeta_default_instance_;
    new (ptr) ::brpc::policy::RpcRequestMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::RpcRequestMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RpcRequestMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpcRequestMeta}, {}};

static void InitDefaultsRpcResponseMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::policy::_RpcResponseMeta_default_instance_;
    new (ptr) ::brpc::policy::RpcResponseMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::policy::RpcResponseMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RpcResponseMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpcResponseMeta}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RpcMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RpcRequestMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RpcResponseMeta.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcMeta, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcMeta, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcMeta, compress_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcMeta, correlation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcMeta, attachment_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcMeta, chunk_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcMeta, authentication_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcMeta, stream_settings_),
  1,
  2,
  6,
  5,
  7,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, service_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, method_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, log_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, parent_span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcRequestMeta, timeout_ms_),
  0,
  1,
  3,
  4,
  5,
  6,
  2,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcResponseMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcResponseMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcResponseMeta, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::policy::RpcResponseMeta, error_text_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::brpc::policy::RpcMeta)},
  { 21, 34, sizeof(::brpc::policy::RpcRequestMeta)},
  { 42, 49, sizeof(::brpc::policy::RpcResponseMeta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_RpcMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_RpcRequestMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::policy::_RpcResponseMeta_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "brpc/policy/baidu_rpc_meta.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n brpc/policy/baidu_rpc_meta.proto\022\013brpc"
      ".policy\032\022brpc/options.proto\032\035brpc/stream"
      "ing_rpc_meta.proto\"\240\002\n\007RpcMeta\022,\n\007reques"
      "t\030\001 \001(\0132\033.brpc.policy.RpcRequestMeta\022.\n\010"
      "response\030\002 \001(\0132\034.brpc.policy.RpcResponse"
      "Meta\022\025\n\rcompress_type\030\003 \001(\005\022\026\n\016correlati"
      "on_id\030\004 \001(\003\022\027\n\017attachment_size\030\005 \001(\005\022#\n\n"
      "chunk_info\030\006 \001(\0132\017.brpc.ChunkInfo\022\033\n\023aut"
      "hentication_data\030\007 \001(\014\022-\n\017stream_setting"
      "s\030\010 \001(\0132\024.brpc.StreamSettings\"\256\001\n\016RpcReq"
      "uestMeta\022\024\n\014service_name\030\001 \002(\t\022\023\n\013method"
      "_name\030\002 \002(\t\022\016\n\006log_id\030\003 \001(\003\022\020\n\010trace_id\030"
      "\004 \001(\003\022\017\n\007span_id\030\005 \001(\003\022\026\n\016parent_span_id"
      "\030\006 \001(\003\022\022\n\nrequest_id\030\007 \001(\t\022\022\n\ntimeout_ms"
      "\030\010 \001(\005\"9\n\017RpcResponseMeta\022\022\n\nerror_code\030"
      "\001 \001(\005\022\022\n\nerror_text\030\002 \001(\tB \n\017com.brpc.po"
      "licyB\rBaiduRpcProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 659);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/policy/baidu_rpc_meta.proto", &protobuf_RegisterTypes);
  ::protobuf_brpc_2foptions_2eproto::AddDescriptors();
  ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto
namespace brpc {
namespace policy {

// ===================================================================

void RpcMeta::InitAsDefaultInstance() {
  ::brpc::policy::_RpcMeta_default_instance_._instance.get_mutable()->request_ = const_cast< ::brpc::policy::RpcRequestMeta*>(
      ::brpc::policy::RpcRequestMeta::internal_default_instance());
  ::brpc::policy::_RpcMeta_default_instance_._instance.get_mutable()->response_ = const_cast< ::brpc::policy::RpcResponseMeta*>(
      ::brpc::policy::RpcResponseMeta::internal_default_instance());
  ::brpc::policy::_RpcMeta_default_instance_._instance.get_mutable()->chunk_info_ = const_cast< ::brpc::ChunkInfo*>(
      ::brpc::ChunkInfo::internal_default_instance());
  ::brpc::policy::_RpcMeta_default_instance_._instance.get_mutable()->stream_settings_ = const_cast< ::brpc::StreamSettings*>(
      ::brpc::StreamSettings::internal_default_instance());
}
void RpcMeta::clear_chunk_info() {
  if (chunk_info_ != NULL) chunk_info_->Clear();
  clear_has_chunk_info();
}
void RpcMeta::clear_stream_settings() {
  if (stream_settings_ != NULL) stream_settings_->Clear();
  clear_has_stream_settings();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMeta::kRequestFieldNumber;
const int RpcMeta::kResponseFieldNumber;
const int RpcMeta::kCompressTypeFieldNumber;
const int RpcMeta::kCorrelationIdFieldNumber;
const int RpcMeta::kAttachmentSizeFieldNumber;
const int RpcMeta::kChunkInfoFieldNumber;
const int RpcMeta::kAuthenticationDataFieldNumber;
const int RpcMeta::kStreamSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMeta::RpcMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::scc_info_RpcMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RpcMeta)
}
RpcMeta::RpcMeta(const RpcMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authentication_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authentication_data()) {
    authentication_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authentication_data_);
  }
  if (from.has_request()) {
    request_ = new ::brpc::policy::RpcRequestMeta(*from.request_);
  } else {
    request_ = NULL;
  }
  if (from.has_response()) {
    response_ = new ::brpc::policy::RpcResponseMeta(*from.response_);
  } else {
    response_ = NULL;
  }
  if (from.has_chunk_info()) {
    chunk_info_ = new ::brpc::ChunkInfo(*from.chunk_info_);
  } else {
    chunk_info_ = NULL;
  }
  if (from.has_stream_settings()) {
    stream_settings_ = new ::brpc::StreamSettings(*from.stream_settings_);
  } else {
    stream_settings_ = NULL;
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&attachment_size_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(attachment_size_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RpcMeta)
}

void RpcMeta::SharedCtor() {
  authentication_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attachment_size_) -
      reinterpret_cast<char*>(&request_)) + sizeof(attachment_size_));
}

RpcMeta::~RpcMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.RpcMeta)
  SharedDtor();
}

void RpcMeta::SharedDtor() {
  authentication_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
  if (this != internal_default_instance()) delete chunk_info_;
  if (this != internal_default_instance()) delete stream_settings_;
}

void RpcMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RpcMeta::descriptor() {
  ::protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcMeta& RpcMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::scc_info_RpcMeta.base);
  return *internal_default_instance();
}


void RpcMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      authentication_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(request_ != NULL);
      request_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(response_ != NULL);
      response_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(chunk_info_ != NULL);
      chunk_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stream_settings_ != NULL);
      stream_settings_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&correlation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attachment_size_) -
        reinterpret_cast<char*>(&correlation_id_)) + sizeof(attachment_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RpcMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RpcMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .brpc.policy.RpcRequestMeta request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.policy.RpcResponseMeta response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 compress_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_compress_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compress_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 correlation_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_correlation_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &correlation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attachment_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_attachment_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.ChunkInfo chunk_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chunk_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes authentication_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_authentication_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.StreamSettings stream_settings = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stream_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RpcMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RpcMeta)
  return false;
#undef DO_
}

void RpcMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .brpc.policy.RpcRequestMeta request = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_request(), output);
  }

  // optional .brpc.policy.RpcResponseMeta response = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_response(), output);
  }

  // optional int32 compress_type = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compress_type(), output);
  }

  // optional int64 correlation_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->correlation_id(), output);
  }

  // optional int32 attachment_size = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attachment_size(), output);
  }

  // optional .brpc.ChunkInfo chunk_info = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_chunk_info(), output);
  }

  // optional bytes authentication_data = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->authentication_data(), output);
  }

  // optional .brpc.StreamSettings stream_settings = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_stream_settings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RpcMeta)
}

::google::protobuf::uint8* RpcMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .brpc.policy.RpcRequestMeta request = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_request(), deterministic, target);
  }

  // optional .brpc.policy.RpcResponseMeta response = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_response(), deterministic, target);
  }

  // optional int32 compress_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compress_type(), target);
  }

  // optional int64 correlation_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->correlation_id(), target);
  }

  // optional int32 attachment_size = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attachment_size(), target);
  }

  // optional .brpc.ChunkInfo chunk_info = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_chunk_info(), deterministic, target);
  }

  // optional bytes authentication_data = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->authentication_data(), target);
  }

  // optional .brpc.StreamSettings stream_settings = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_stream_settings(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RpcMeta)
  return target;
}

size_t RpcMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RpcMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes authentication_data = 7;
    if (has_authentication_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->authentication_data());
    }

    // optional .brpc.policy.RpcRequestMeta request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_);
    }

    // optional .brpc.policy.RpcResponseMeta response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_);
    }

    // optional .brpc.ChunkInfo chunk_info = 6;
    if (has_chunk_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chunk_info_);
    }

    // optional .brpc.StreamSettings stream_settings = 8;
    if (has_stream_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stream_settings_);
    }

    // optional int64 correlation_id = 4;
    if (has_correlation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->correlation_id());
    }

    // optional int32 compress_type = 3;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compress_type());
    }

    // optional int32 attachment_size = 5;
    if (has_attachment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpcMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.RpcMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.RpcMeta)
    MergeFrom(*source);
  }
}

void RpcMeta::MergeFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_authentication_data();
      authentication_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authentication_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_request()->::brpc::policy::RpcRequestMeta::MergeFrom(from.request());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_response()->::brpc::policy::RpcResponseMeta::MergeFrom(from.response());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_chunk_info()->::brpc::ChunkInfo::MergeFrom(from.chunk_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_stream_settings()->::brpc::StreamSettings::MergeFrom(from.stream_settings());
    }
    if (cached_has_bits & 0x00000020u) {
      correlation_id_ = from.correlation_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      compress_type_ = from.compress_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      attachment_size_ = from.attachment_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpcMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMeta::CopyFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta::IsInitialized() const {
  if (has_request()) {
    if (!this->request_->IsInitialized()) return false;
  }
  if (has_chunk_info()) {
    if (!this->chunk_info_->IsInitialized()) return false;
  }
  if (has_stream_settings()) {
    if (!this->stream_settings_->IsInitialized()) return false;
  }
  return true;
}

void RpcMeta::Swap(RpcMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMeta::InternalSwap(RpcMeta* other) {
  using std::swap;
  authentication_data_.Swap(&other->authentication_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_, other->request_);
  swap(response_, other->response_);
  swap(chunk_info_, other->chunk_info_);
  swap(stream_settings_, other->stream_settings_);
  swap(correlation_id_, other->correlation_id_);
  swap(compress_type_, other->compress_type_);
  swap(attachment_size_, other->attachment_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RpcMeta::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RpcRequestMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcRequestMeta::kServiceNameFieldNumber;
const int RpcRequestMeta::kMethodNameFieldNumber;
const int RpcRequestMeta::kLogIdFieldNumber;
const int RpcRequestMeta::kTraceIdFieldNumber;
const int RpcRequestMeta::kSpanIdFieldNumber;
const int RpcRequestMeta::kParentSpanIdFieldNumber;
const int RpcRequestMeta::kRequestIdFieldNumber;
const int RpcRequestMeta::kTimeoutMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcRequestMeta::RpcRequestMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::scc_info_RpcRequestMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RpcRequestMeta)
}
RpcRequestMeta::RpcRequestMeta(const RpcRequestMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_name()) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_name()) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  ::memcpy(&log_id_, &from.log_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_ms_) -
    reinterpret_cast<char*>(&log_id_)) + sizeof(timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RpcRequestMeta)
}

void RpcRequestMeta::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_ms_) -
      reinterpret_cast<char*>(&log_id_)) + sizeof(timeout_ms_));
}

RpcRequestMeta::~RpcRequestMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.RpcRequestMeta)
  SharedDtor();
}

void RpcRequestMeta::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcRequestMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RpcRequestMeta::descriptor() {
  ::protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcRequestMeta& RpcRequestMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::scc_info_RpcRequestMeta.base);
  return *internal_default_instance();
}


void RpcRequestMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      service_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      method_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&log_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_ms_) -
        reinterpret_cast<char*>(&log_id_)) + sizeof(timeout_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RpcRequestMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RpcRequestMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RpcRequestMeta.service_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string method_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RpcRequestMeta.method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 log_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_log_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trace_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_trace_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 span_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 parent_span_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_parent_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RpcRequestMeta.request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timeout_ms = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_timeout_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RpcRequestMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RpcRequestMeta)
  return false;
#undef DO_
}

void RpcRequestMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // required string method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method_name(), output);
  }

  // optional int64 log_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->log_id(), output);
  }

  // optional int64 trace_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->trace_id(), output);
  }

  // optional int64 span_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->span_id(), output);
  }

  // optional int64 parent_span_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->parent_span_id(), output);
  }

  // optional string request_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->request_id(), output);
  }

  // optional int32 timeout_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timeout_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RpcRequestMeta)
}

::google::protobuf::uint8* RpcRequestMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // required string method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  // optional int64 log_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->log_id(), target);
  }

  // optional int64 trace_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->trace_id(), target);
  }

  // optional int64 span_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->span_id(), target);
  }

  // optional int64 parent_span_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->parent_span_id(), target);
  }

  // optional string request_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcRequestMeta.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->request_id(), target);
  }

  // optional int32 timeout_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->timeout_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RpcRequestMeta)
  return target;
}

size_t RpcRequestMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.policy.RpcRequestMeta)
  size_t total_size = 0;

  if (has_service_name()) {
    // required string service_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  if (has_method_name()) {
    // required string method_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  return total_size;
}
size_t RpcRequestMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RpcRequestMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string service_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());

    // required string method_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional string request_id = 7;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int64 log_id = 3;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_id());
    }

    // optional int64 trace_id = 4;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trace_id());
    }

    // optional int64 span_id = 5;
    if (has_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->span_id());
    }

    // optional int64 parent_span_id = 6;
    if (has_parent_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parent_span_id());
    }

    // optional int32 timeout_ms = 8;
    if (has_timeout_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpcRequestMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.RpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcRequestMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcRequestMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.RpcRequestMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.RpcRequestMeta)
    MergeFrom(*source);
  }
}

void RpcRequestMeta::MergeFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_service_name();
      service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_method_name();
      method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      log_id_ = from.log_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      trace_id_ = from.trace_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      span_id_ = from.span_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      parent_span_id_ = from.parent_span_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      timeout_ms_ = from.timeout_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpcRequestMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcRequestMeta::CopyFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RpcRequestMeta::Swap(RpcRequestMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcRequestMeta::InternalSwap(RpcRequestMeta* other) {
  using std::swap;
  service_name_.Swap(&other->service_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_name_.Swap(&other->method_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(log_id_, other->log_id_);
  swap(trace_id_, other->trace_id_);
  swap(span_id_, other->span_id_);
  swap(parent_span_id_, other->parent_span_id_);
  swap(timeout_ms_, other->timeout_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RpcRequestMeta::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RpcResponseMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcResponseMeta::kErrorCodeFieldNumber;
const int RpcResponseMeta::kErrorTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcResponseMeta::RpcResponseMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::scc_info_RpcResponseMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.policy.RpcResponseMeta)
}
RpcResponseMeta::RpcResponseMeta(const RpcResponseMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_text()) {
    error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:brpc.policy.RpcResponseMeta)
}

void RpcResponseMeta::SharedCtor() {
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

RpcResponseMeta::~RpcResponseMeta() {
  // @@protoc_insertion_point(destructor:brpc.policy.RpcResponseMeta)
  SharedDtor();
}

void RpcResponseMeta::SharedDtor() {
  error_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcResponseMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RpcResponseMeta::descriptor() {
  ::protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcResponseMeta& RpcResponseMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::scc_info_RpcResponseMeta.base);
  return *internal_default_instance();
}


void RpcResponseMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.policy.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_text_.ClearNonDefaultToEmptyNoArena();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RpcResponseMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.policy.RpcResponseMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_text().data(), static_cast<int>(this->error_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.policy.RpcResponseMeta.error_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.policy.RpcResponseMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.policy.RpcResponseMeta)
  return false;
#undef DO_
}

void RpcResponseMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.policy.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), static_cast<int>(this->error_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcResponseMeta.error_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.policy.RpcResponseMeta)
}

::google::protobuf::uint8* RpcResponseMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.policy.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional string error_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), static_cast<int>(this->error_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.policy.RpcResponseMeta.error_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.policy.RpcResponseMeta)
  return target;
}

size_t RpcResponseMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.policy.RpcResponseMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string error_text = 2;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }

    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpcResponseMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.policy.RpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcResponseMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcResponseMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.policy.RpcResponseMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.policy.RpcResponseMeta)
    MergeFrom(*source);
  }
}

void RpcResponseMeta::MergeFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.policy.RpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_text();
      error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpcResponseMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.policy.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcResponseMeta::CopyFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.policy.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponseMeta::IsInitialized() const {
  return true;
}

void RpcResponseMeta::Swap(RpcResponseMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcResponseMeta::InternalSwap(RpcResponseMeta* other) {
  using std::swap;
  error_text_.Swap(&other->error_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RpcResponseMeta::GetMetadata() const {
  protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fpolicy_2fbaidu_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace policy
}  // namespace brpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::RpcMeta* Arena::CreateMaybeMessage< ::brpc::policy::RpcMeta >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::RpcMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::RpcRequestMeta* Arena::CreateMaybeMessage< ::brpc::policy::RpcRequestMeta >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::RpcRequestMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::policy::RpcResponseMeta* Arena::CreateMaybeMessage< ::brpc::policy::RpcResponseMeta >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::policy::RpcResponseMeta >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/options.proto

#include "brpc/options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace brpc {
class ChunkInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkInfo>
      _instance;
} _ChunkInfo_default_instance_;
}  // namespace brpc
namespace protobuf_brpc_2foptions_2eproto {
static void InitDefaultsChunkInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::_ChunkInfo_default_instance_;
    new (ptr) ::brpc::ChunkInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::ChunkInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChunkInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChunkInfo}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkInfo.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::ChunkInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::ChunkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::ChunkInfo, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::ChunkInfo, chunk_id_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::brpc::ChunkInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::_ChunkInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "brpc/options.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022brpc/options.proto\022\004brpc\032 google/proto"
      "buf/descriptor.proto\"0\n\tChunkInfo\022\021\n\tstr"
      "eam_id\030\001 \002(\003\022\020\n\010chunk_id\030\002 \002(\003*6\n\010TalkTy"
      "pe\022\024\n\020TALK_TYPE_NORMAL\020\000\022\024\n\020TALK_TYPE_ON"
      "EWAY\020\001*\200\001\n\016ConnectionType\022\033\n\027CONNECTION_"
      "TYPE_UNKNOWN\020\000\022\032\n\026CONNECTION_TYPE_SINGLE"
      "\020\001\022\032\n\026CONNECTION_TYPE_POOLED\020\002\022\031\n\025CONNEC"
      "TION_TYPE_SHORT\020\004*\217\005\n\014ProtocolType\022\024\n\020PR"
      "OTOCOL_UNKNOWN\020\000\022\026\n\022PROTOCOL_BAIDU_STD\020\001"
      "\022\032\n\026PROTOCOL_STREAMING_RPC\020\002\022\027\n\023PROTOCOL"
      "_HULU_PBRPC\020\003\022\027\n\023PROTOCOL_SOFA_PBRPC\020\004\022\021"
      "\n\rPROTOCOL_RTMP\020\005\022\023\n\017PROTOCOL_THRIFT\020\006\022\021"
      "\n\rPROTOCOL_HTTP\020\007\022\031\n\025PROTOCOL_PUBLIC_PBR"
      "PC\020\010\022\027\n\023PROTOCOL_NOVA_PBRPC\020\t\022\022\n\016PROTOCO"
      "L_REDIS\020\n\022\032\n\026PROTOCOL_NSHEAD_CLIENT\020\013\022\023\n"
      "\017PROTOCOL_NSHEAD\020\014\022\027\n\023PROTOCOL_HADOOP_RP"
      "C\020\r\022\036\n\032PROTOCOL_HADOOP_SERVER_RPC\020\016\022\022\n\016P"
      "ROTOCOL_MONGO\020\017\022\032\n\026PROTOCOL_UBRPC_COMPAC"
      "K\020\020\022\030\n\024PROTOCOL_DIDX_CLIENT\020\021\022\025\n\021PROTOCO"
      "L_MEMCACHE\020\022\022\020\n\014PROTOCOL_ITP\020\023\022\032\n\026PROTOC"
      "OL_NSHEAD_MCPACK\020\024\022\025\n\021PROTOCOL_DISP_IDL\020"
      "\025\022\031\n\025PROTOCOL_ERSDA_CLIENT\020\026\022\032\n\026PROTOCOL"
      "_UBRPC_MCPACK2\020\027\022\026\n\022PROTOCOL_CDS_AGENT\020\030"
      "\022\020\n\014PROTOCOL_ESP\020\031\022\017\n\013PROTOCOL_H2\020\032*\207\001\n\014"
      "CompressType\022\026\n\022COMPRESS_TYPE_NONE\020\000\022\030\n\024"
      "COMPRESS_TYPE_SNAPPY\020\001\022\026\n\022COMPRESS_TYPE_"
      "GZIP\020\002\022\026\n\022COMPRESS_TYPE_ZLIB\020\003\022\025\n\021COMPRE"
      "SS_TYPE_LZ4\020\004:A\n\017service_timeout\022\037.googl"
      "e.protobuf.ServiceOptions\030\220\277\005 \001(\003:\00510000"
      ":]\n\021request_talk_type\022\036.google.protobuf."
      "MethodOptions\030\221\277\005 \001(\0162\016.brpc.TalkType:\020T"
      "ALK_TYPE_NORMAL:^\n\022response_talk_type\022\036."
      "google.protobuf.MethodOptions\030\222\277\005 \001(\0162\016."
      "brpc.TalkType:\020TALK_TYPE_NORMAL:8\n\016metho"
      "d_timeout\022\036.google.protobuf.MethodOption"
      "s\030\223\277\005 \001(\003:e\n\023request_compression\022\036.googl"
      "e.protobuf.MethodOptions\030\224\277\005 \001(\0162\022.brpc."
      "CompressType:\022COMPRESS_TYPE_NONE:f\n\024resp"
      "onse_compression\022\036.google.protobuf.Metho"
      "dOptions\030\225\277\005 \001(\0162\022.brpc.CompressType:\022CO"
      "MPRESS_TYPE_NONEB\023\n\010com.brpcB\007Options"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1637);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/options.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_brpc_2foptions_2eproto
namespace brpc {
const ::google::protobuf::EnumDescriptor* TalkType_descriptor() {
  protobuf_brpc_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brpc_2foptions_2eproto::file_level_enum_descriptors[0];
}
bool TalkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectionType_descriptor() {
  protobuf_brpc_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brpc_2foptions_2eproto::file_level_enum_descriptors[1];
}
bool ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor() {
  protobuf_brpc_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brpc_2foptions_2eproto::file_level_enum_descriptors[2];
}
bool ProtocolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CompressType_descriptor() {
  protobuf_brpc_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brpc_2foptions_2eproto::file_level_enum_descriptors[3];
}
bool CompressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ChunkInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkInfo::kStreamIdFieldNumber;
const int ChunkInfo::kChunkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkInfo::ChunkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2foptions_2eproto::scc_info_ChunkInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.ChunkInfo)
}
ChunkInfo::ChunkInfo(const ChunkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunk_id_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(chunk_id_));
  // @@protoc_insertion_point(copy_constructor:brpc.ChunkInfo)
}

void ChunkInfo::SharedCtor() {
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunk_id_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(chunk_id_));
}

ChunkInfo::~ChunkInfo() {
  // @@protoc_insertion_point(destructor:brpc.ChunkInfo)
  SharedDtor();
}

void ChunkInfo::SharedDtor() {
}

void ChunkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkInfo::descriptor() {
  ::protobuf_brpc_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkInfo& ChunkInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2foptions_2eproto::scc_info_ChunkInfo.base);
  return *internal_default_instance();
}


void ChunkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.ChunkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chunk_id_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(chunk_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.ChunkInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 stream_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stream_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 chunk_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chunk_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.ChunkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.ChunkInfo)
  return false;
#undef DO_
}

void ChunkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.ChunkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }

  // required int64 chunk_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->chunk_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.ChunkInfo)
}

::google::protobuf::uint8* ChunkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.ChunkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }

  // required int64 chunk_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->chunk_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.ChunkInfo)
  return target;
}

size_t ChunkInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.ChunkInfo)
  size_t total_size = 0;

  if (has_stream_id()) {
    // required int64 stream_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stream_id());
  }

  if (has_chunk_id()) {
    // required int64 chunk_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chunk_id());
  }

  return total_size;
}
size_t ChunkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.ChunkInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 stream_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stream_id());

    // required int64 chunk_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chunk_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.ChunkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.ChunkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.ChunkInfo)
    MergeFrom(*source);
  }
}

void ChunkInfo::MergeFrom(const ChunkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.ChunkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chunk_id_ = from.chunk_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChunkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.ChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkInfo::CopyFrom(const ChunkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.ChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ChunkInfo::Swap(ChunkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkInfo::InternalSwap(ChunkInfo* other) {
  using std::swap;
  swap(stream_id_, other->stream_id_);
  swap(chunk_id_, other->chunk_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkInfo::GetMetadata() const {
  protobuf_brpc_2foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  service_timeout(kServiceTimeoutFieldNumber, GOOGLE_LONGLONG(10000));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::TalkType, ::brpc::TalkType_IsValid>, 14, false >
  request_talk_type(kRequestTalkTypeFieldNumber, static_cast< ::brpc::TalkType >(0));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::TalkType, ::brpc::TalkType_IsValid>, 14, false >
  response_talk_type(kResponseTalkTypeFieldNumber, static_cast< ::brpc::TalkType >(0));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  method_timeout(kMethodTimeoutFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::CompressType, ::brpc::CompressType_IsValid>, 14, false >
  request_compression(kRequestCompressionFieldNumber, static_cast< ::brpc::CompressType >(0));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::brpc::CompressType, ::brpc::CompressType_IsValid>, 14, false >
  response_compression(kResponseCompressionFieldNumber, static_cast< ::brpc::CompressType >(0));

// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::ChunkInfo* Arena::CreateMaybeMessage< ::brpc::ChunkInfo >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::ChunkInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

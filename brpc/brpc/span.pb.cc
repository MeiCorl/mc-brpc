// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/span.proto

#include "brpc/span.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_brpc_2fspan_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fspan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RpczSpan;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fspan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpanAnnotation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fspan_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TracingSpan;
}  // namespace protobuf_brpc_2fspan_2eproto
namespace brpc {
class RpczSpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpczSpan>
      _instance;
} _RpczSpan_default_instance_;
class BriefSpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BriefSpan>
      _instance;
} _BriefSpan_default_instance_;
class SpanAnnotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpanAnnotation>
      _instance;
} _SpanAnnotation_default_instance_;
class TracingSpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TracingSpan>
      _instance;
} _TracingSpan_default_instance_;
}  // namespace brpc
namespace protobuf_brpc_2fspan_2eproto {
static void InitDefaultsRpczSpan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::_RpczSpan_default_instance_;
    new (ptr) ::brpc::RpczSpan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::RpczSpan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RpczSpan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpczSpan}, {}};

static void InitDefaultsBriefSpan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::_BriefSpan_default_instance_;
    new (ptr) ::brpc::BriefSpan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::BriefSpan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BriefSpan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBriefSpan}, {}};

static void InitDefaultsSpanAnnotation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::_SpanAnnotation_default_instance_;
    new (ptr) ::brpc::SpanAnnotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::SpanAnnotation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpanAnnotation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpanAnnotation}, {}};

static void InitDefaultsTracingSpan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::_TracingSpan_default_instance_;
    new (ptr) ::brpc::TracingSpan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::TracingSpan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TracingSpan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTracingSpan}, {
      &protobuf_brpc_2fspan_2eproto::scc_info_SpanAnnotation.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RpczSpan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BriefSpan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpanAnnotation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TracingSpan.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, parent_span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, log_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, base_cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, ending_cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, remote_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, remote_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, async_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, request_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, response_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, received_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, start_parse_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, start_callback_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, start_send_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, sent_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, client_spans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::RpczSpan, full_method_name_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, log_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, request_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, response_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, start_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, latency_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::BriefSpan, full_method_name_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::SpanAnnotation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::SpanAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::SpanAnnotation, realtime_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::SpanAnnotation, content_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, parent_span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, log_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, remote_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, remote_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, request_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, response_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, received_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, start_parse_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, start_callback_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, start_send_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, sent_real_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, span_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::TracingSpan, client_spans_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  16,
  11,
  12,
  13,
  14,
  15,
  0,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, sizeof(::brpc::RpczSpan)},
  { 49, 64, sizeof(::brpc::BriefSpan)},
  { 74, 81, sizeof(::brpc::SpanAnnotation)},
  { 83, 107, sizeof(::brpc::TracingSpan)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::_RpczSpan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::_BriefSpan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::_SpanAnnotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::_TracingSpan_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "brpc/span.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017brpc/span.proto\022\004brpc\032\022brpc/options.pr"
      "oto\"\216\004\n\010RpczSpan\022\020\n\010trace_id\030\001 \002(\004\022\017\n\007sp"
      "an_id\030\002 \002(\004\022\026\n\016parent_span_id\030\003 \002(\004\022\016\n\006l"
      "og_id\030\004 \001(\004\022\020\n\010base_cid\030\005 \001(\004\022\022\n\nending_"
      "cid\030\006 \001(\004\022\021\n\tremote_ip\030\007 \001(\r\022\023\n\013remote_p"
      "ort\030\010 \001(\r\022\034\n\004type\030\t \001(\0162\016.brpc.SpanType\022"
      "\r\n\005async\030\n \001(\010\022$\n\010protocol\030\013 \001(\0162\022.brpc."
      "ProtocolType\022\022\n\nerror_code\030\014 \001(\005\022\024\n\014requ"
      "est_size\030\r \001(\005\022\025\n\rresponse_size\030\016 \001(\005\022\030\n"
      "\020received_real_us\030\017 \001(\003\022\033\n\023start_parse_r"
      "eal_us\030\020 \001(\003\022\036\n\026start_callback_real_us\030\021"
      " \001(\003\022\032\n\022start_send_real_us\030\022 \001(\003\022\024\n\014sent"
      "_real_us\030\023 \001(\003\022\014\n\004info\030\024 \001(\014\022$\n\014client_s"
      "pans\030\025 \003(\0132\016.brpc.RpczSpan\022\030\n\020full_metho"
      "d_name\030\026 \001(\014\"\342\001\n\tBriefSpan\022\020\n\010trace_id\030\001"
      " \002(\004\022\017\n\007span_id\030\002 \002(\004\022\016\n\006log_id\030\003 \001(\004\022\034\n"
      "\004type\030\004 \001(\0162\016.brpc.SpanType\022\022\n\nerror_cod"
      "e\030\005 \001(\005\022\024\n\014request_size\030\006 \001(\005\022\025\n\rrespons"
      "e_size\030\007 \001(\005\022\025\n\rstart_real_us\030\010 \001(\003\022\022\n\nl"
      "atency_us\030\t \001(\003\022\030\n\020full_method_name\030\n \001("
      "\014\"6\n\016SpanAnnotation\022\023\n\013realtime_us\030\001 \002(\003"
      "\022\017\n\007content\030\002 \002(\t\"\365\003\n\013TracingSpan\022\020\n\010tra"
      "ce_id\030\001 \002(\004\022\017\n\007span_id\030\002 \002(\004\022\026\n\016parent_s"
      "pan_id\030\003 \002(\004\022\016\n\006log_id\030\004 \001(\004\022\021\n\tremote_i"
      "p\030\005 \001(\r\022\023\n\013remote_port\030\006 \001(\r\022\034\n\004type\030\007 \001"
      "(\0162\016.brpc.SpanType\022$\n\010protocol\030\010 \001(\0162\022.b"
      "rpc.ProtocolType\022\022\n\nerror_code\030\t \001(\005\022\024\n\014"
      "request_size\030\n \001(\005\022\025\n\rresponse_size\030\013 \001("
      "\005\022\030\n\020received_real_us\030\014 \001(\003\022\033\n\023start_par"
      "se_real_us\030\r \001(\003\022\036\n\026start_callback_real_"
      "us\030\016 \001(\003\022\032\n\022start_send_real_us\030\017 \001(\003\022\024\n\014"
      "sent_real_us\030\020 \001(\003\022\021\n\tspan_name\030\021 \001(\t\022)\n"
      "\013annotations\030\022 \003(\0132\024.brpc.SpanAnnotation"
      "\022\'\n\014client_spans\030\023 \003(\0132\021.brpc.TracingSpa"
      "n*6\n\010SpanType\022\024\n\020SPAN_TYPE_SERVER\020\000\022\024\n\020S"
      "PAN_TYPE_CLIENT\020\001B\020\n\010com.brpcB\004Span"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/span.proto", &protobuf_RegisterTypes);
  ::protobuf_brpc_2foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_brpc_2fspan_2eproto
namespace brpc {
const ::google::protobuf::EnumDescriptor* SpanType_descriptor() {
  protobuf_brpc_2fspan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brpc_2fspan_2eproto::file_level_enum_descriptors[0];
}
bool SpanType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RpczSpan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpczSpan::kTraceIdFieldNumber;
const int RpczSpan::kSpanIdFieldNumber;
const int RpczSpan::kParentSpanIdFieldNumber;
const int RpczSpan::kLogIdFieldNumber;
const int RpczSpan::kBaseCidFieldNumber;
const int RpczSpan::kEndingCidFieldNumber;
const int RpczSpan::kRemoteIpFieldNumber;
const int RpczSpan::kRemotePortFieldNumber;
const int RpczSpan::kTypeFieldNumber;
const int RpczSpan::kAsyncFieldNumber;
const int RpczSpan::kProtocolFieldNumber;
const int RpczSpan::kErrorCodeFieldNumber;
const int RpczSpan::kRequestSizeFieldNumber;
const int RpczSpan::kResponseSizeFieldNumber;
const int RpczSpan::kReceivedRealUsFieldNumber;
const int RpczSpan::kStartParseRealUsFieldNumber;
const int RpczSpan::kStartCallbackRealUsFieldNumber;
const int RpczSpan::kStartSendRealUsFieldNumber;
const int RpczSpan::kSentRealUsFieldNumber;
const int RpczSpan::kInfoFieldNumber;
const int RpczSpan::kClientSpansFieldNumber;
const int RpczSpan::kFullMethodNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpczSpan::RpczSpan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fspan_2eproto::scc_info_RpczSpan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.RpczSpan)
}
RpczSpan::RpczSpan(const RpczSpan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      client_spans_(from.client_spans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info()) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  full_method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_method_name()) {
    full_method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_method_name_);
  }
  ::memcpy(&trace_id_, &from.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sent_real_us_) -
    reinterpret_cast<char*>(&trace_id_)) + sizeof(sent_real_us_));
  // @@protoc_insertion_point(copy_constructor:brpc.RpczSpan)
}

void RpczSpan::SharedCtor() {
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trace_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sent_real_us_) -
      reinterpret_cast<char*>(&trace_id_)) + sizeof(sent_real_us_));
}

RpczSpan::~RpczSpan() {
  // @@protoc_insertion_point(destructor:brpc.RpczSpan)
  SharedDtor();
}

void RpczSpan::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpczSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RpczSpan::descriptor() {
  ::protobuf_brpc_2fspan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fspan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpczSpan& RpczSpan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fspan_2eproto::scc_info_RpczSpan.base);
  return *internal_default_instance();
}


void RpczSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.RpczSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_spans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      info_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      full_method_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ending_cid_) -
        reinterpret_cast<char*>(&trace_id_)) + sizeof(ending_cid_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&remote_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_size_) -
        reinterpret_cast<char*>(&remote_ip_)) + sizeof(response_size_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&received_real_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sent_real_us_) -
        reinterpret_cast<char*>(&received_real_us_)) + sizeof(sent_real_us_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RpczSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.RpczSpan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 trace_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trace_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 span_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 parent_span_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_parent_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 log_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_log_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_cid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_base_cid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_cid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ending_cid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ending_cid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ending_cid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_ip = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_remote_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_port = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_remote_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.SpanType type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::SpanType_IsValid(value)) {
            set_type(static_cast< ::brpc::SpanType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool async = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_async();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &async_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.ProtocolType protocol = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::ProtocolType_IsValid(value)) {
            set_protocol(static_cast< ::brpc::ProtocolType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 error_code = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 request_size = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_request_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 response_size = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_response_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 received_real_us = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_received_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &received_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_parse_real_us = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_start_parse_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_parse_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_callback_real_us = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_start_callback_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_callback_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_send_real_us = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_start_send_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_send_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sent_real_us = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_sent_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sent_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes info = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .brpc.RpczSpan client_spans = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_client_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes full_method_name = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_full_method_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.RpczSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.RpczSpan)
  return false;
#undef DO_
}

void RpczSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.RpczSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trace_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trace_id(), output);
  }

  // required uint64 span_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->span_id(), output);
  }

  // required uint64 parent_span_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->parent_span_id(), output);
  }

  // optional uint64 log_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->log_id(), output);
  }

  // optional uint64 base_cid = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->base_cid(), output);
  }

  // optional uint64 ending_cid = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ending_cid(), output);
  }

  // optional uint32 remote_ip = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->remote_ip(), output);
  }

  // optional uint32 remote_port = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->remote_port(), output);
  }

  // optional .brpc.SpanType type = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional bool async = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->async(), output);
  }

  // optional .brpc.ProtocolType protocol = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->protocol(), output);
  }

  // optional int32 error_code = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->error_code(), output);
  }

  // optional int32 request_size = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->request_size(), output);
  }

  // optional int32 response_size = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->response_size(), output);
  }

  // optional int64 received_real_us = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->received_real_us(), output);
  }

  // optional int64 start_parse_real_us = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->start_parse_real_us(), output);
  }

  // optional int64 start_callback_real_us = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->start_callback_real_us(), output);
  }

  // optional int64 start_send_real_us = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->start_send_real_us(), output);
  }

  // optional int64 sent_real_us = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->sent_real_us(), output);
  }

  // optional bytes info = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->info(), output);
  }

  // repeated .brpc.RpczSpan client_spans = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21,
      this->client_spans(static_cast<int>(i)),
      output);
  }

  // optional bytes full_method_name = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->full_method_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.RpczSpan)
}

::google::protobuf::uint8* RpczSpan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.RpczSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trace_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trace_id(), target);
  }

  // required uint64 span_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->span_id(), target);
  }

  // required uint64 parent_span_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->parent_span_id(), target);
  }

  // optional uint64 log_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->log_id(), target);
  }

  // optional uint64 base_cid = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->base_cid(), target);
  }

  // optional uint64 ending_cid = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ending_cid(), target);
  }

  // optional uint32 remote_ip = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->remote_ip(), target);
  }

  // optional uint32 remote_port = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->remote_port(), target);
  }

  // optional .brpc.SpanType type = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional bool async = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->async(), target);
  }

  // optional .brpc.ProtocolType protocol = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->protocol(), target);
  }

  // optional int32 error_code = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->error_code(), target);
  }

  // optional int32 request_size = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->request_size(), target);
  }

  // optional int32 response_size = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->response_size(), target);
  }

  // optional int64 received_real_us = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->received_real_us(), target);
  }

  // optional int64 start_parse_real_us = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->start_parse_real_us(), target);
  }

  // optional int64 start_callback_real_us = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->start_callback_real_us(), target);
  }

  // optional int64 start_send_real_us = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->start_send_real_us(), target);
  }

  // optional int64 sent_real_us = 19;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->sent_real_us(), target);
  }

  // optional bytes info = 20;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->info(), target);
  }

  // repeated .brpc.RpczSpan client_spans = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_spans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->client_spans(static_cast<int>(i)), deterministic, target);
  }

  // optional bytes full_method_name = 22;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->full_method_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.RpczSpan)
  return target;
}

size_t RpczSpan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.RpczSpan)
  size_t total_size = 0;

  if (has_trace_id()) {
    // required uint64 trace_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());
  }

  if (has_span_id()) {
    // required uint64 span_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->span_id());
  }

  if (has_parent_span_id()) {
    // required uint64 parent_span_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parent_span_id());
  }

  return total_size;
}
size_t RpczSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.RpczSpan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required uint64 trace_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());

    // required uint64 span_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->span_id());

    // required uint64 parent_span_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parent_span_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .brpc.RpczSpan client_spans = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->client_spans_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->client_spans(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes info = 20;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

    // optional bytes full_method_name = 22;
    if (has_full_method_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->full_method_name());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional uint64 log_id = 4;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

    // optional uint64 base_cid = 5;
    if (has_base_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_cid());
    }

    // optional uint64 ending_cid = 6;
    if (has_ending_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ending_cid());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 remote_ip = 7;
    if (has_remote_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ip());
    }

    // optional uint32 remote_port = 8;
    if (has_remote_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_port());
    }

    // optional .brpc.SpanType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool async = 10;
    if (has_async()) {
      total_size += 1 + 1;
    }

    // optional .brpc.ProtocolType protocol = 11;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

    // optional int32 error_code = 12;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 request_size = 13;
    if (has_request_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_size());
    }

    // optional int32 response_size = 14;
    if (has_response_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_size());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int64 received_real_us = 15;
    if (has_received_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->received_real_us());
    }

    // optional int64 start_parse_real_us = 16;
    if (has_start_parse_real_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_parse_real_us());
    }

    // optional int64 start_callback_real_us = 17;
    if (has_start_callback_real_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_callback_real_us());
    }

    // optional int64 start_send_real_us = 18;
    if (has_start_send_real_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_send_real_us());
    }

    // optional int64 sent_real_us = 19;
    if (has_sent_real_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sent_real_us());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpczSpan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.RpczSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const RpczSpan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpczSpan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.RpczSpan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.RpczSpan)
    MergeFrom(*source);
  }
}

void RpczSpan::MergeFrom(const RpczSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.RpczSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_spans_.MergeFrom(from.client_spans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_full_method_name();
      full_method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_method_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      trace_id_ = from.trace_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      span_id_ = from.span_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      parent_span_id_ = from.parent_span_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      log_id_ = from.log_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_cid_ = from.base_cid_;
    }
    if (cached_has_bits & 0x00000080u) {
      ending_cid_ = from.ending_cid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      remote_ip_ = from.remote_ip_;
    }
    if (cached_has_bits & 0x00000200u) {
      remote_port_ = from.remote_port_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000800u) {
      async_ = from.async_;
    }
    if (cached_has_bits & 0x00001000u) {
      protocol_ = from.protocol_;
    }
    if (cached_has_bits & 0x00002000u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00004000u) {
      request_size_ = from.request_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      response_size_ = from.response_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      received_real_us_ = from.received_real_us_;
    }
    if (cached_has_bits & 0x00020000u) {
      start_parse_real_us_ = from.start_parse_real_us_;
    }
    if (cached_has_bits & 0x00040000u) {
      start_callback_real_us_ = from.start_callback_real_us_;
    }
    if (cached_has_bits & 0x00080000u) {
      start_send_real_us_ = from.start_send_real_us_;
    }
    if (cached_has_bits & 0x00100000u) {
      sent_real_us_ = from.sent_real_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpczSpan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.RpczSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpczSpan::CopyFrom(const RpczSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.RpczSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpczSpan::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->client_spans())) return false;
  return true;
}

void RpczSpan::Swap(RpczSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpczSpan::InternalSwap(RpczSpan* other) {
  using std::swap;
  CastToBase(&client_spans_)->InternalSwap(CastToBase(&other->client_spans_));
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  full_method_name_.Swap(&other->full_method_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trace_id_, other->trace_id_);
  swap(span_id_, other->span_id_);
  swap(parent_span_id_, other->parent_span_id_);
  swap(log_id_, other->log_id_);
  swap(base_cid_, other->base_cid_);
  swap(ending_cid_, other->ending_cid_);
  swap(remote_ip_, other->remote_ip_);
  swap(remote_port_, other->remote_port_);
  swap(type_, other->type_);
  swap(async_, other->async_);
  swap(protocol_, other->protocol_);
  swap(error_code_, other->error_code_);
  swap(request_size_, other->request_size_);
  swap(response_size_, other->response_size_);
  swap(received_real_us_, other->received_real_us_);
  swap(start_parse_real_us_, other->start_parse_real_us_);
  swap(start_callback_real_us_, other->start_callback_real_us_);
  swap(start_send_real_us_, other->start_send_real_us_);
  swap(sent_real_us_, other->sent_real_us_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RpczSpan::GetMetadata() const {
  protobuf_brpc_2fspan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fspan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BriefSpan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BriefSpan::kTraceIdFieldNumber;
const int BriefSpan::kSpanIdFieldNumber;
const int BriefSpan::kLogIdFieldNumber;
const int BriefSpan::kTypeFieldNumber;
const int BriefSpan::kErrorCodeFieldNumber;
const int BriefSpan::kRequestSizeFieldNumber;
const int BriefSpan::kResponseSizeFieldNumber;
const int BriefSpan::kStartRealUsFieldNumber;
const int BriefSpan::kLatencyUsFieldNumber;
const int BriefSpan::kFullMethodNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BriefSpan::BriefSpan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fspan_2eproto::scc_info_BriefSpan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.BriefSpan)
}
BriefSpan::BriefSpan(const BriefSpan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_method_name()) {
    full_method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_method_name_);
  }
  ::memcpy(&trace_id_, &from.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&latency_us_) -
    reinterpret_cast<char*>(&trace_id_)) + sizeof(latency_us_));
  // @@protoc_insertion_point(copy_constructor:brpc.BriefSpan)
}

void BriefSpan::SharedCtor() {
  full_method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trace_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_us_) -
      reinterpret_cast<char*>(&trace_id_)) + sizeof(latency_us_));
}

BriefSpan::~BriefSpan() {
  // @@protoc_insertion_point(destructor:brpc.BriefSpan)
  SharedDtor();
}

void BriefSpan::SharedDtor() {
  full_method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BriefSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BriefSpan::descriptor() {
  ::protobuf_brpc_2fspan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fspan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BriefSpan& BriefSpan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fspan_2eproto::scc_info_BriefSpan.base);
  return *internal_default_instance();
}


void BriefSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.BriefSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    full_method_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_size_) -
        reinterpret_cast<char*>(&trace_id_)) + sizeof(response_size_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&start_real_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_us_) -
        reinterpret_cast<char*>(&start_real_us_)) + sizeof(latency_us_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BriefSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.BriefSpan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 trace_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trace_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 span_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 log_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_log_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.SpanType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::SpanType_IsValid(value)) {
            set_type(static_cast< ::brpc::SpanType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 error_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 request_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_request_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 response_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_response_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_real_us = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_start_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 latency_us = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_latency_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &latency_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes full_method_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_full_method_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.BriefSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.BriefSpan)
  return false;
#undef DO_
}

void BriefSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.BriefSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trace_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trace_id(), output);
  }

  // required uint64 span_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->span_id(), output);
  }

  // optional uint64 log_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->log_id(), output);
  }

  // optional .brpc.SpanType type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional int32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->error_code(), output);
  }

  // optional int32 request_size = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->request_size(), output);
  }

  // optional int32 response_size = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->response_size(), output);
  }

  // optional int64 start_real_us = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->start_real_us(), output);
  }

  // optional int64 latency_us = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->latency_us(), output);
  }

  // optional bytes full_method_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->full_method_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.BriefSpan)
}

::google::protobuf::uint8* BriefSpan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.BriefSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trace_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trace_id(), target);
  }

  // required uint64 span_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->span_id(), target);
  }

  // optional uint64 log_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->log_id(), target);
  }

  // optional .brpc.SpanType type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional int32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->error_code(), target);
  }

  // optional int32 request_size = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->request_size(), target);
  }

  // optional int32 response_size = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->response_size(), target);
  }

  // optional int64 start_real_us = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->start_real_us(), target);
  }

  // optional int64 latency_us = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->latency_us(), target);
  }

  // optional bytes full_method_name = 10;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->full_method_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.BriefSpan)
  return target;
}

size_t BriefSpan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.BriefSpan)
  size_t total_size = 0;

  if (has_trace_id()) {
    // required uint64 trace_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());
  }

  if (has_span_id()) {
    // required uint64 span_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->span_id());
  }

  return total_size;
}
size_t BriefSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.BriefSpan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint64 trace_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());

    // required uint64 span_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->span_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes full_method_name = 10;
  if (has_full_method_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->full_method_name());
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional uint64 log_id = 3;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

    // optional .brpc.SpanType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 error_code = 5;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 request_size = 6;
    if (has_request_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_size());
    }

    // optional int32 response_size = 7;
    if (has_response_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_size());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int64 start_real_us = 8;
    if (has_start_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_real_us());
    }

    // optional int64 latency_us = 9;
    if (has_latency_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->latency_us());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BriefSpan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.BriefSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const BriefSpan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BriefSpan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.BriefSpan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.BriefSpan)
    MergeFrom(*source);
  }
}

void BriefSpan::MergeFrom(const BriefSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.BriefSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_full_method_name();
      full_method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_method_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      trace_id_ = from.trace_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      span_id_ = from.span_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      log_id_ = from.log_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000040u) {
      request_size_ = from.request_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      response_size_ = from.response_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      start_real_us_ = from.start_real_us_;
    }
    if (cached_has_bits & 0x00000200u) {
      latency_us_ = from.latency_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BriefSpan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.BriefSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BriefSpan::CopyFrom(const BriefSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.BriefSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BriefSpan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void BriefSpan::Swap(BriefSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BriefSpan::InternalSwap(BriefSpan* other) {
  using std::swap;
  full_method_name_.Swap(&other->full_method_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trace_id_, other->trace_id_);
  swap(span_id_, other->span_id_);
  swap(log_id_, other->log_id_);
  swap(type_, other->type_);
  swap(error_code_, other->error_code_);
  swap(request_size_, other->request_size_);
  swap(response_size_, other->response_size_);
  swap(start_real_us_, other->start_real_us_);
  swap(latency_us_, other->latency_us_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BriefSpan::GetMetadata() const {
  protobuf_brpc_2fspan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fspan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpanAnnotation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpanAnnotation::kRealtimeUsFieldNumber;
const int SpanAnnotation::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpanAnnotation::SpanAnnotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fspan_2eproto::scc_info_SpanAnnotation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.SpanAnnotation)
}
SpanAnnotation::SpanAnnotation(const SpanAnnotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  realtime_us_ = from.realtime_us_;
  // @@protoc_insertion_point(copy_constructor:brpc.SpanAnnotation)
}

void SpanAnnotation::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realtime_us_ = GOOGLE_LONGLONG(0);
}

SpanAnnotation::~SpanAnnotation() {
  // @@protoc_insertion_point(destructor:brpc.SpanAnnotation)
  SharedDtor();
}

void SpanAnnotation::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpanAnnotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpanAnnotation::descriptor() {
  ::protobuf_brpc_2fspan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fspan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpanAnnotation& SpanAnnotation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fspan_2eproto::scc_info_SpanAnnotation.base);
  return *internal_default_instance();
}


void SpanAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.SpanAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmptyNoArena();
  }
  realtime_us_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpanAnnotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.SpanAnnotation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 realtime_us = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_realtime_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realtime_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.SpanAnnotation.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.SpanAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.SpanAnnotation)
  return false;
#undef DO_
}

void SpanAnnotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.SpanAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 realtime_us = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->realtime_us(), output);
  }

  // required string content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.SpanAnnotation.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.SpanAnnotation)
}

::google::protobuf::uint8* SpanAnnotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.SpanAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 realtime_us = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->realtime_us(), target);
  }

  // required string content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.SpanAnnotation.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.SpanAnnotation)
  return target;
}

size_t SpanAnnotation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.SpanAnnotation)
  size_t total_size = 0;

  if (has_content()) {
    // required string content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  if (has_realtime_us()) {
    // required int64 realtime_us = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realtime_us());
  }

  return total_size;
}
size_t SpanAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.SpanAnnotation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());

    // required int64 realtime_us = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realtime_us());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanAnnotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.SpanAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanAnnotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpanAnnotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.SpanAnnotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.SpanAnnotation)
    MergeFrom(*source);
  }
}

void SpanAnnotation::MergeFrom(const SpanAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.SpanAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      realtime_us_ = from.realtime_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpanAnnotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.SpanAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanAnnotation::CopyFrom(const SpanAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.SpanAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanAnnotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SpanAnnotation::Swap(SpanAnnotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpanAnnotation::InternalSwap(SpanAnnotation* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(realtime_us_, other->realtime_us_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpanAnnotation::GetMetadata() const {
  protobuf_brpc_2fspan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fspan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TracingSpan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TracingSpan::kTraceIdFieldNumber;
const int TracingSpan::kSpanIdFieldNumber;
const int TracingSpan::kParentSpanIdFieldNumber;
const int TracingSpan::kLogIdFieldNumber;
const int TracingSpan::kRemoteIpFieldNumber;
const int TracingSpan::kRemotePortFieldNumber;
const int TracingSpan::kTypeFieldNumber;
const int TracingSpan::kProtocolFieldNumber;
const int TracingSpan::kErrorCodeFieldNumber;
const int TracingSpan::kRequestSizeFieldNumber;
const int TracingSpan::kResponseSizeFieldNumber;
const int TracingSpan::kReceivedRealUsFieldNumber;
const int TracingSpan::kStartParseRealUsFieldNumber;
const int TracingSpan::kStartCallbackRealUsFieldNumber;
const int TracingSpan::kStartSendRealUsFieldNumber;
const int TracingSpan::kSentRealUsFieldNumber;
const int TracingSpan::kSpanNameFieldNumber;
const int TracingSpan::kAnnotationsFieldNumber;
const int TracingSpan::kClientSpansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TracingSpan::TracingSpan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fspan_2eproto::scc_info_TracingSpan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.TracingSpan)
}
TracingSpan::TracingSpan(const TracingSpan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      annotations_(from.annotations_),
      client_spans_(from.client_spans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  span_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_span_name()) {
    span_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_name_);
  }
  ::memcpy(&trace_id_, &from.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_size_) -
    reinterpret_cast<char*>(&trace_id_)) + sizeof(response_size_));
  // @@protoc_insertion_point(copy_constructor:brpc.TracingSpan)
}

void TracingSpan::SharedCtor() {
  span_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trace_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_size_) -
      reinterpret_cast<char*>(&trace_id_)) + sizeof(response_size_));
}

TracingSpan::~TracingSpan() {
  // @@protoc_insertion_point(destructor:brpc.TracingSpan)
  SharedDtor();
}

void TracingSpan::SharedDtor() {
  span_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TracingSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TracingSpan::descriptor() {
  ::protobuf_brpc_2fspan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fspan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TracingSpan& TracingSpan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fspan_2eproto::scc_info_TracingSpan.base);
  return *internal_default_instance();
}


void TracingSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.TracingSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  client_spans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    span_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&trace_id_)) + sizeof(type_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&protocol_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sent_real_us_) -
        reinterpret_cast<char*>(&protocol_)) + sizeof(sent_real_us_));
  }
  response_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TracingSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.TracingSpan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 trace_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trace_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 span_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 parent_span_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_parent_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 log_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_log_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_remote_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_remote_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.SpanType type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::SpanType_IsValid(value)) {
            set_type(static_cast< ::brpc::SpanType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.ProtocolType protocol = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::ProtocolType_IsValid(value)) {
            set_protocol(static_cast< ::brpc::ProtocolType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 error_code = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 request_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_request_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 response_size = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_response_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 received_real_us = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_received_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &received_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_parse_real_us = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_start_parse_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_parse_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_callback_real_us = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_start_callback_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_callback_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_send_real_us = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_start_send_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_send_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sent_real_us = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_sent_real_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sent_real_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string span_name = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_span_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->span_name().data(), static_cast<int>(this->span_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.TracingSpan.span_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .brpc.SpanAnnotation annotations = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .brpc.TracingSpan client_spans = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_client_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.TracingSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.TracingSpan)
  return false;
#undef DO_
}

void TracingSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.TracingSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trace_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trace_id(), output);
  }

  // required uint64 span_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->span_id(), output);
  }

  // required uint64 parent_span_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->parent_span_id(), output);
  }

  // optional uint64 log_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->log_id(), output);
  }

  // optional uint32 remote_ip = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->remote_ip(), output);
  }

  // optional uint32 remote_port = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remote_port(), output);
  }

  // optional .brpc.SpanType type = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional .brpc.ProtocolType protocol = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->protocol(), output);
  }

  // optional int32 error_code = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->error_code(), output);
  }

  // optional int32 request_size = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->request_size(), output);
  }

  // optional int32 response_size = 11;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->response_size(), output);
  }

  // optional int64 received_real_us = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->received_real_us(), output);
  }

  // optional int64 start_parse_real_us = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->start_parse_real_us(), output);
  }

  // optional int64 start_callback_real_us = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->start_callback_real_us(), output);
  }

  // optional int64 start_send_real_us = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->start_send_real_us(), output);
  }

  // optional int64 sent_real_us = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->sent_real_us(), output);
  }

  // optional string span_name = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->span_name().data(), static_cast<int>(this->span_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.TracingSpan.span_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->span_name(), output);
  }

  // repeated .brpc.SpanAnnotation annotations = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->annotations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->annotations(static_cast<int>(i)),
      output);
  }

  // repeated .brpc.TracingSpan client_spans = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->client_spans(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.TracingSpan)
}

::google::protobuf::uint8* TracingSpan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.TracingSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trace_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trace_id(), target);
  }

  // required uint64 span_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->span_id(), target);
  }

  // required uint64 parent_span_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->parent_span_id(), target);
  }

  // optional uint64 log_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->log_id(), target);
  }

  // optional uint32 remote_ip = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->remote_ip(), target);
  }

  // optional uint32 remote_port = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remote_port(), target);
  }

  // optional .brpc.SpanType type = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional .brpc.ProtocolType protocol = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->protocol(), target);
  }

  // optional int32 error_code = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->error_code(), target);
  }

  // optional int32 request_size = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->request_size(), target);
  }

  // optional int32 response_size = 11;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->response_size(), target);
  }

  // optional int64 received_real_us = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->received_real_us(), target);
  }

  // optional int64 start_parse_real_us = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->start_parse_real_us(), target);
  }

  // optional int64 start_callback_real_us = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->start_callback_real_us(), target);
  }

  // optional int64 start_send_real_us = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->start_send_real_us(), target);
  }

  // optional int64 sent_real_us = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->sent_real_us(), target);
  }

  // optional string span_name = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->span_name().data(), static_cast<int>(this->span_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.TracingSpan.span_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->span_name(), target);
  }

  // repeated .brpc.SpanAnnotation annotations = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->annotations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->annotations(static_cast<int>(i)), deterministic, target);
  }

  // repeated .brpc.TracingSpan client_spans = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_spans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->client_spans(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.TracingSpan)
  return target;
}

size_t TracingSpan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:brpc.TracingSpan)
  size_t total_size = 0;

  if (has_trace_id()) {
    // required uint64 trace_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());
  }

  if (has_span_id()) {
    // required uint64 span_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->span_id());
  }

  if (has_parent_span_id()) {
    // required uint64 parent_span_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parent_span_id());
  }

  return total_size;
}
size_t TracingSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.TracingSpan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint64 trace_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());

    // required uint64 span_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->span_id());

    // required uint64 parent_span_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->parent_span_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .brpc.SpanAnnotation annotations = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->annotations_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->annotations(static_cast<int>(i)));
    }
  }

  // repeated .brpc.TracingSpan client_spans = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->client_spans_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->client_spans(static_cast<int>(i)));
    }
  }

  // optional string span_name = 17;
  if (has_span_name()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->span_name());
  }

  if (_has_bits_[0 / 32] & 240u) {
    // optional uint64 log_id = 4;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

    // optional uint32 remote_ip = 5;
    if (has_remote_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ip());
    }

    // optional uint32 remote_port = 6;
    if (has_remote_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_port());
    }

    // optional .brpc.SpanType type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .brpc.ProtocolType protocol = 8;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

    // optional int32 error_code = 9;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 request_size = 10;
    if (has_request_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_size());
    }

    // optional int64 received_real_us = 12;
    if (has_received_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->received_real_us());
    }

    // optional int64 start_parse_real_us = 13;
    if (has_start_parse_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_parse_real_us());
    }

    // optional int64 start_callback_real_us = 14;
    if (has_start_callback_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_callback_real_us());
    }

    // optional int64 start_send_real_us = 15;
    if (has_start_send_real_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_send_real_us());
    }

    // optional int64 sent_real_us = 16;
    if (has_sent_real_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sent_real_us());
    }

  }
  // optional int32 response_size = 11;
  if (has_response_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->response_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingSpan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.TracingSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const TracingSpan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TracingSpan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.TracingSpan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.TracingSpan)
    MergeFrom(*source);
  }
}

void TracingSpan::MergeFrom(const TracingSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.TracingSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  client_spans_.MergeFrom(from.client_spans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_span_name();
      span_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      trace_id_ = from.trace_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      span_id_ = from.span_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      parent_span_id_ = from.parent_span_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      log_id_ = from.log_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      remote_ip_ = from.remote_ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      remote_port_ = from.remote_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      protocol_ = from.protocol_;
    }
    if (cached_has_bits & 0x00000200u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000400u) {
      request_size_ = from.request_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      received_real_us_ = from.received_real_us_;
    }
    if (cached_has_bits & 0x00001000u) {
      start_parse_real_us_ = from.start_parse_real_us_;
    }
    if (cached_has_bits & 0x00002000u) {
      start_callback_real_us_ = from.start_callback_real_us_;
    }
    if (cached_has_bits & 0x00004000u) {
      start_send_real_us_ = from.start_send_real_us_;
    }
    if (cached_has_bits & 0x00008000u) {
      sent_real_us_ = from.sent_real_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_response_size(from.response_size());
  }
}

void TracingSpan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.TracingSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracingSpan::CopyFrom(const TracingSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.TracingSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingSpan::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->annotations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->client_spans())) return false;
  return true;
}

void TracingSpan::Swap(TracingSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TracingSpan::InternalSwap(TracingSpan* other) {
  using std::swap;
  CastToBase(&annotations_)->InternalSwap(CastToBase(&other->annotations_));
  CastToBase(&client_spans_)->InternalSwap(CastToBase(&other->client_spans_));
  span_name_.Swap(&other->span_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trace_id_, other->trace_id_);
  swap(span_id_, other->span_id_);
  swap(parent_span_id_, other->parent_span_id_);
  swap(log_id_, other->log_id_);
  swap(remote_ip_, other->remote_ip_);
  swap(remote_port_, other->remote_port_);
  swap(type_, other->type_);
  swap(protocol_, other->protocol_);
  swap(error_code_, other->error_code_);
  swap(request_size_, other->request_size_);
  swap(received_real_us_, other->received_real_us_);
  swap(start_parse_real_us_, other->start_parse_real_us_);
  swap(start_callback_real_us_, other->start_callback_real_us_);
  swap(start_send_real_us_, other->start_send_real_us_);
  swap(sent_real_us_, other->sent_real_us_);
  swap(response_size_, other->response_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TracingSpan::GetMetadata() const {
  protobuf_brpc_2fspan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fspan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::RpczSpan* Arena::CreateMaybeMessage< ::brpc::RpczSpan >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::RpczSpan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::BriefSpan* Arena::CreateMaybeMessage< ::brpc::BriefSpan >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::BriefSpan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::SpanAnnotation* Arena::CreateMaybeMessage< ::brpc::SpanAnnotation >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::SpanAnnotation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::TracingSpan* Arena::CreateMaybeMessage< ::brpc::TracingSpan >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::TracingSpan >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

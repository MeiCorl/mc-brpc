// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/streaming_rpc_meta.proto

#ifndef PROTOBUF_INCLUDED_brpc_2fstreaming_5frpc_5fmeta_2eproto
#define PROTOBUF_INCLUDED_brpc_2fstreaming_5frpc_5fmeta_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto 

namespace protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto
namespace brpc {
class Feedback;
class FeedbackDefaultTypeInternal;
extern FeedbackDefaultTypeInternal _Feedback_default_instance_;
class StreamFrameMeta;
class StreamFrameMetaDefaultTypeInternal;
extern StreamFrameMetaDefaultTypeInternal _StreamFrameMeta_default_instance_;
class StreamSettings;
class StreamSettingsDefaultTypeInternal;
extern StreamSettingsDefaultTypeInternal _StreamSettings_default_instance_;
}  // namespace brpc
namespace google {
namespace protobuf {
template<> ::brpc::Feedback* Arena::CreateMaybeMessage<::brpc::Feedback>(Arena*);
template<> ::brpc::StreamFrameMeta* Arena::CreateMaybeMessage<::brpc::StreamFrameMeta>(Arena*);
template<> ::brpc::StreamSettings* Arena::CreateMaybeMessage<::brpc::StreamSettings>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace brpc {

enum FrameType {
  FRAME_TYPE_UNKNOWN = 0,
  FRAME_TYPE_RST = 1,
  FRAME_TYPE_CLOSE = 2,
  FRAME_TYPE_DATA = 3,
  FRAME_TYPE_FEEDBACK = 4
};
bool FrameType_IsValid(int value);
const FrameType FrameType_MIN = FRAME_TYPE_UNKNOWN;
const FrameType FrameType_MAX = FRAME_TYPE_FEEDBACK;
const int FrameType_ARRAYSIZE = FrameType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrameType_descriptor();
inline const ::std::string& FrameType_Name(FrameType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameType_descriptor(), value);
}
inline bool FrameType_Parse(
    const ::std::string& name, FrameType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameType>(
    FrameType_descriptor(), name, value);
}
// ===================================================================

class StreamSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.StreamSettings) */ {
 public:
  StreamSettings();
  virtual ~StreamSettings();

  StreamSettings(const StreamSettings& from);

  inline StreamSettings& operator=(const StreamSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamSettings(StreamSettings&& from) noexcept
    : StreamSettings() {
    *this = ::std::move(from);
  }

  inline StreamSettings& operator=(StreamSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamSettings* internal_default_instance() {
    return reinterpret_cast<const StreamSettings*>(
               &_StreamSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StreamSettings* other);
  friend void swap(StreamSettings& a, StreamSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamSettings* New() const final {
    return CreateMaybeMessage<StreamSettings>(NULL);
  }

  StreamSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamSettings& from);
  void MergeFrom(const StreamSettings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::int64 stream_id() const;
  void set_stream_id(::google::protobuf::int64 value);

  // optional bool need_feedback = 2 [default = false];
  bool has_need_feedback() const;
  void clear_need_feedback();
  static const int kNeedFeedbackFieldNumber = 2;
  bool need_feedback() const;
  void set_need_feedback(bool value);

  // optional bool writable = 3 [default = false];
  bool has_writable() const;
  void clear_writable();
  static const int kWritableFieldNumber = 3;
  bool writable() const;
  void set_writable(bool value);

  // @@protoc_insertion_point(class_scope:brpc.StreamSettings)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_need_feedback();
  void clear_has_need_feedback();
  void set_has_writable();
  void clear_has_writable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 stream_id_;
  bool need_feedback_;
  bool writable_;
  friend struct ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamFrameMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.StreamFrameMeta) */ {
 public:
  StreamFrameMeta();
  virtual ~StreamFrameMeta();

  StreamFrameMeta(const StreamFrameMeta& from);

  inline StreamFrameMeta& operator=(const StreamFrameMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamFrameMeta(StreamFrameMeta&& from) noexcept
    : StreamFrameMeta() {
    *this = ::std::move(from);
  }

  inline StreamFrameMeta& operator=(StreamFrameMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamFrameMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamFrameMeta* internal_default_instance() {
    return reinterpret_cast<const StreamFrameMeta*>(
               &_StreamFrameMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StreamFrameMeta* other);
  friend void swap(StreamFrameMeta& a, StreamFrameMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamFrameMeta* New() const final {
    return CreateMaybeMessage<StreamFrameMeta>(NULL);
  }

  StreamFrameMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamFrameMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamFrameMeta& from);
  void MergeFrom(const StreamFrameMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamFrameMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .brpc.Feedback feedback = 5;
  bool has_feedback() const;
  void clear_feedback();
  static const int kFeedbackFieldNumber = 5;
  private:
  const ::brpc::Feedback& _internal_feedback() const;
  public:
  const ::brpc::Feedback& feedback() const;
  ::brpc::Feedback* release_feedback();
  ::brpc::Feedback* mutable_feedback();
  void set_allocated_feedback(::brpc::Feedback* feedback);

  // required int64 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  ::google::protobuf::int64 stream_id() const;
  void set_stream_id(::google::protobuf::int64 value);

  // optional int64 source_stream_id = 2;
  bool has_source_stream_id() const;
  void clear_source_stream_id();
  static const int kSourceStreamIdFieldNumber = 2;
  ::google::protobuf::int64 source_stream_id() const;
  void set_source_stream_id(::google::protobuf::int64 value);

  // optional .brpc.FrameType frame_type = 3;
  bool has_frame_type() const;
  void clear_frame_type();
  static const int kFrameTypeFieldNumber = 3;
  ::brpc::FrameType frame_type() const;
  void set_frame_type(::brpc::FrameType value);

  // optional bool has_continuation = 4;
  bool has_has_continuation() const;
  void clear_has_continuation();
  static const int kHasContinuationFieldNumber = 4;
  bool has_continuation() const;
  void set_has_continuation(bool value);

  // @@protoc_insertion_point(class_scope:brpc.StreamFrameMeta)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_source_stream_id();
  void clear_has_source_stream_id();
  void set_has_frame_type();
  void clear_has_frame_type();
  void set_has_has_continuation();
  void clear_has_has_continuation();
  void set_has_feedback();
  void clear_has_feedback();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::brpc::Feedback* feedback_;
  ::google::protobuf::int64 stream_id_;
  ::google::protobuf::int64 source_stream_id_;
  int frame_type_;
  bool has_continuation_;
  friend struct ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Feedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brpc.Feedback) */ {
 public:
  Feedback();
  virtual ~Feedback();

  Feedback(const Feedback& from);

  inline Feedback& operator=(const Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Feedback(Feedback&& from) noexcept
    : Feedback() {
    *this = ::std::move(from);
  }

  inline Feedback& operator=(Feedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feedback* internal_default_instance() {
    return reinterpret_cast<const Feedback*>(
               &_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Feedback* other);
  friend void swap(Feedback& a, Feedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Feedback* New() const final {
    return CreateMaybeMessage<Feedback>(NULL);
  }

  Feedback* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Feedback>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Feedback& from);
  void MergeFrom(const Feedback& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 consumed_size = 1;
  bool has_consumed_size() const;
  void clear_consumed_size();
  static const int kConsumedSizeFieldNumber = 1;
  ::google::protobuf::int64 consumed_size() const;
  void set_consumed_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:brpc.Feedback)
 private:
  void set_has_consumed_size();
  void clear_has_consumed_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 consumed_size_;
  friend struct ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamSettings

// required int64 stream_id = 1;
inline bool StreamSettings::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSettings::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSettings::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSettings::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  clear_has_stream_id();
}
inline ::google::protobuf::int64 StreamSettings::stream_id() const {
  // @@protoc_insertion_point(field_get:brpc.StreamSettings.stream_id)
  return stream_id_;
}
inline void StreamSettings::set_stream_id(::google::protobuf::int64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamSettings.stream_id)
}

// optional bool need_feedback = 2 [default = false];
inline bool StreamSettings::has_need_feedback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamSettings::set_has_need_feedback() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamSettings::clear_has_need_feedback() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamSettings::clear_need_feedback() {
  need_feedback_ = false;
  clear_has_need_feedback();
}
inline bool StreamSettings::need_feedback() const {
  // @@protoc_insertion_point(field_get:brpc.StreamSettings.need_feedback)
  return need_feedback_;
}
inline void StreamSettings::set_need_feedback(bool value) {
  set_has_need_feedback();
  need_feedback_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamSettings.need_feedback)
}

// optional bool writable = 3 [default = false];
inline bool StreamSettings::has_writable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamSettings::set_has_writable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamSettings::clear_has_writable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamSettings::clear_writable() {
  writable_ = false;
  clear_has_writable();
}
inline bool StreamSettings::writable() const {
  // @@protoc_insertion_point(field_get:brpc.StreamSettings.writable)
  return writable_;
}
inline void StreamSettings::set_writable(bool value) {
  set_has_writable();
  writable_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamSettings.writable)
}

// -------------------------------------------------------------------

// StreamFrameMeta

// required int64 stream_id = 1;
inline bool StreamFrameMeta::has_stream_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamFrameMeta::set_has_stream_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamFrameMeta::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamFrameMeta::clear_stream_id() {
  stream_id_ = GOOGLE_LONGLONG(0);
  clear_has_stream_id();
}
inline ::google::protobuf::int64 StreamFrameMeta::stream_id() const {
  // @@protoc_insertion_point(field_get:brpc.StreamFrameMeta.stream_id)
  return stream_id_;
}
inline void StreamFrameMeta::set_stream_id(::google::protobuf::int64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamFrameMeta.stream_id)
}

// optional int64 source_stream_id = 2;
inline bool StreamFrameMeta::has_source_stream_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamFrameMeta::set_has_source_stream_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamFrameMeta::clear_has_source_stream_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamFrameMeta::clear_source_stream_id() {
  source_stream_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_stream_id();
}
inline ::google::protobuf::int64 StreamFrameMeta::source_stream_id() const {
  // @@protoc_insertion_point(field_get:brpc.StreamFrameMeta.source_stream_id)
  return source_stream_id_;
}
inline void StreamFrameMeta::set_source_stream_id(::google::protobuf::int64 value) {
  set_has_source_stream_id();
  source_stream_id_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamFrameMeta.source_stream_id)
}

// optional .brpc.FrameType frame_type = 3;
inline bool StreamFrameMeta::has_frame_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamFrameMeta::set_has_frame_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamFrameMeta::clear_has_frame_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamFrameMeta::clear_frame_type() {
  frame_type_ = 0;
  clear_has_frame_type();
}
inline ::brpc::FrameType StreamFrameMeta::frame_type() const {
  // @@protoc_insertion_point(field_get:brpc.StreamFrameMeta.frame_type)
  return static_cast< ::brpc::FrameType >(frame_type_);
}
inline void StreamFrameMeta::set_frame_type(::brpc::FrameType value) {
  assert(::brpc::FrameType_IsValid(value));
  set_has_frame_type();
  frame_type_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamFrameMeta.frame_type)
}

// optional bool has_continuation = 4;
inline bool StreamFrameMeta::has_has_continuation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreamFrameMeta::set_has_has_continuation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreamFrameMeta::clear_has_has_continuation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreamFrameMeta::clear_has_continuation() {
  has_continuation_ = false;
  clear_has_has_continuation();
}
inline bool StreamFrameMeta::has_continuation() const {
  // @@protoc_insertion_point(field_get:brpc.StreamFrameMeta.has_continuation)
  return has_continuation_;
}
inline void StreamFrameMeta::set_has_continuation(bool value) {
  set_has_has_continuation();
  has_continuation_ = value;
  // @@protoc_insertion_point(field_set:brpc.StreamFrameMeta.has_continuation)
}

// optional .brpc.Feedback feedback = 5;
inline bool StreamFrameMeta::has_feedback() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamFrameMeta::set_has_feedback() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamFrameMeta::clear_has_feedback() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamFrameMeta::clear_feedback() {
  if (feedback_ != NULL) feedback_->Clear();
  clear_has_feedback();
}
inline const ::brpc::Feedback& StreamFrameMeta::_internal_feedback() const {
  return *feedback_;
}
inline const ::brpc::Feedback& StreamFrameMeta::feedback() const {
  const ::brpc::Feedback* p = feedback_;
  // @@protoc_insertion_point(field_get:brpc.StreamFrameMeta.feedback)
  return p != NULL ? *p : *reinterpret_cast<const ::brpc::Feedback*>(
      &::brpc::_Feedback_default_instance_);
}
inline ::brpc::Feedback* StreamFrameMeta::release_feedback() {
  // @@protoc_insertion_point(field_release:brpc.StreamFrameMeta.feedback)
  clear_has_feedback();
  ::brpc::Feedback* temp = feedback_;
  feedback_ = NULL;
  return temp;
}
inline ::brpc::Feedback* StreamFrameMeta::mutable_feedback() {
  set_has_feedback();
  if (feedback_ == NULL) {
    auto* p = CreateMaybeMessage<::brpc::Feedback>(GetArenaNoVirtual());
    feedback_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brpc.StreamFrameMeta.feedback)
  return feedback_;
}
inline void StreamFrameMeta::set_allocated_feedback(::brpc::Feedback* feedback) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete feedback_;
  }
  if (feedback) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      feedback = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, feedback, submessage_arena);
    }
    set_has_feedback();
  } else {
    clear_has_feedback();
  }
  feedback_ = feedback;
  // @@protoc_insertion_point(field_set_allocated:brpc.StreamFrameMeta.feedback)
}

// -------------------------------------------------------------------

// Feedback

// optional int64 consumed_size = 1;
inline bool Feedback::has_consumed_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Feedback::set_has_consumed_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Feedback::clear_has_consumed_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Feedback::clear_consumed_size() {
  consumed_size_ = GOOGLE_LONGLONG(0);
  clear_has_consumed_size();
}
inline ::google::protobuf::int64 Feedback::consumed_size() const {
  // @@protoc_insertion_point(field_get:brpc.Feedback.consumed_size)
  return consumed_size_;
}
inline void Feedback::set_consumed_size(::google::protobuf::int64 value) {
  set_has_consumed_size();
  consumed_size_ = value;
  // @@protoc_insertion_point(field_set:brpc.Feedback.consumed_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::brpc::FrameType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::brpc::FrameType>() {
  return ::brpc::FrameType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_brpc_2fstreaming_5frpc_5fmeta_2eproto

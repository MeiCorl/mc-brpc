// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/streaming_rpc_meta.proto

#include "brpc/streaming_rpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Feedback;
}  // namespace protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto
namespace brpc {
class StreamSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamSettings>
      _instance;
} _StreamSettings_default_instance_;
class StreamFrameMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamFrameMeta>
      _instance;
} _StreamFrameMeta_default_instance_;
class FeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Feedback>
      _instance;
} _Feedback_default_instance_;
}  // namespace brpc
namespace protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto {
static void InitDefaultsStreamSettings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::_StreamSettings_default_instance_;
    new (ptr) ::brpc::StreamSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::StreamSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StreamSettings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStreamSettings}, {}};

static void InitDefaultsStreamFrameMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::_StreamFrameMeta_default_instance_;
    new (ptr) ::brpc::StreamFrameMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::StreamFrameMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamFrameMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamFrameMeta}, {
      &protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::scc_info_Feedback.base,}};

static void InitDefaultsFeedback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::_Feedback_default_instance_;
    new (ptr) ::brpc::Feedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::Feedback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Feedback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFeedback}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StreamSettings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamFrameMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Feedback.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamSettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamSettings, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamSettings, need_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamSettings, writable_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamFrameMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamFrameMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamFrameMeta, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamFrameMeta, source_stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamFrameMeta, frame_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamFrameMeta, has_continuation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::StreamFrameMeta, feedback_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::Feedback, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::Feedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::Feedback, consumed_size_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::brpc::StreamSettings)},
  { 11, 21, sizeof(::brpc::StreamFrameMeta)},
  { 26, 32, sizeof(::brpc::Feedback)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::_StreamSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::_StreamFrameMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::_Feedback_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "brpc/streaming_rpc_meta.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035brpc/streaming_rpc_meta.proto\022\004brpc\"Z\n"
      "\016StreamSettings\022\021\n\tstream_id\030\001 \002(\003\022\034\n\rne"
      "ed_feedback\030\002 \001(\010:\005false\022\027\n\010writable\030\003 \001"
      "(\010:\005false\"\237\001\n\017StreamFrameMeta\022\021\n\tstream_"
      "id\030\001 \002(\003\022\030\n\020source_stream_id\030\002 \001(\003\022#\n\nfr"
      "ame_type\030\003 \001(\0162\017.brpc.FrameType\022\030\n\020has_c"
      "ontinuation\030\004 \001(\010\022 \n\010feedback\030\005 \001(\0132\016.br"
      "pc.Feedback\"!\n\010Feedback\022\025\n\rconsumed_size"
      "\030\001 \001(\003*{\n\tFrameType\022\026\n\022FRAME_TYPE_UNKNOW"
      "N\020\000\022\022\n\016FRAME_TYPE_RST\020\001\022\024\n\020FRAME_TYPE_CL"
      "OSE\020\002\022\023\n\017FRAME_TYPE_DATA\020\003\022\027\n\023FRAME_TYPE"
      "_FEEDBACK\020\004B\035\n\010com.brpcB\021StreamingRpcPro"
      "to"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/streaming_rpc_meta.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto
namespace brpc {
const ::google::protobuf::EnumDescriptor* FrameType_descriptor() {
  protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::file_level_enum_descriptors[0];
}
bool FrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StreamSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSettings::kStreamIdFieldNumber;
const int StreamSettings::kNeedFeedbackFieldNumber;
const int StreamSettings::kWritableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSettings::StreamSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::scc_info_StreamSettings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.StreamSettings)
}
StreamSettings::StreamSettings(const StreamSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&writable_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(writable_));
  // @@protoc_insertion_point(copy_constructor:brpc.StreamSettings)
}

void StreamSettings::SharedCtor() {
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&writable_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(writable_));
}

StreamSettings::~StreamSettings() {
  // @@protoc_insertion_point(destructor:brpc.StreamSettings)
  SharedDtor();
}

void StreamSettings::SharedDtor() {
}

void StreamSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StreamSettings::descriptor() {
  ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamSettings& StreamSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::scc_info_StreamSettings.base);
  return *internal_default_instance();
}


void StreamSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.StreamSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&writable_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(writable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StreamSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.StreamSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 stream_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stream_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_feedback = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_need_feedback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool writable = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_writable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.StreamSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.StreamSettings)
  return false;
#undef DO_
}

void StreamSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.StreamSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }

  // optional bool need_feedback = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->need_feedback(), output);
  }

  // optional bool writable = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->writable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.StreamSettings)
}

::google::protobuf::uint8* StreamSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.StreamSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }

  // optional bool need_feedback = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->need_feedback(), target);
  }

  // optional bool writable = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->writable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.StreamSettings)
  return target;
}

size_t StreamSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.StreamSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 stream_id = 1;
  if (has_stream_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stream_id());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional bool need_feedback = 2 [default = false];
    if (has_need_feedback()) {
      total_size += 1 + 1;
    }

    // optional bool writable = 3 [default = false];
    if (has_writable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.StreamSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.StreamSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.StreamSettings)
    MergeFrom(*source);
  }
}

void StreamSettings::MergeFrom(const StreamSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.StreamSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      need_feedback_ = from.need_feedback_;
    }
    if (cached_has_bits & 0x00000004u) {
      writable_ = from.writable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.StreamSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSettings::CopyFrom(const StreamSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.StreamSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StreamSettings::Swap(StreamSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamSettings::InternalSwap(StreamSettings* other) {
  using std::swap;
  swap(stream_id_, other->stream_id_);
  swap(need_feedback_, other->need_feedback_);
  swap(writable_, other->writable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StreamSettings::GetMetadata() const {
  protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamFrameMeta::InitAsDefaultInstance() {
  ::brpc::_StreamFrameMeta_default_instance_._instance.get_mutable()->feedback_ = const_cast< ::brpc::Feedback*>(
      ::brpc::Feedback::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamFrameMeta::kStreamIdFieldNumber;
const int StreamFrameMeta::kSourceStreamIdFieldNumber;
const int StreamFrameMeta::kFrameTypeFieldNumber;
const int StreamFrameMeta::kHasContinuationFieldNumber;
const int StreamFrameMeta::kFeedbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamFrameMeta::StreamFrameMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::scc_info_StreamFrameMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.StreamFrameMeta)
}
StreamFrameMeta::StreamFrameMeta(const StreamFrameMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_feedback()) {
    feedback_ = new ::brpc::Feedback(*from.feedback_);
  } else {
    feedback_ = NULL;
  }
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_continuation_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(has_continuation_));
  // @@protoc_insertion_point(copy_constructor:brpc.StreamFrameMeta)
}

void StreamFrameMeta::SharedCtor() {
  ::memset(&feedback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_continuation_) -
      reinterpret_cast<char*>(&feedback_)) + sizeof(has_continuation_));
}

StreamFrameMeta::~StreamFrameMeta() {
  // @@protoc_insertion_point(destructor:brpc.StreamFrameMeta)
  SharedDtor();
}

void StreamFrameMeta::SharedDtor() {
  if (this != internal_default_instance()) delete feedback_;
}

void StreamFrameMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StreamFrameMeta::descriptor() {
  ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamFrameMeta& StreamFrameMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::scc_info_StreamFrameMeta.base);
  return *internal_default_instance();
}


void StreamFrameMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.StreamFrameMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(feedback_ != NULL);
    feedback_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_continuation_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(has_continuation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StreamFrameMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.StreamFrameMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 stream_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stream_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stream_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 source_stream_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_source_stream_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_stream_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.FrameType frame_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::FrameType_IsValid(value)) {
            set_frame_type(static_cast< ::brpc::FrameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_continuation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_has_continuation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_continuation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.Feedback feedback = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feedback()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.StreamFrameMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.StreamFrameMeta)
  return false;
#undef DO_
}

void StreamFrameMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.StreamFrameMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 stream_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->stream_id(), output);
  }

  // optional int64 source_stream_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->source_stream_id(), output);
  }

  // optional .brpc.FrameType frame_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->frame_type(), output);
  }

  // optional bool has_continuation = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_continuation(), output);
  }

  // optional .brpc.Feedback feedback = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_feedback(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.StreamFrameMeta)
}

::google::protobuf::uint8* StreamFrameMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.StreamFrameMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 stream_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->stream_id(), target);
  }

  // optional int64 source_stream_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->source_stream_id(), target);
  }

  // optional .brpc.FrameType frame_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->frame_type(), target);
  }

  // optional bool has_continuation = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_continuation(), target);
  }

  // optional .brpc.Feedback feedback = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_feedback(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.StreamFrameMeta)
  return target;
}

size_t StreamFrameMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.StreamFrameMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 stream_id = 1;
  if (has_stream_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stream_id());
  }
  // optional .brpc.Feedback feedback = 5;
  if (has_feedback()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *feedback_);
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional int64 source_stream_id = 2;
    if (has_source_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_stream_id());
    }

    // optional .brpc.FrameType frame_type = 3;
    if (has_frame_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame_type());
    }

    // optional bool has_continuation = 4;
    if (has_has_continuation()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamFrameMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.StreamFrameMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamFrameMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamFrameMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.StreamFrameMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.StreamFrameMeta)
    MergeFrom(*source);
  }
}

void StreamFrameMeta::MergeFrom(const StreamFrameMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.StreamFrameMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_feedback()->::brpc::Feedback::MergeFrom(from.feedback());
    }
    if (cached_has_bits & 0x00000002u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_stream_id_ = from.source_stream_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_type_ = from.frame_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_continuation_ = from.has_continuation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamFrameMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.StreamFrameMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamFrameMeta::CopyFrom(const StreamFrameMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.StreamFrameMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamFrameMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void StreamFrameMeta::Swap(StreamFrameMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamFrameMeta::InternalSwap(StreamFrameMeta* other) {
  using std::swap;
  swap(feedback_, other->feedback_);
  swap(stream_id_, other->stream_id_);
  swap(source_stream_id_, other->source_stream_id_);
  swap(frame_type_, other->frame_type_);
  swap(has_continuation_, other->has_continuation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StreamFrameMeta::GetMetadata() const {
  protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Feedback::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feedback::kConsumedSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feedback::Feedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::scc_info_Feedback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.Feedback)
}
Feedback::Feedback(const Feedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  consumed_size_ = from.consumed_size_;
  // @@protoc_insertion_point(copy_constructor:brpc.Feedback)
}

void Feedback::SharedCtor() {
  consumed_size_ = GOOGLE_LONGLONG(0);
}

Feedback::~Feedback() {
  // @@protoc_insertion_point(destructor:brpc.Feedback)
  SharedDtor();
}

void Feedback::SharedDtor() {
}

void Feedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Feedback::descriptor() {
  ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Feedback& Feedback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::scc_info_Feedback.base);
  return *internal_default_instance();
}


void Feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consumed_size_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.Feedback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 consumed_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_consumed_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &consumed_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.Feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.Feedback)
  return false;
#undef DO_
}

void Feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 consumed_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->consumed_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.Feedback)
}

::google::protobuf::uint8* Feedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 consumed_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->consumed_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.Feedback)
  return target;
}

size_t Feedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.Feedback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int64 consumed_size = 1;
  if (has_consumed_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->consumed_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.Feedback)
  GOOGLE_DCHECK_NE(&from, this);
  const Feedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.Feedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.Feedback)
    MergeFrom(*source);
  }
}

void Feedback::MergeFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.Feedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_consumed_size()) {
    set_consumed_size(from.consumed_size());
  }
}

void Feedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feedback::CopyFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feedback::IsInitialized() const {
  return true;
}

void Feedback::Swap(Feedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feedback::InternalSwap(Feedback* other) {
  using std::swap;
  swap(consumed_size_, other->consumed_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Feedback::GetMetadata() const {
  protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fstreaming_5frpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::StreamSettings* Arena::CreateMaybeMessage< ::brpc::StreamSettings >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::StreamSettings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::StreamFrameMeta* Arena::CreateMaybeMessage< ::brpc::StreamFrameMeta >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::StreamFrameMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::Feedback* Arena::CreateMaybeMessage< ::brpc::Feedback >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::Feedback >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/nshead_meta.proto

#include "brpc/nshead_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace brpc {
class NsheadMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NsheadMeta>
      _instance;
} _NsheadMeta_default_instance_;
}  // namespace brpc
namespace protobuf_brpc_2fnshead_5fmeta_2eproto {
static void InitDefaultsNsheadMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::brpc::_NsheadMeta_default_instance_;
    new (ptr) ::brpc::NsheadMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brpc::NsheadMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NsheadMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNsheadMeta}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NsheadMeta.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, full_method_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, correlation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, log_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, attachment_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, compress_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, parent_span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::brpc::NsheadMeta, user_string_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::brpc::NsheadMeta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::brpc::_NsheadMeta_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "brpc/nshead_meta.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026brpc/nshead_meta.proto\022\004brpc\032\022brpc/opt"
      "ions.proto\"\342\001\n\nNsheadMeta\022\030\n\020full_method"
      "_name\030\001 \002(\t\022\026\n\016correlation_id\030\002 \001(\003\022\016\n\006l"
      "og_id\030\003 \001(\003\022\027\n\017attachment_size\030\004 \001(\005\022)\n\r"
      "compress_type\030\005 \001(\0162\022.brpc.CompressType\022"
      "\020\n\010trace_id\030\006 \001(\003\022\017\n\007span_id\030\007 \001(\003\022\026\n\016pa"
      "rent_span_id\030\010 \001(\003\022\023\n\013user_string\030\t \001(\014B"
      "\027\n\010com.brpcB\013NsheadProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brpc/nshead_meta.proto", &protobuf_RegisterTypes);
  ::protobuf_brpc_2foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_brpc_2fnshead_5fmeta_2eproto
namespace brpc {

// ===================================================================

void NsheadMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NsheadMeta::kFullMethodNameFieldNumber;
const int NsheadMeta::kCorrelationIdFieldNumber;
const int NsheadMeta::kLogIdFieldNumber;
const int NsheadMeta::kAttachmentSizeFieldNumber;
const int NsheadMeta::kCompressTypeFieldNumber;
const int NsheadMeta::kTraceIdFieldNumber;
const int NsheadMeta::kSpanIdFieldNumber;
const int NsheadMeta::kParentSpanIdFieldNumber;
const int NsheadMeta::kUserStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NsheadMeta::NsheadMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_brpc_2fnshead_5fmeta_2eproto::scc_info_NsheadMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:brpc.NsheadMeta)
}
NsheadMeta::NsheadMeta(const NsheadMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_method_name()) {
    full_method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_method_name_);
  }
  user_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_string()) {
    user_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_string_);
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_span_id_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(parent_span_id_));
  // @@protoc_insertion_point(copy_constructor:brpc.NsheadMeta)
}

void NsheadMeta::SharedCtor() {
  full_method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_span_id_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(parent_span_id_));
}

NsheadMeta::~NsheadMeta() {
  // @@protoc_insertion_point(destructor:brpc.NsheadMeta)
  SharedDtor();
}

void NsheadMeta::SharedDtor() {
  full_method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NsheadMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NsheadMeta::descriptor() {
  ::protobuf_brpc_2fnshead_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fnshead_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NsheadMeta& NsheadMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_brpc_2fnshead_5fmeta_2eproto::scc_info_NsheadMeta.base);
  return *internal_default_instance();
}


void NsheadMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:brpc.NsheadMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      full_method_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_string_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&correlation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&span_id_) -
        reinterpret_cast<char*>(&correlation_id_)) + sizeof(span_id_));
  }
  parent_span_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NsheadMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brpc.NsheadMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string full_method_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_method_name().data(), static_cast<int>(this->full_method_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brpc.NsheadMeta.full_method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 correlation_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_correlation_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &correlation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 log_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_log_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attachment_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_attachment_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brpc.CompressType compress_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brpc::CompressType_IsValid(value)) {
            set_compress_type(static_cast< ::brpc::CompressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trace_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_trace_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 span_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 parent_span_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_parent_span_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes user_string = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brpc.NsheadMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brpc.NsheadMeta)
  return false;
#undef DO_
}

void NsheadMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brpc.NsheadMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string full_method_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_method_name().data(), static_cast<int>(this->full_method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.NsheadMeta.full_method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_method_name(), output);
  }

  // optional int64 correlation_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->correlation_id(), output);
  }

  // optional int64 log_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->log_id(), output);
  }

  // optional int32 attachment_size = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attachment_size(), output);
  }

  // optional .brpc.CompressType compress_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->compress_type(), output);
  }

  // optional int64 trace_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->trace_id(), output);
  }

  // optional int64 span_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->span_id(), output);
  }

  // optional int64 parent_span_id = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->parent_span_id(), output);
  }

  // optional bytes user_string = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->user_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brpc.NsheadMeta)
}

::google::protobuf::uint8* NsheadMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:brpc.NsheadMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string full_method_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_method_name().data(), static_cast<int>(this->full_method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brpc.NsheadMeta.full_method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_method_name(), target);
  }

  // optional int64 correlation_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->correlation_id(), target);
  }

  // optional int64 log_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->log_id(), target);
  }

  // optional int32 attachment_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attachment_size(), target);
  }

  // optional .brpc.CompressType compress_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->compress_type(), target);
  }

  // optional int64 trace_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->trace_id(), target);
  }

  // optional int64 span_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->span_id(), target);
  }

  // optional int64 parent_span_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->parent_span_id(), target);
  }

  // optional bytes user_string = 9;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->user_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brpc.NsheadMeta)
  return target;
}

size_t NsheadMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brpc.NsheadMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string full_method_name = 1;
  if (has_full_method_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_method_name());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional bytes user_string = 9;
    if (has_user_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_string());
    }

    // optional int64 correlation_id = 2;
    if (has_correlation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->correlation_id());
    }

    // optional int64 log_id = 3;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_id());
    }

    // optional int32 attachment_size = 4;
    if (has_attachment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_size());
    }

    // optional .brpc.CompressType compress_type = 5;
    if (has_compress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compress_type());
    }

    // optional int64 trace_id = 6;
    if (has_trace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trace_id());
    }

    // optional int64 span_id = 7;
    if (has_span_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->span_id());
    }

  }
  // optional int64 parent_span_id = 8;
  if (has_parent_span_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parent_span_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NsheadMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brpc.NsheadMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const NsheadMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NsheadMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brpc.NsheadMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brpc.NsheadMeta)
    MergeFrom(*source);
  }
}

void NsheadMeta::MergeFrom(const NsheadMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brpc.NsheadMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_full_method_name();
      full_method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_method_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_string();
      user_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      correlation_id_ = from.correlation_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      log_id_ = from.log_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      attachment_size_ = from.attachment_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      compress_type_ = from.compress_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      trace_id_ = from.trace_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      span_id_ = from.span_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_parent_span_id(from.parent_span_id());
  }
}

void NsheadMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brpc.NsheadMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NsheadMeta::CopyFrom(const NsheadMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brpc.NsheadMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NsheadMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void NsheadMeta::Swap(NsheadMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NsheadMeta::InternalSwap(NsheadMeta* other) {
  using std::swap;
  full_method_name_.Swap(&other->full_method_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_string_.Swap(&other->user_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(correlation_id_, other->correlation_id_);
  swap(log_id_, other->log_id_);
  swap(attachment_size_, other->attachment_size_);
  swap(compress_type_, other->compress_type_);
  swap(trace_id_, other->trace_id_);
  swap(span_id_, other->span_id_);
  swap(parent_span_id_, other->parent_span_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NsheadMeta::GetMetadata() const {
  protobuf_brpc_2fnshead_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_brpc_2fnshead_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace brpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::brpc::NsheadMeta* Arena::CreateMaybeMessage< ::brpc::NsheadMeta >(Arena* arena) {
  return Arena::CreateInternal< ::brpc::NsheadMeta >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

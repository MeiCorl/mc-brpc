/************************************************************************
****  This code is auto generated by plugin, please do not modify!   ****
****          author: meicorl   email: 13349873655@163.com           ****
************************************************************************/

#pragma once

#include <brpc/controller.h>
#include <brpc/channel.h>
#include "name_agent.pb.h"
#include "core/config/server_config.h"

namespace name_agent { 
using namespace server::config;


class SyncClient {
private:
    brpc::ChannelOptions _options;
    std::string _service_name;
    brpc::Controller _controller;
    GroupStrategy _group_strategy;
    std::string _lb;
    uint64_t _request_code;

public:
    SyncClient(const std::string& service_name);
    ~SyncClient();

    void SetGroupStrategy(GroupStrategy group_strategy);
    void SetLbStrategy(const std::string& lb);
    void SetRequestCode(uint64_t request_code);
    void SetConnectTimeoutMs(uint64_t timeout_ms);
    void SetTimeoutMs(uint64_t timeout_ms);
    void SetMaxRetry(int max_retry);
    bool Failed() { return _controller.Failed(); }
    std::string ErrorText() { return _controller.ErrorText(); }
    int ErrorCode() { return _controller.ErrorCode(); }
    butil::EndPoint remote_side() { return _controller.remote_side(); }
    butil::EndPoint local_side() { return _controller.local_side(); }
    int64_t latency_us() { return _controller.latency_us(); }

    void Test(const TestReq* req, TestRes* res);
    void GetServers(const GetServersReq* req, GetServersRes* res);
}; // end of SyncClient

class ASyncClient {
private:
    brpc::ChannelOptions _options;
    std::string _service_name;
    brpc::Controller _controller;
    GroupStrategy _group_strategy;
    std::string _lb;
    uint64_t _request_code;
    brpc::CallId _call_id;

public:
    ASyncClient(const std::string& service_name);
    ~ASyncClient();

    void SetGroupStrategy(GroupStrategy group_strategy);
    void SetLbStrategy(const std::string& lb);
    void SetRequestCode(uint64_t request_code);
    void SetConnectTimeoutMs(uint64_t timeout_ms);
    void SetTimeoutMs(uint64_t timeout_ms);
    void SetMaxRetry(int max_retry);
    bool Failed() { return _controller.Failed(); }
    std::string ErrorText() { return _controller.ErrorText(); }
    int ErrorCode() { return _controller.ErrorCode(); }
    butil::EndPoint remote_side() { return _controller.remote_side(); }
    butil::EndPoint local_side() { return _controller.local_side(); }
    void Join() { brpc::Join(_call_id); }

    void Test(const TestReq* req, TestRes* res, std::function<void(bool, TestRes*)> callback);
    void GetServers(const GetServersReq* req, GetServersRes* res, std::function<void(bool, GetServersRes*)> callback);
}; // end of ASyncClient

class SemiSyncClient {
private:
    brpc::ChannelOptions _options;
    std::string _service_name;
    brpc::Controller _controller;
    GroupStrategy _group_strategy;
    std::string _lb;
    uint64_t _request_code;

public:
    SemiSyncClient(const std::string& service_name);
    ~SemiSyncClient();

    void SetGroupStrategy(GroupStrategy group_strategy);
    void SetLbStrategy(const std::string& lb);
    void SetRequestCode(uint64_t request_code);
    void SetConnectTimeoutMs(uint64_t timeout_ms);
    void SetTimeoutMs(uint64_t timeout_ms);
    void SetMaxRetry(int max_retry);
    bool Failed() { return _controller.Failed(); }
    std::string ErrorText() { return _controller.ErrorText(); }
    int ErrorCode() { return _controller.ErrorCode(); }
    butil::EndPoint remote_side() { return _controller.remote_side(); }
    butil::EndPoint local_side() { return _controller.local_side(); }
    int64_t latency_us() { return _controller.latency_us(); }
    void Join() { brpc::Join(_controller.call_id()); }

    void Test(const TestReq* req, TestRes* res);
    void GetServers(const GetServersReq* req, GetServersRes* res);
}; // end of SemiSyncClient


} // end of namespace name_agent

/************************************************************************
****  This code is auto generated by plugin, please do not modify!   ****
****          author: meicorl   email: 13349873655@163.com           ****
************************************************************************/

#include "name_agent.client.h"
#include "core/common/channel_manager.h"
#include "core/common/common_callback.h"

namespace name_agent { 


using server::common::SharedPtrChannel;
using server::common::SingletonChannel;
using server::common::OnRPCDone;

SyncClient::SyncClient(const std::string& service_name)
    : _service_name(MakeServiceName(service_name))
    , _group_strategy(GroupStrategy::STRATEGY_NORMAL)
    , _lb("rr")
    , _request_code(0) { }

SyncClient::~SyncClient() {} 

void SyncClient::SetGroupStrategy(GroupStrategy group_strategy) { 
    _group_strategy = group_strategy; 
}

void SyncClient::SetLbStrategy(const std::string& lb) { 
    _lb = lb; 
}

void SyncClient::SetRequestCode(uint64_t request_code) {
    _request_code = request_code; 
}

void SyncClient::SetConnectTimeoutMs(uint64_t timeout_ms) {
    _options.connect_timeout_ms = timeout_ms; 
}

void SyncClient::SetTimeoutMs(uint64_t timeout_ms) {
    _options.timeout_ms = timeout_ms; 
}

void SyncClient::SetMaxRetry(int max_retry) {
    _options.max_retry = max_retry; 
}

void SyncClient::Test(const TestReq* req, TestRes* res) { 
    SharedPtrChannel channel_ptr = 
        SingletonChannel::get()->GetChannel(_service_name, _group_strategy, _lb, _request_code,
                                           &_options);
    brpc::Channel* channel = channel_ptr.get();
    if (!channel)  {
        _controller.SetFailed(::brpc::EINTERNAL, "Failed to channel");
        return;
    }
    AgentService_Stub stub(channel);
    stub.Test(&_controller, req, res, nullptr);
}

void SyncClient::GetServers(const GetServersReq* req, GetServersRes* res) { 
    SharedPtrChannel channel_ptr = 
        SingletonChannel::get()->GetChannel(_service_name, _group_strategy, _lb, _request_code,
                                           &_options);
    brpc::Channel* channel = channel_ptr.get();
    if (!channel)  {
        _controller.SetFailed(::brpc::EINTERNAL, "Failed to channel");
        return;
    }
    AgentService_Stub stub(channel);
    stub.GetServers(&_controller, req, res, nullptr);
}


ASyncClient::ASyncClient(const std::string& service_name)
    : _service_name(MakeServiceName(service_name))
    , _group_strategy(GroupStrategy::STRATEGY_NORMAL)
    , _lb("rr")
    , _request_code(0) { }

ASyncClient::~ASyncClient() {} 

void ASyncClient::SetGroupStrategy(GroupStrategy group_strategy) { 
    _group_strategy = group_strategy; 
}

void ASyncClient::SetLbStrategy(const std::string& lb) { 
    _lb = lb; 
}

void ASyncClient::SetRequestCode(uint64_t request_code) {
    _request_code = request_code; 
}

void ASyncClient::SetConnectTimeoutMs(uint64_t timeout_ms) {
    _options.connect_timeout_ms = timeout_ms; 
}

void ASyncClient::SetTimeoutMs(uint64_t timeout_ms) {
    _options.timeout_ms = timeout_ms; 
}

void ASyncClient::SetMaxRetry(int max_retry) {
    _options.max_retry = max_retry; 
}

void ASyncClient::Test(const TestReq* req, TestRes* res, std::function<void(bool, TestRes*)> callback) {
    auto done = new OnRPCDone<TestRes>(callback);
    SharedPtrChannel channel_ptr = 
        SingletonChannel::get()->GetChannel(_service_name, _group_strategy, _lb, _request_code,
                                           &_options);
    brpc::Channel* channel = channel_ptr.get();
    if (!channel)  {
        brpc::ClosureGuard done_guard(done);
        done->cntl.SetFailed(::brpc::EINTERNAL, "Failed to channel");
        return;
    }
    AgentService_Stub stub(channel);
    _call_id == done->cntl.call_id();
    stub.Test(&done->cntl, req, &done->response, done);
}

void ASyncClient::GetServers(const GetServersReq* req, GetServersRes* res, std::function<void(bool, GetServersRes*)> callback) {
    auto done = new OnRPCDone<GetServersRes>(callback);
    SharedPtrChannel channel_ptr = 
        SingletonChannel::get()->GetChannel(_service_name, _group_strategy, _lb, _request_code,
                                           &_options);
    brpc::Channel* channel = channel_ptr.get();
    if (!channel)  {
        brpc::ClosureGuard done_guard(done);
        done->cntl.SetFailed(::brpc::EINTERNAL, "Failed to channel");
        return;
    }
    AgentService_Stub stub(channel);
    _call_id == done->cntl.call_id();
    stub.GetServers(&done->cntl, req, &done->response, done);
}


SemiSyncClient::SemiSyncClient(const std::string& service_name)
    : _service_name(MakeServiceName(service_name))
    , _group_strategy(GroupStrategy::STRATEGY_NORMAL)
    , _lb("rr")
    , _request_code(0) { }

SemiSyncClient::~SemiSyncClient() {} 

void SemiSyncClient::SetGroupStrategy(GroupStrategy group_strategy) { 
    _group_strategy = group_strategy; 
}

void SemiSyncClient::SetLbStrategy(const std::string& lb) { 
    _lb = lb; 
}

void SemiSyncClient::SetRequestCode(uint64_t request_code) {
    _request_code = request_code; 
}

void SemiSyncClient::SetConnectTimeoutMs(uint64_t timeout_ms) {
    _options.connect_timeout_ms = timeout_ms; 
}

void SemiSyncClient::SetTimeoutMs(uint64_t timeout_ms) {
    _options.timeout_ms = timeout_ms; 
}

void SemiSyncClient::SetMaxRetry(int max_retry) {
    _options.max_retry = max_retry; 
}

void SemiSyncClient::Test(const TestReq* req, TestRes* res) { 
    SharedPtrChannel channel_ptr = 
        SingletonChannel::get()->GetChannel(_service_name, _group_strategy, _lb, _request_code,
                                           &_options);
    brpc::Channel* channel = channel_ptr.get();
    if (!channel)  {
        _controller.SetFailed(::brpc::EINTERNAL, "Failed to channel");
        return;
    }
    AgentService_Stub stub(channel);
    stub.Test(&_controller, req, res, brpc::DoNothing());
}

void SemiSyncClient::GetServers(const GetServersReq* req, GetServersRes* res) { 
    SharedPtrChannel channel_ptr = 
        SingletonChannel::get()->GetChannel(_service_name, _group_strategy, _lb, _request_code,
                                           &_options);
    brpc::Channel* channel = channel_ptr.get();
    if (!channel)  {
        _controller.SetFailed(::brpc::EINTERNAL, "Failed to channel");
        return;
    }
    AgentService_Stub stub(channel);
    stub.GetServers(&_controller, req, res, brpc::DoNothing());
}


} // end of namespace name_agent

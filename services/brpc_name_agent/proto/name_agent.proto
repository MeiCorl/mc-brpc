syntax="proto3";
package name_agent;

option cc_generic_services = true;

enum ResCode {
    ResCode_Begin = 0;
    Success = 200;
    InValidParams = 400;
    NotFound = 404;
    ServerError = 500;
}

message GetServersReq {
    uint64 seq_id = 1;
    string service_name = 2;
    uint32 group_strategy = 3;
    uint64 group_request_code = 4;
}

message GetServersRes {
    uint64 seq_id = 1;
    ResCode res_code = 2;
    repeated string endpoints = 3;
}

message EndPoint {
	string ip           = 1;
	uint32 port         = 2;
}

message LbStrategyInfo {
	EndPoint endpoint          = 1;
	string service_name        = 2;
	int32 pass_rate            = 3;    // 0~100
	uint32 period              = 4;
	uint32 cur_req_cnt         = 5;    // when block_period_type is detect,and pass_rate is 0,cur_req_cnt mark number of req be deteted
	uint32 strategy_time       = 6;    // seconds
}

message LbStatInfo {
	EndPoint endpoint   = 1;    
	string service_name = 2;
	uint32 succ_cnt      = 3;	
	uint32 fail_cnt      = 4;
	uint32 fail_net_cnt  = 5;
	uint32 fail_logic_cnt= 6;
	uint32 used_ms       = 7;
}

message LbStatReportReq {
	repeated LbStatInfo infos  = 1;
}

message LbStatReportRes {
    ResCode res_code = 1;
}

service AgentService {
    rpc GetServers(GetServersReq) returns (GetServersRes);
    rpc LbStatReport(LbStatReportReq) returns (LbStatReportRes);
}

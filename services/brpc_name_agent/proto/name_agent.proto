syntax="proto3";
package name_agent;

option cc_generic_services = true;

enum ResCode {
    ResCode_Begin = 0;
    Success = 200;
    InValidParams = 400;
    NotFound = 404;
    ServerError = 500;
}

message TestReq {
    int32 seq_id = 1;
    string msg = 2;
}

message TestRes {
    uint64 seq_id = 1;
    ResCode res_code = 2;
    string res_msg = 3;
}

message GetServersReq {
    uint64 seq_id = 1;
    string service_name = 2;
    uint32 group_strategy = 3;
    uint64 group_request_code = 4;
}

message GetServersRes {
    uint64 seq_id = 1;
    ResCode res_code = 2;
    repeated string endpoints = 3;
}

message LbStatInfo {
	string endpoint   = 1;    // ip:port
	string service_name = 2;
	uint32 succ_cnt      = 3;	
	uint32 fail_cnt      = 4;
	uint32 fail_net_cnt  = 5;
	uint32 fail_logic_cnt= 6;
	uint32 used_ms       = 7;
}

message LbStatReportReq {
	repeated LbStatInfo infos  = 1;
}

message LbStatReportRes {
    ResCode res_code = 1;
}

service AgentService {
    rpc Test (TestReq) returns (TestRes);
    rpc GetServers(GetServersReq) returns (GetServersRes);
    rpc LbStatReport(LbStatReportReq) returns (LbStatReportRes);
}

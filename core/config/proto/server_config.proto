syntax="proto3";
package server.config;

option cc_generic_services = true;

message InstanceInfo {
    uint32 region_id = 1;
    uint32 group_id = 2;
    string endpoint = 3;
}

message DbConfig {
    string user = 1;
    string passwd = 2;
    string ip = 3;
    uint32 port = 4;
    string db_name = 5;
    uint32 max_active = 6;              // 最大活跃连接数      
    uint32 min_idle = 8;                // 最小空闲连接数
    uint32 ilde_timeout_ms = 9;         // 空闲连接超时时间(超过会自动释放连接)
    uint32 timeout_ms = 10;             // 获取连接超时时间
    uint32 refresh_interval_ms = 11;    // 连接刷新时间(空闲超过此时间会自动发送心跳至MySQL Server进行保活)
}

message RedisNodeInfo {
    string host = 1;                // 集群一个master节点ip（redis-plus-plus会自动连接到其他master节点和slave节点，每个master节点维护一个连接池）
    uint32 port = 2;
    string type = 3;                // (默认)单实例：single     集群: cluster  (注：哨兵节点信息不用配置此字段)
}
 
message RedisSentineInfo {
    repeated RedisNodeInfo sentines = 1; // sentine哨兵节点信息
}

message RedisConfig {
    oneof info {
        RedisNodeInfo redis_info = 1;       // 单实例redis和集群配置redis_info（集群模式只需配置一个master节点ip port）
        RedisSentineInfo sentine_info = 2;  // 哨兵模式配置sentine_info
    }
    string passwd = 3;
    uint32 pool_size = 4;           // 连接池大小，默认3
    uint32 timeout_ms = 5;          // 命令超时时间
    uint32 wait_timeout_ms = 6;     // 等待连接超时时间
}

message LogConfig {
    uint32 log_level = 1;
    uint32 log_threshold = 2;
    uint32 remain_days = 3;
    bool log_to_stderr = 4;
}

message SvrConfigBase {
    string ns_url = 1;
    string service_name = 2;
    uint32 region_id = 3;
    uint32 group_id = 4;
    map<string, DbConfig> db_configs = 5;           // key: cluster_name
    map<string, RedisConfig> redis_configs = 6;     // key: cluster_name
    LogConfig log_config = 7;
}
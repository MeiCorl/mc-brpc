// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_config.proto

#include "server_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_server_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DbConfig_server_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogConfig_server_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RedisConfig_server_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedisNodeInfo_server_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RedisSentineInfo_server_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SvrConfigBase_DbConfigsEntry_DoNotUse_server_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SvrConfigBase_RedisConfigsEntry_DoNotUse_server_5fconfig_2eproto;
namespace server {
namespace config {
class InstanceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstanceInfo> _instance;
} _InstanceInfo_default_instance_;
class DbConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DbConfig> _instance;
} _DbConfig_default_instance_;
class RedisNodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedisNodeInfo> _instance;
} _RedisNodeInfo_default_instance_;
class RedisSentineInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedisSentineInfo> _instance;
} _RedisSentineInfo_default_instance_;
class RedisConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedisConfig> _instance;
  const ::server::config::RedisNodeInfo* redis_info_;
  const ::server::config::RedisSentineInfo* sentine_info_;
} _RedisConfig_default_instance_;
class LogConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogConfig> _instance;
} _LogConfig_default_instance_;
class SvrConfigBase_DbConfigsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SvrConfigBase_DbConfigsEntry_DoNotUse> _instance;
} _SvrConfigBase_DbConfigsEntry_DoNotUse_default_instance_;
class SvrConfigBase_RedisConfigsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SvrConfigBase_RedisConfigsEntry_DoNotUse> _instance;
} _SvrConfigBase_RedisConfigsEntry_DoNotUse_default_instance_;
class SvrConfigBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SvrConfigBase> _instance;
} _SvrConfigBase_default_instance_;
}  // namespace config
}  // namespace server
static void InitDefaultsscc_info_DbConfig_server_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::config::_DbConfig_default_instance_;
    new (ptr) ::server::config::DbConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::config::DbConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DbConfig_server_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DbConfig_server_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_InstanceInfo_server_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::config::_InstanceInfo_default_instance_;
    new (ptr) ::server::config::InstanceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::config::InstanceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstanceInfo_server_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstanceInfo_server_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_LogConfig_server_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::config::_LogConfig_default_instance_;
    new (ptr) ::server::config::LogConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::config::LogConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogConfig_server_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogConfig_server_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_RedisConfig_server_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::config::_RedisConfig_default_instance_;
    new (ptr) ::server::config::RedisConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::config::RedisConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RedisConfig_server_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RedisConfig_server_5fconfig_2eproto}, {
      &scc_info_RedisNodeInfo_server_5fconfig_2eproto.base,
      &scc_info_RedisSentineInfo_server_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_RedisNodeInfo_server_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::config::_RedisNodeInfo_default_instance_;
    new (ptr) ::server::config::RedisNodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::config::RedisNodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedisNodeInfo_server_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedisNodeInfo_server_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_RedisSentineInfo_server_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::config::_RedisSentineInfo_default_instance_;
    new (ptr) ::server::config::RedisSentineInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::config::RedisSentineInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RedisSentineInfo_server_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RedisSentineInfo_server_5fconfig_2eproto}, {
      &scc_info_RedisNodeInfo_server_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_SvrConfigBase_server_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::config::_SvrConfigBase_default_instance_;
    new (ptr) ::server::config::SvrConfigBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::config::SvrConfigBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SvrConfigBase_server_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SvrConfigBase_server_5fconfig_2eproto}, {
      &scc_info_SvrConfigBase_DbConfigsEntry_DoNotUse_server_5fconfig_2eproto.base,
      &scc_info_SvrConfigBase_RedisConfigsEntry_DoNotUse_server_5fconfig_2eproto.base,
      &scc_info_LogConfig_server_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_SvrConfigBase_DbConfigsEntry_DoNotUse_server_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::config::_SvrConfigBase_DbConfigsEntry_DoNotUse_default_instance_;
    new (ptr) ::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse();
  }
  ::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SvrConfigBase_DbConfigsEntry_DoNotUse_server_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SvrConfigBase_DbConfigsEntry_DoNotUse_server_5fconfig_2eproto}, {
      &scc_info_DbConfig_server_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_SvrConfigBase_RedisConfigsEntry_DoNotUse_server_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::config::_SvrConfigBase_RedisConfigsEntry_DoNotUse_default_instance_;
    new (ptr) ::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse();
  }
  ::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SvrConfigBase_RedisConfigsEntry_DoNotUse_server_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SvrConfigBase_RedisConfigsEntry_DoNotUse_server_5fconfig_2eproto}, {
      &scc_info_RedisConfig_server_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_5fconfig_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_server_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::config::InstanceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::config::InstanceInfo, region_id_),
  PROTOBUF_FIELD_OFFSET(::server::config::InstanceInfo, group_id_),
  PROTOBUF_FIELD_OFFSET(::server::config::InstanceInfo, endpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, user_),
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, passwd_),
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, ip_),
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, port_),
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, db_name_),
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, max_active_),
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, min_idle_),
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, ilde_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::server::config::DbConfig, refresh_interval_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::config::RedisNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::config::RedisNodeInfo, host_),
  PROTOBUF_FIELD_OFFSET(::server::config::RedisNodeInfo, port_),
  PROTOBUF_FIELD_OFFSET(::server::config::RedisNodeInfo, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::config::RedisSentineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::config::RedisSentineInfo, sentines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::config::RedisConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::server::config::RedisConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::server::config::RedisConfigDefaultTypeInternal, redis_info_),
  offsetof(::server::config::RedisConfigDefaultTypeInternal, sentine_info_),
  PROTOBUF_FIELD_OFFSET(::server::config::RedisConfig, passwd_),
  PROTOBUF_FIELD_OFFSET(::server::config::RedisConfig, pool_size_),
  PROTOBUF_FIELD_OFFSET(::server::config::RedisConfig, timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::server::config::RedisConfig, wait_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::server::config::RedisConfig, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::config::LogConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::config::LogConfig, log_level_),
  PROTOBUF_FIELD_OFFSET(::server::config::LogConfig, log_threshold_),
  PROTOBUF_FIELD_OFFSET(::server::config::LogConfig, remain_days_),
  PROTOBUF_FIELD_OFFSET(::server::config::LogConfig, log_to_stderr_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase, ns_url_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase, service_name_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase, region_id_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase, group_id_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase, db_configs_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase, redis_configs_),
  PROTOBUF_FIELD_OFFSET(::server::config::SvrConfigBase, log_config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::server::config::InstanceInfo)},
  { 8, -1, sizeof(::server::config::DbConfig)},
  { 23, -1, sizeof(::server::config::RedisNodeInfo)},
  { 31, -1, sizeof(::server::config::RedisSentineInfo)},
  { 37, -1, sizeof(::server::config::RedisConfig)},
  { 49, -1, sizeof(::server::config::LogConfig)},
  { 58, 65, sizeof(::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse)},
  { 67, 74, sizeof(::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse)},
  { 76, -1, sizeof(::server::config::SvrConfigBase)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::config::_InstanceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::config::_DbConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::config::_RedisNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::config::_RedisSentineInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::config::_RedisConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::config::_LogConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::config::_SvrConfigBase_DbConfigsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::config::_SvrConfigBase_RedisConfigsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::config::_SvrConfigBase_default_instance_),
};

const char descriptor_table_protodef_server_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023server_config.proto\022\rserver.config\"E\n\014"
  "InstanceInfo\022\021\n\tregion_id\030\001 \001(\r\022\020\n\010group"
  "_id\030\002 \001(\r\022\020\n\010endpoint\030\003 \001(\t\"\303\001\n\010DbConfig"
  "\022\014\n\004user\030\001 \001(\t\022\016\n\006passwd\030\002 \001(\t\022\n\n\002ip\030\003 \001"
  "(\t\022\014\n\004port\030\004 \001(\r\022\017\n\007db_name\030\005 \001(\t\022\022\n\nmax"
  "_active\030\006 \001(\r\022\020\n\010min_idle\030\010 \001(\r\022\027\n\017ilde_"
  "timeout_ms\030\t \001(\r\022\022\n\ntimeout_ms\030\n \001(\r\022\033\n\023"
  "refresh_interval_ms\030\013 \001(\r\"9\n\rRedisNodeIn"
  "fo\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\014\n\004type\030\003"
  " \001(\t\"B\n\020RedisSentineInfo\022.\n\010sentines\030\001 \003"
  "(\0132\034.server.config.RedisNodeInfo\"\322\001\n\013Red"
  "isConfig\0222\n\nredis_info\030\001 \001(\0132\034.server.co"
  "nfig.RedisNodeInfoH\000\0227\n\014sentine_info\030\002 \001"
  "(\0132\037.server.config.RedisSentineInfoH\000\022\016\n"
  "\006passwd\030\003 \001(\t\022\021\n\tpool_size\030\004 \001(\r\022\022\n\ntime"
  "out_ms\030\005 \001(\r\022\027\n\017wait_timeout_ms\030\006 \001(\rB\006\n"
  "\004info\"a\n\tLogConfig\022\021\n\tlog_level\030\001 \001(\r\022\025\n"
  "\rlog_threshold\030\002 \001(\r\022\023\n\013remain_days\030\003 \001("
  "\r\022\025\n\rlog_to_stderr\030\004 \001(\010\"\254\003\n\rSvrConfigBa"
  "se\022\016\n\006ns_url\030\001 \001(\t\022\024\n\014service_name\030\002 \001(\t"
  "\022\021\n\tregion_id\030\003 \001(\r\022\020\n\010group_id\030\004 \001(\r\022\?\n"
  "\ndb_configs\030\005 \003(\0132+.server.config.SvrCon"
  "figBase.DbConfigsEntry\022E\n\rredis_configs\030"
  "\006 \003(\0132..server.config.SvrConfigBase.Redi"
  "sConfigsEntry\022,\n\nlog_config\030\007 \001(\0132\030.serv"
  "er.config.LogConfig\032I\n\016DbConfigsEntry\022\013\n"
  "\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.server.confi"
  "g.DbConfig:\0028\001\032O\n\021RedisConfigsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.server.config."
  "RedisConfig:\0028\001B\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_5fconfig_2eproto_sccs[9] = {
  &scc_info_DbConfig_server_5fconfig_2eproto.base,
  &scc_info_InstanceInfo_server_5fconfig_2eproto.base,
  &scc_info_LogConfig_server_5fconfig_2eproto.base,
  &scc_info_RedisConfig_server_5fconfig_2eproto.base,
  &scc_info_RedisNodeInfo_server_5fconfig_2eproto.base,
  &scc_info_RedisSentineInfo_server_5fconfig_2eproto.base,
  &scc_info_SvrConfigBase_server_5fconfig_2eproto.base,
  &scc_info_SvrConfigBase_DbConfigsEntry_DoNotUse_server_5fconfig_2eproto.base,
  &scc_info_SvrConfigBase_RedisConfigsEntry_DoNotUse_server_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_server_5fconfig_2eproto, "server_config.proto", 1188,
  &descriptor_table_server_5fconfig_2eproto_once, descriptor_table_server_5fconfig_2eproto_sccs, descriptor_table_server_5fconfig_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_server_5fconfig_2eproto::offsets,
  file_level_metadata_server_5fconfig_2eproto, 9, file_level_enum_descriptors_server_5fconfig_2eproto, file_level_service_descriptors_server_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_5fconfig_2eproto)), true);
namespace server {
namespace config {

// ===================================================================

void InstanceInfo::InitAsDefaultInstance() {
}
class InstanceInfo::_Internal {
 public:
};

InstanceInfo::InstanceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.config.InstanceInfo)
}
InstanceInfo::InstanceInfo(const InstanceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint().empty()) {
    endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_endpoint(),
      GetArena());
  }
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:server.config.InstanceInfo)
}

void InstanceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstanceInfo_server_5fconfig_2eproto.base);
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(group_id_));
}

InstanceInfo::~InstanceInfo() {
  // @@protoc_insertion_point(destructor:server.config.InstanceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstanceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstanceInfo::ArenaDtor(void* object) {
  InstanceInfo* _this = reinterpret_cast< InstanceInfo* >(object);
  (void)_this;
}
void InstanceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstanceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstanceInfo& InstanceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstanceInfo_server_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void InstanceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:server.config.InstanceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 region_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.config.InstanceInfo.endpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstanceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.config.InstanceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 region_id = 1;
  if (this->region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_region_id(), target);
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // string endpoint = 3;
  if (this->endpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.config.InstanceInfo.endpoint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_endpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.config.InstanceInfo)
  return target;
}

size_t InstanceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.config.InstanceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string endpoint = 3;
  if (this->endpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  // uint32 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_region_id());
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstanceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.config.InstanceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InstanceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstanceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.config.InstanceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.config.InstanceInfo)
    MergeFrom(*source);
  }
}

void InstanceInfo::MergeFrom(const InstanceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.config.InstanceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.endpoint().size() > 0) {
    _internal_set_endpoint(from._internal_endpoint());
  }
  if (from.region_id() != 0) {
    _internal_set_region_id(from._internal_region_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void InstanceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.config.InstanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceInfo::CopyFrom(const InstanceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.config.InstanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceInfo::IsInitialized() const {
  return true;
}

void InstanceInfo::InternalSwap(InstanceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  endpoint_.Swap(&other->endpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstanceInfo, group_id_)
      + sizeof(InstanceInfo::group_id_)
      - PROTOBUF_FIELD_OFFSET(InstanceInfo, region_id_)>(
          reinterpret_cast<char*>(&region_id_),
          reinterpret_cast<char*>(&other->region_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DbConfig::InitAsDefaultInstance() {
}
class DbConfig::_Internal {
 public:
};

DbConfig::DbConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.config.DbConfig)
}
DbConfig::DbConfig(const DbConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user(),
      GetArena());
  }
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passwd().empty()) {
    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_passwd(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_db_name().empty()) {
    db_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_db_name(),
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_interval_ms_) -
    reinterpret_cast<char*>(&port_)) + sizeof(refresh_interval_ms_));
  // @@protoc_insertion_point(copy_constructor:server.config.DbConfig)
}

void DbConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DbConfig_server_5fconfig_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_interval_ms_) -
      reinterpret_cast<char*>(&port_)) + sizeof(refresh_interval_ms_));
}

DbConfig::~DbConfig() {
  // @@protoc_insertion_point(destructor:server.config.DbConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DbConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DbConfig::ArenaDtor(void* object) {
  DbConfig* _this = reinterpret_cast< DbConfig* >(object);
  (void)_this;
}
void DbConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DbConfig& DbConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DbConfig_server_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DbConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:server.config.DbConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  passwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_interval_ms_) -
      reinterpret_cast<char*>(&port_)) + sizeof(refresh_interval_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.config.DbConfig.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.config.DbConfig.passwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.config.DbConfig.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_db_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.config.DbConfig.db_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_idle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          min_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ilde_timeout_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ilde_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timeout_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 refresh_interval_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          refresh_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DbConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.config.DbConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.config.DbConfig.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.config.DbConfig.passwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passwd(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.config.DbConfig.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  // string db_name = 5;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.config.DbConfig.db_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_db_name(), target);
  }

  // uint32 max_active = 6;
  if (this->max_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_active(), target);
  }

  // uint32 min_idle = 8;
  if (this->min_idle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_min_idle(), target);
  }

  // uint32 ilde_timeout_ms = 9;
  if (this->ilde_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ilde_timeout_ms(), target);
  }

  // uint32 timeout_ms = 10;
  if (this->timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_timeout_ms(), target);
  }

  // uint32 refresh_interval_ms = 11;
  if (this->refresh_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_refresh_interval_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.config.DbConfig)
  return target;
}

size_t DbConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.config.DbConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string db_name = 5;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // uint32 max_active = 6;
  if (this->max_active() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_active());
  }

  // uint32 min_idle = 8;
  if (this->min_idle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_idle());
  }

  // uint32 ilde_timeout_ms = 9;
  if (this->ilde_timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ilde_timeout_ms());
  }

  // uint32 timeout_ms = 10;
  if (this->timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout_ms());
  }

  // uint32 refresh_interval_ms = 11;
  if (this->refresh_interval_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_refresh_interval_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.config.DbConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DbConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DbConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.config.DbConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.config.DbConfig)
    MergeFrom(*source);
  }
}

void DbConfig::MergeFrom(const DbConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.config.DbConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {
    _internal_set_user(from._internal_user());
  }
  if (from.passwd().size() > 0) {
    _internal_set_passwd(from._internal_passwd());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.db_name().size() > 0) {
    _internal_set_db_name(from._internal_db_name());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.max_active() != 0) {
    _internal_set_max_active(from._internal_max_active());
  }
  if (from.min_idle() != 0) {
    _internal_set_min_idle(from._internal_min_idle());
  }
  if (from.ilde_timeout_ms() != 0) {
    _internal_set_ilde_timeout_ms(from._internal_ilde_timeout_ms());
  }
  if (from.timeout_ms() != 0) {
    _internal_set_timeout_ms(from._internal_timeout_ms());
  }
  if (from.refresh_interval_ms() != 0) {
    _internal_set_refresh_interval_ms(from._internal_refresh_interval_ms());
  }
}

void DbConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.config.DbConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbConfig::CopyFrom(const DbConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.config.DbConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbConfig::IsInitialized() const {
  return true;
}

void DbConfig::InternalSwap(DbConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DbConfig, refresh_interval_ms_)
      + sizeof(DbConfig::refresh_interval_ms_)
      - PROTOBUF_FIELD_OFFSET(DbConfig, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DbConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedisNodeInfo::InitAsDefaultInstance() {
}
class RedisNodeInfo::_Internal {
 public:
};

RedisNodeInfo::RedisNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.config.RedisNodeInfo)
}
RedisNodeInfo::RedisNodeInfo(const RedisNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:server.config.RedisNodeInfo)
}

void RedisNodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedisNodeInfo_server_5fconfig_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

RedisNodeInfo::~RedisNodeInfo() {
  // @@protoc_insertion_point(destructor:server.config.RedisNodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedisNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RedisNodeInfo::ArenaDtor(void* object) {
  RedisNodeInfo* _this = reinterpret_cast< RedisNodeInfo* >(object);
  (void)_this;
}
void RedisNodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedisNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedisNodeInfo& RedisNodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedisNodeInfo_server_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RedisNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:server.config.RedisNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedisNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.config.RedisNodeInfo.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.config.RedisNodeInfo.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedisNodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.config.RedisNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.config.RedisNodeInfo.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.config.RedisNodeInfo.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.config.RedisNodeInfo)
  return target;
}

size_t RedisNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.config.RedisNodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedisNodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.config.RedisNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisNodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedisNodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.config.RedisNodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.config.RedisNodeInfo)
    MergeFrom(*source);
  }
}

void RedisNodeInfo::MergeFrom(const RedisNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.config.RedisNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void RedisNodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.config.RedisNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisNodeInfo::CopyFrom(const RedisNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.config.RedisNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisNodeInfo::IsInitialized() const {
  return true;
}

void RedisNodeInfo::InternalSwap(RedisNodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedisNodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedisSentineInfo::InitAsDefaultInstance() {
}
class RedisSentineInfo::_Internal {
 public:
};

RedisSentineInfo::RedisSentineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sentines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.config.RedisSentineInfo)
}
RedisSentineInfo::RedisSentineInfo(const RedisSentineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sentines_(from.sentines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server.config.RedisSentineInfo)
}

void RedisSentineInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedisSentineInfo_server_5fconfig_2eproto.base);
}

RedisSentineInfo::~RedisSentineInfo() {
  // @@protoc_insertion_point(destructor:server.config.RedisSentineInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedisSentineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RedisSentineInfo::ArenaDtor(void* object) {
  RedisSentineInfo* _this = reinterpret_cast< RedisSentineInfo* >(object);
  (void)_this;
}
void RedisSentineInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedisSentineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedisSentineInfo& RedisSentineInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedisSentineInfo_server_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RedisSentineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:server.config.RedisSentineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sentines_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedisSentineInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .server.config.RedisNodeInfo sentines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sentines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedisSentineInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.config.RedisSentineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .server.config.RedisNodeInfo sentines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sentines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sentines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.config.RedisSentineInfo)
  return target;
}

size_t RedisSentineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.config.RedisSentineInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server.config.RedisNodeInfo sentines = 1;
  total_size += 1UL * this->_internal_sentines_size();
  for (const auto& msg : this->sentines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedisSentineInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.config.RedisSentineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisSentineInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedisSentineInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.config.RedisSentineInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.config.RedisSentineInfo)
    MergeFrom(*source);
  }
}

void RedisSentineInfo::MergeFrom(const RedisSentineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.config.RedisSentineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sentines_.MergeFrom(from.sentines_);
}

void RedisSentineInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.config.RedisSentineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisSentineInfo::CopyFrom(const RedisSentineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.config.RedisSentineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisSentineInfo::IsInitialized() const {
  return true;
}

void RedisSentineInfo::InternalSwap(RedisSentineInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sentines_.InternalSwap(&other->sentines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedisSentineInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedisConfig::InitAsDefaultInstance() {
  ::server::config::_RedisConfig_default_instance_.redis_info_ = const_cast< ::server::config::RedisNodeInfo*>(
      ::server::config::RedisNodeInfo::internal_default_instance());
  ::server::config::_RedisConfig_default_instance_.sentine_info_ = const_cast< ::server::config::RedisSentineInfo*>(
      ::server::config::RedisSentineInfo::internal_default_instance());
}
class RedisConfig::_Internal {
 public:
  static const ::server::config::RedisNodeInfo& redis_info(const RedisConfig* msg);
  static const ::server::config::RedisSentineInfo& sentine_info(const RedisConfig* msg);
};

const ::server::config::RedisNodeInfo&
RedisConfig::_Internal::redis_info(const RedisConfig* msg) {
  return *msg->info_.redis_info_;
}
const ::server::config::RedisSentineInfo&
RedisConfig::_Internal::sentine_info(const RedisConfig* msg) {
  return *msg->info_.sentine_info_;
}
void RedisConfig::set_allocated_redis_info(::server::config::RedisNodeInfo* redis_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_info();
  if (redis_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(redis_info);
    if (message_arena != submessage_arena) {
      redis_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redis_info, submessage_arena);
    }
    set_has_redis_info();
    info_.redis_info_ = redis_info;
  }
  // @@protoc_insertion_point(field_set_allocated:server.config.RedisConfig.redis_info)
}
void RedisConfig::set_allocated_sentine_info(::server::config::RedisSentineInfo* sentine_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_info();
  if (sentine_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sentine_info);
    if (message_arena != submessage_arena) {
      sentine_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sentine_info, submessage_arena);
    }
    set_has_sentine_info();
    info_.sentine_info_ = sentine_info;
  }
  // @@protoc_insertion_point(field_set_allocated:server.config.RedisConfig.sentine_info)
}
RedisConfig::RedisConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.config.RedisConfig)
}
RedisConfig::RedisConfig(const RedisConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passwd().empty()) {
    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_passwd(),
      GetArena());
  }
  ::memcpy(&pool_size_, &from.pool_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_timeout_ms_) -
    reinterpret_cast<char*>(&pool_size_)) + sizeof(wait_timeout_ms_));
  clear_has_info();
  switch (from.info_case()) {
    case kRedisInfo: {
      _internal_mutable_redis_info()->::server::config::RedisNodeInfo::MergeFrom(from._internal_redis_info());
      break;
    }
    case kSentineInfo: {
      _internal_mutable_sentine_info()->::server::config::RedisSentineInfo::MergeFrom(from._internal_sentine_info());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:server.config.RedisConfig)
}

void RedisConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedisConfig_server_5fconfig_2eproto.base);
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pool_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_timeout_ms_) -
      reinterpret_cast<char*>(&pool_size_)) + sizeof(wait_timeout_ms_));
  clear_has_info();
}

RedisConfig::~RedisConfig() {
  // @@protoc_insertion_point(destructor:server.config.RedisConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RedisConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_info()) {
    clear_info();
  }
}

void RedisConfig::ArenaDtor(void* object) {
  RedisConfig* _this = reinterpret_cast< RedisConfig* >(object);
  (void)_this;
}
void RedisConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedisConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedisConfig& RedisConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedisConfig_server_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RedisConfig::clear_info() {
// @@protoc_insertion_point(one_of_clear_start:server.config.RedisConfig)
  switch (info_case()) {
    case kRedisInfo: {
      if (GetArena() == nullptr) {
        delete info_.redis_info_;
      }
      break;
    }
    case kSentineInfo: {
      if (GetArena() == nullptr) {
        delete info_.sentine_info_;
      }
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INFO_NOT_SET;
}


void RedisConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:server.config.RedisConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pool_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_timeout_ms_) -
      reinterpret_cast<char*>(&pool_size_)) + sizeof(wait_timeout_ms_));
  clear_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedisConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server.config.RedisNodeInfo redis_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_redis_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server.config.RedisSentineInfo sentine_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sentine_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string passwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.config.RedisConfig.passwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pool_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timeout_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wait_timeout_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          wait_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedisConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.config.RedisConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.config.RedisNodeInfo redis_info = 1;
  if (_internal_has_redis_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::redis_info(this), target, stream);
  }

  // .server.config.RedisSentineInfo sentine_info = 2;
  if (_internal_has_sentine_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sentine_info(this), target, stream);
  }

  // string passwd = 3;
  if (this->passwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.config.RedisConfig.passwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_passwd(), target);
  }

  // uint32 pool_size = 4;
  if (this->pool_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pool_size(), target);
  }

  // uint32 timeout_ms = 5;
  if (this->timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timeout_ms(), target);
  }

  // uint32 wait_timeout_ms = 6;
  if (this->wait_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_wait_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.config.RedisConfig)
  return target;
}

size_t RedisConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.config.RedisConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string passwd = 3;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  // uint32 pool_size = 4;
  if (this->pool_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pool_size());
  }

  // uint32 timeout_ms = 5;
  if (this->timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout_ms());
  }

  // uint32 wait_timeout_ms = 6;
  if (this->wait_timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wait_timeout_ms());
  }

  switch (info_case()) {
    // .server.config.RedisNodeInfo redis_info = 1;
    case kRedisInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_.redis_info_);
      break;
    }
    // .server.config.RedisSentineInfo sentine_info = 2;
    case kSentineInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_.sentine_info_);
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedisConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.config.RedisConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedisConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.config.RedisConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.config.RedisConfig)
    MergeFrom(*source);
  }
}

void RedisConfig::MergeFrom(const RedisConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.config.RedisConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.passwd().size() > 0) {
    _internal_set_passwd(from._internal_passwd());
  }
  if (from.pool_size() != 0) {
    _internal_set_pool_size(from._internal_pool_size());
  }
  if (from.timeout_ms() != 0) {
    _internal_set_timeout_ms(from._internal_timeout_ms());
  }
  if (from.wait_timeout_ms() != 0) {
    _internal_set_wait_timeout_ms(from._internal_wait_timeout_ms());
  }
  switch (from.info_case()) {
    case kRedisInfo: {
      _internal_mutable_redis_info()->::server::config::RedisNodeInfo::MergeFrom(from._internal_redis_info());
      break;
    }
    case kSentineInfo: {
      _internal_mutable_sentine_info()->::server::config::RedisSentineInfo::MergeFrom(from._internal_sentine_info());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
}

void RedisConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.config.RedisConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisConfig::CopyFrom(const RedisConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.config.RedisConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisConfig::IsInitialized() const {
  return true;
}

void RedisConfig::InternalSwap(RedisConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedisConfig, wait_timeout_ms_)
      + sizeof(RedisConfig::wait_timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(RedisConfig, pool_size_)>(
          reinterpret_cast<char*>(&pool_size_),
          reinterpret_cast<char*>(&other->pool_size_));
  swap(info_, other->info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedisConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogConfig::InitAsDefaultInstance() {
}
class LogConfig::_Internal {
 public:
};

LogConfig::LogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.config.LogConfig)
}
LogConfig::LogConfig(const LogConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&log_level_, &from.log_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&log_to_stderr_) -
    reinterpret_cast<char*>(&log_level_)) + sizeof(log_to_stderr_));
  // @@protoc_insertion_point(copy_constructor:server.config.LogConfig)
}

void LogConfig::SharedCtor() {
  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_to_stderr_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(log_to_stderr_));
}

LogConfig::~LogConfig() {
  // @@protoc_insertion_point(destructor:server.config.LogConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogConfig::ArenaDtor(void* object) {
  LogConfig* _this = reinterpret_cast< LogConfig* >(object);
  (void)_this;
}
void LogConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogConfig& LogConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogConfig_server_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LogConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:server.config.LogConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&log_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_to_stderr_) -
      reinterpret_cast<char*>(&log_level_)) + sizeof(log_to_stderr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          log_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 log_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          log_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remain_days = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remain_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool log_to_stderr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          log_to_stderr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.config.LogConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 log_level = 1;
  if (this->log_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_log_level(), target);
  }

  // uint32 log_threshold = 2;
  if (this->log_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_log_threshold(), target);
  }

  // uint32 remain_days = 3;
  if (this->remain_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_remain_days(), target);
  }

  // bool log_to_stderr = 4;
  if (this->log_to_stderr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_log_to_stderr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.config.LogConfig)
  return target;
}

size_t LogConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.config.LogConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_log_level());
  }

  // uint32 log_threshold = 2;
  if (this->log_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_log_threshold());
  }

  // uint32 remain_days = 3;
  if (this->remain_days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remain_days());
  }

  // bool log_to_stderr = 4;
  if (this->log_to_stderr() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.config.LogConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LogConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.config.LogConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.config.LogConfig)
    MergeFrom(*source);
  }
}

void LogConfig::MergeFrom(const LogConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.config.LogConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_level() != 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.log_threshold() != 0) {
    _internal_set_log_threshold(from._internal_log_threshold());
  }
  if (from.remain_days() != 0) {
    _internal_set_remain_days(from._internal_remain_days());
  }
  if (from.log_to_stderr() != 0) {
    _internal_set_log_to_stderr(from._internal_log_to_stderr());
  }
}

void LogConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.config.LogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogConfig::CopyFrom(const LogConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.config.LogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogConfig::IsInitialized() const {
  return true;
}

void LogConfig::InternalSwap(LogConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogConfig, log_to_stderr_)
      + sizeof(LogConfig::log_to_stderr_)
      - PROTOBUF_FIELD_OFFSET(LogConfig, log_level_)>(
          reinterpret_cast<char*>(&log_level_),
          reinterpret_cast<char*>(&other->log_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SvrConfigBase_DbConfigsEntry_DoNotUse::SvrConfigBase_DbConfigsEntry_DoNotUse() {}
SvrConfigBase_DbConfigsEntry_DoNotUse::SvrConfigBase_DbConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SvrConfigBase_DbConfigsEntry_DoNotUse::MergeFrom(const SvrConfigBase_DbConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SvrConfigBase_DbConfigsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SvrConfigBase_DbConfigsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SvrConfigBase_RedisConfigsEntry_DoNotUse::SvrConfigBase_RedisConfigsEntry_DoNotUse() {}
SvrConfigBase_RedisConfigsEntry_DoNotUse::SvrConfigBase_RedisConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SvrConfigBase_RedisConfigsEntry_DoNotUse::MergeFrom(const SvrConfigBase_RedisConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SvrConfigBase_RedisConfigsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SvrConfigBase_RedisConfigsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SvrConfigBase::InitAsDefaultInstance() {
  ::server::config::_SvrConfigBase_default_instance_._instance.get_mutable()->log_config_ = const_cast< ::server::config::LogConfig*>(
      ::server::config::LogConfig::internal_default_instance());
}
class SvrConfigBase::_Internal {
 public:
  static const ::server::config::LogConfig& log_config(const SvrConfigBase* msg);
};

const ::server::config::LogConfig&
SvrConfigBase::_Internal::log_config(const SvrConfigBase* msg) {
  return *msg->log_config_;
}
SvrConfigBase::SvrConfigBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  db_configs_(arena),
  redis_configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.config.SvrConfigBase)
}
SvrConfigBase::SvrConfigBase(const SvrConfigBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_configs_.MergeFrom(from.db_configs_);
  redis_configs_.MergeFrom(from.redis_configs_);
  ns_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ns_url().empty()) {
    ns_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ns_url(),
      GetArena());
  }
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  if (from._internal_has_log_config()) {
    log_config_ = new ::server::config::LogConfig(*from.log_config_);
  } else {
    log_config_ = nullptr;
  }
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:server.config.SvrConfigBase)
}

void SvrConfigBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SvrConfigBase_server_5fconfig_2eproto.base);
  ns_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&log_config_)) + sizeof(group_id_));
}

SvrConfigBase::~SvrConfigBase() {
  // @@protoc_insertion_point(destructor:server.config.SvrConfigBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SvrConfigBase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ns_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_config_;
}

void SvrConfigBase::ArenaDtor(void* object) {
  SvrConfigBase* _this = reinterpret_cast< SvrConfigBase* >(object);
  (void)_this;
}
void SvrConfigBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SvrConfigBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SvrConfigBase& SvrConfigBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SvrConfigBase_server_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void SvrConfigBase::Clear() {
// @@protoc_insertion_point(message_clear_start:server.config.SvrConfigBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_configs_.Clear();
  redis_configs_.Clear();
  ns_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && log_config_ != nullptr) {
    delete log_config_;
  }
  log_config_ = nullptr;
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SvrConfigBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ns_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ns_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.config.SvrConfigBase.ns_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.config.SvrConfigBase.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 region_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 group_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .server.config.DbConfig> db_configs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&db_configs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .server.config.RedisConfig> redis_configs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&redis_configs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .server.config.LogConfig log_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SvrConfigBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.config.SvrConfigBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ns_url = 1;
  if (this->ns_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ns_url().data(), static_cast<int>(this->_internal_ns_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.config.SvrConfigBase.ns_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ns_url(), target);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.config.SvrConfigBase.service_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_name(), target);
  }

  // uint32 region_id = 3;
  if (this->region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_region_id(), target);
  }

  // uint32 group_id = 4;
  if (this->group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_group_id(), target);
  }

  // map<string, .server.config.DbConfig> db_configs = 5;
  if (!this->_internal_db_configs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "server.config.SvrConfigBase.DbConfigsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_db_configs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_db_configs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >::const_iterator
          it = this->_internal_db_configs().begin();
          it != this->_internal_db_configs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SvrConfigBase_DbConfigsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >::const_iterator
          it = this->_internal_db_configs().begin();
          it != this->_internal_db_configs().end(); ++it) {
        target = SvrConfigBase_DbConfigsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .server.config.RedisConfig> redis_configs = 6;
  if (!this->_internal_redis_configs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "server.config.SvrConfigBase.RedisConfigsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_redis_configs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_redis_configs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >::const_iterator
          it = this->_internal_redis_configs().begin();
          it != this->_internal_redis_configs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SvrConfigBase_RedisConfigsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >::const_iterator
          it = this->_internal_redis_configs().begin();
          it != this->_internal_redis_configs().end(); ++it) {
        target = SvrConfigBase_RedisConfigsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .server.config.LogConfig log_config = 7;
  if (this->has_log_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::log_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.config.SvrConfigBase)
  return target;
}

size_t SvrConfigBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.config.SvrConfigBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .server.config.DbConfig> db_configs = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_configs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >::const_iterator
      it = this->_internal_db_configs().begin();
      it != this->_internal_db_configs().end(); ++it) {
    total_size += SvrConfigBase_DbConfigsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .server.config.RedisConfig> redis_configs = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_redis_configs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >::const_iterator
      it = this->_internal_redis_configs().begin();
      it != this->_internal_redis_configs().end(); ++it) {
    total_size += SvrConfigBase_RedisConfigsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string ns_url = 1;
  if (this->ns_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ns_url());
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // .server.config.LogConfig log_config = 7;
  if (this->has_log_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_config_);
  }

  // uint32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_region_id());
  }

  // uint32 group_id = 4;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SvrConfigBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.config.SvrConfigBase)
  GOOGLE_DCHECK_NE(&from, this);
  const SvrConfigBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SvrConfigBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.config.SvrConfigBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.config.SvrConfigBase)
    MergeFrom(*source);
  }
}

void SvrConfigBase::MergeFrom(const SvrConfigBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.config.SvrConfigBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  db_configs_.MergeFrom(from.db_configs_);
  redis_configs_.MergeFrom(from.redis_configs_);
  if (from.ns_url().size() > 0) {
    _internal_set_ns_url(from._internal_ns_url());
  }
  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.has_log_config()) {
    _internal_mutable_log_config()->::server::config::LogConfig::MergeFrom(from._internal_log_config());
  }
  if (from.region_id() != 0) {
    _internal_set_region_id(from._internal_region_id());
  }
  if (from.group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void SvrConfigBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.config.SvrConfigBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrConfigBase::CopyFrom(const SvrConfigBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.config.SvrConfigBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrConfigBase::IsInitialized() const {
  return true;
}

void SvrConfigBase::InternalSwap(SvrConfigBase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_configs_.Swap(&other->db_configs_);
  redis_configs_.Swap(&other->redis_configs_);
  ns_url_.Swap(&other->ns_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SvrConfigBase, group_id_)
      + sizeof(SvrConfigBase::group_id_)
      - PROTOBUF_FIELD_OFFSET(SvrConfigBase, log_config_)>(
          reinterpret_cast<char*>(&log_config_),
          reinterpret_cast<char*>(&other->log_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SvrConfigBase::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace server
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::server::config::InstanceInfo* Arena::CreateMaybeMessage< ::server::config::InstanceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::config::InstanceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::server::config::DbConfig* Arena::CreateMaybeMessage< ::server::config::DbConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::config::DbConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::server::config::RedisNodeInfo* Arena::CreateMaybeMessage< ::server::config::RedisNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::config::RedisNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::server::config::RedisSentineInfo* Arena::CreateMaybeMessage< ::server::config::RedisSentineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::config::RedisSentineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::server::config::RedisConfig* Arena::CreateMaybeMessage< ::server::config::RedisConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::config::RedisConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::server::config::LogConfig* Arena::CreateMaybeMessage< ::server::config::LogConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::config::LogConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse* Arena::CreateMaybeMessage< ::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse* Arena::CreateMaybeMessage< ::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::server::config::SvrConfigBase* Arena::CreateMaybeMessage< ::server::config::SvrConfigBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::config::SvrConfigBase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fconfig_2eproto;
namespace server {
namespace config {
class DbConfig;
class DbConfigDefaultTypeInternal;
extern DbConfigDefaultTypeInternal _DbConfig_default_instance_;
class InstanceInfo;
class InstanceInfoDefaultTypeInternal;
extern InstanceInfoDefaultTypeInternal _InstanceInfo_default_instance_;
class LogConfig;
class LogConfigDefaultTypeInternal;
extern LogConfigDefaultTypeInternal _LogConfig_default_instance_;
class RedisConfig;
class RedisConfigDefaultTypeInternal;
extern RedisConfigDefaultTypeInternal _RedisConfig_default_instance_;
class SvrConfigBase;
class SvrConfigBaseDefaultTypeInternal;
extern SvrConfigBaseDefaultTypeInternal _SvrConfigBase_default_instance_;
class SvrConfigBase_DbConfigsEntry_DoNotUse;
class SvrConfigBase_DbConfigsEntry_DoNotUseDefaultTypeInternal;
extern SvrConfigBase_DbConfigsEntry_DoNotUseDefaultTypeInternal _SvrConfigBase_DbConfigsEntry_DoNotUse_default_instance_;
class SvrConfigBase_RedisConfigsEntry_DoNotUse;
class SvrConfigBase_RedisConfigsEntry_DoNotUseDefaultTypeInternal;
extern SvrConfigBase_RedisConfigsEntry_DoNotUseDefaultTypeInternal _SvrConfigBase_RedisConfigsEntry_DoNotUse_default_instance_;
}  // namespace config
}  // namespace server
PROTOBUF_NAMESPACE_OPEN
template<> ::server::config::DbConfig* Arena::CreateMaybeMessage<::server::config::DbConfig>(Arena*);
template<> ::server::config::InstanceInfo* Arena::CreateMaybeMessage<::server::config::InstanceInfo>(Arena*);
template<> ::server::config::LogConfig* Arena::CreateMaybeMessage<::server::config::LogConfig>(Arena*);
template<> ::server::config::RedisConfig* Arena::CreateMaybeMessage<::server::config::RedisConfig>(Arena*);
template<> ::server::config::SvrConfigBase* Arena::CreateMaybeMessage<::server::config::SvrConfigBase>(Arena*);
template<> ::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse* Arena::CreateMaybeMessage<::server::config::SvrConfigBase_DbConfigsEntry_DoNotUse>(Arena*);
template<> ::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse* Arena::CreateMaybeMessage<::server::config::SvrConfigBase_RedisConfigsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace server {
namespace config {

// ===================================================================

class InstanceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.config.InstanceInfo) */ {
 public:
  inline InstanceInfo() : InstanceInfo(nullptr) {};
  virtual ~InstanceInfo();

  InstanceInfo(const InstanceInfo& from);
  InstanceInfo(InstanceInfo&& from) noexcept
    : InstanceInfo() {
    *this = ::std::move(from);
  }

  inline InstanceInfo& operator=(const InstanceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceInfo& operator=(InstanceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstanceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstanceInfo* internal_default_instance() {
    return reinterpret_cast<const InstanceInfo*>(
               &_InstanceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InstanceInfo& a, InstanceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InstanceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstanceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstanceInfo* New() const final {
    return CreateMaybeMessage<InstanceInfo>(nullptr);
  }

  InstanceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstanceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstanceInfo& from);
  void MergeFrom(const InstanceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.config.InstanceInfo";
  }
  protected:
  explicit InstanceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfig_2eproto);
    return ::descriptor_table_server_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointFieldNumber = 3,
    kRegionIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // string endpoint = 3;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endpoint();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endpoint(
      std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // uint32 region_id = 1;
  void clear_region_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 region_id() const;
  void set_region_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region_id() const;
  void _internal_set_region_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:server.config.InstanceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DbConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.config.DbConfig) */ {
 public:
  inline DbConfig() : DbConfig(nullptr) {};
  virtual ~DbConfig();

  DbConfig(const DbConfig& from);
  DbConfig(DbConfig&& from) noexcept
    : DbConfig() {
    *this = ::std::move(from);
  }

  inline DbConfig& operator=(const DbConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbConfig& operator=(DbConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DbConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbConfig* internal_default_instance() {
    return reinterpret_cast<const DbConfig*>(
               &_DbConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DbConfig& a, DbConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DbConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DbConfig* New() const final {
    return CreateMaybeMessage<DbConfig>(nullptr);
  }

  DbConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DbConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DbConfig& from);
  void MergeFrom(const DbConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.config.DbConfig";
  }
  protected:
  explicit DbConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfig_2eproto);
    return ::descriptor_table_server_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceNameFieldNumber = 1,
    kHostFieldNumber = 2,
    kTimeoutMsFieldNumber = 3,
  };
  // string instance_name = 1;
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_name(
      std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host(
      std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint32 timeout_ms = 3;
  void clear_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_ms() const;
  void set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout_ms() const;
  void _internal_set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:server.config.DbConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RedisConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.config.RedisConfig) */ {
 public:
  inline RedisConfig() : RedisConfig(nullptr) {};
  virtual ~RedisConfig();

  RedisConfig(const RedisConfig& from);
  RedisConfig(RedisConfig&& from) noexcept
    : RedisConfig() {
    *this = ::std::move(from);
  }

  inline RedisConfig& operator=(const RedisConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedisConfig& operator=(RedisConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedisConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedisConfig* internal_default_instance() {
    return reinterpret_cast<const RedisConfig*>(
               &_RedisConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RedisConfig& a, RedisConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RedisConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedisConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedisConfig* New() const final {
    return CreateMaybeMessage<RedisConfig>(nullptr);
  }

  RedisConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedisConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedisConfig& from);
  void MergeFrom(const RedisConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedisConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.config.RedisConfig";
  }
  protected:
  explicit RedisConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfig_2eproto);
    return ::descriptor_table_server_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceNameFieldNumber = 1,
    kHostFieldNumber = 2,
    kTimeoutMsFieldNumber = 3,
  };
  // string instance_name = 1;
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_name(
      std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host(
      std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint32 timeout_ms = 3;
  void clear_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_ms() const;
  void set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout_ms() const;
  void _internal_set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:server.config.RedisConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LogConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.config.LogConfig) */ {
 public:
  inline LogConfig() : LogConfig(nullptr) {};
  virtual ~LogConfig();

  LogConfig(const LogConfig& from);
  LogConfig(LogConfig&& from) noexcept
    : LogConfig() {
    *this = ::std::move(from);
  }

  inline LogConfig& operator=(const LogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogConfig& operator=(LogConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogConfig* internal_default_instance() {
    return reinterpret_cast<const LogConfig*>(
               &_LogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogConfig& a, LogConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LogConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogConfig* New() const final {
    return CreateMaybeMessage<LogConfig>(nullptr);
  }

  LogConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogConfig& from);
  void MergeFrom(const LogConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.config.LogConfig";
  }
  protected:
  explicit LogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfig_2eproto);
    return ::descriptor_table_server_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogLevelFieldNumber = 1,
    kLogThresholdFieldNumber = 2,
    kRemainDaysFieldNumber = 3,
    kLogToStderrFieldNumber = 4,
  };
  // uint32 log_level = 1;
  void clear_log_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 log_level() const;
  void set_log_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_log_level() const;
  void _internal_set_log_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 log_threshold = 2;
  void clear_log_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 log_threshold() const;
  void set_log_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_log_threshold() const;
  void _internal_set_log_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 remain_days = 3;
  void clear_remain_days();
  ::PROTOBUF_NAMESPACE_ID::uint32 remain_days() const;
  void set_remain_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remain_days() const;
  void _internal_set_remain_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool log_to_stderr = 4;
  void clear_log_to_stderr();
  bool log_to_stderr() const;
  void set_log_to_stderr(bool value);
  private:
  bool _internal_log_to_stderr() const;
  void _internal_set_log_to_stderr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:server.config.LogConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 log_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 log_threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remain_days_;
  bool log_to_stderr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SvrConfigBase_DbConfigsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SvrConfigBase_DbConfigsEntry_DoNotUse, 
    std::string, ::server::config::DbConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SvrConfigBase_DbConfigsEntry_DoNotUse, 
    std::string, ::server::config::DbConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SvrConfigBase_DbConfigsEntry_DoNotUse();
  SvrConfigBase_DbConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SvrConfigBase_DbConfigsEntry_DoNotUse& other);
  static const SvrConfigBase_DbConfigsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SvrConfigBase_DbConfigsEntry_DoNotUse*>(&_SvrConfigBase_DbConfigsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "server.config.SvrConfigBase.DbConfigsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfig_2eproto);
    return ::descriptor_table_server_5fconfig_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class SvrConfigBase_RedisConfigsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SvrConfigBase_RedisConfigsEntry_DoNotUse, 
    std::string, ::server::config::RedisConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SvrConfigBase_RedisConfigsEntry_DoNotUse, 
    std::string, ::server::config::RedisConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SvrConfigBase_RedisConfigsEntry_DoNotUse();
  SvrConfigBase_RedisConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SvrConfigBase_RedisConfigsEntry_DoNotUse& other);
  static const SvrConfigBase_RedisConfigsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SvrConfigBase_RedisConfigsEntry_DoNotUse*>(&_SvrConfigBase_RedisConfigsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "server.config.SvrConfigBase.RedisConfigsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfig_2eproto);
    return ::descriptor_table_server_5fconfig_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class SvrConfigBase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.config.SvrConfigBase) */ {
 public:
  inline SvrConfigBase() : SvrConfigBase(nullptr) {};
  virtual ~SvrConfigBase();

  SvrConfigBase(const SvrConfigBase& from);
  SvrConfigBase(SvrConfigBase&& from) noexcept
    : SvrConfigBase() {
    *this = ::std::move(from);
  }

  inline SvrConfigBase& operator=(const SvrConfigBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline SvrConfigBase& operator=(SvrConfigBase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SvrConfigBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SvrConfigBase* internal_default_instance() {
    return reinterpret_cast<const SvrConfigBase*>(
               &_SvrConfigBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SvrConfigBase& a, SvrConfigBase& b) {
    a.Swap(&b);
  }
  inline void Swap(SvrConfigBase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SvrConfigBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SvrConfigBase* New() const final {
    return CreateMaybeMessage<SvrConfigBase>(nullptr);
  }

  SvrConfigBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SvrConfigBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SvrConfigBase& from);
  void MergeFrom(const SvrConfigBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SvrConfigBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.config.SvrConfigBase";
  }
  protected:
  explicit SvrConfigBase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fconfig_2eproto);
    return ::descriptor_table_server_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDbConfigsFieldNumber = 5,
    kRedisConfigsFieldNumber = 6,
    kNsUrlFieldNumber = 1,
    kServiceNameFieldNumber = 2,
    kLogConfigFieldNumber = 7,
    kRegionIdFieldNumber = 3,
    kGroupIdFieldNumber = 4,
  };
  // map<string, .server.config.DbConfig> db_configs = 5;
  int db_configs_size() const;
  private:
  int _internal_db_configs_size() const;
  public:
  void clear_db_configs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >&
      _internal_db_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >*
      _internal_mutable_db_configs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >&
      db_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >*
      mutable_db_configs();

  // map<string, .server.config.RedisConfig> redis_configs = 6;
  int redis_configs_size() const;
  private:
  int _internal_redis_configs_size() const;
  public:
  void clear_redis_configs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >&
      _internal_redis_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >*
      _internal_mutable_redis_configs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >&
      redis_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >*
      mutable_redis_configs();

  // string ns_url = 1;
  void clear_ns_url();
  const std::string& ns_url() const;
  void set_ns_url(const std::string& value);
  void set_ns_url(std::string&& value);
  void set_ns_url(const char* value);
  void set_ns_url(const char* value, size_t size);
  std::string* mutable_ns_url();
  std::string* release_ns_url();
  void set_allocated_ns_url(std::string* ns_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ns_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ns_url(
      std::string* ns_url);
  private:
  const std::string& _internal_ns_url() const;
  void _internal_set_ns_url(const std::string& value);
  std::string* _internal_mutable_ns_url();
  public:

  // string service_name = 2;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // .server.config.LogConfig log_config = 7;
  bool has_log_config() const;
  private:
  bool _internal_has_log_config() const;
  public:
  void clear_log_config();
  const ::server::config::LogConfig& log_config() const;
  ::server::config::LogConfig* release_log_config();
  ::server::config::LogConfig* mutable_log_config();
  void set_allocated_log_config(::server::config::LogConfig* log_config);
  private:
  const ::server::config::LogConfig& _internal_log_config() const;
  ::server::config::LogConfig* _internal_mutable_log_config();
  public:
  void unsafe_arena_set_allocated_log_config(
      ::server::config::LogConfig* log_config);
  ::server::config::LogConfig* unsafe_arena_release_log_config();

  // uint32 region_id = 3;
  void clear_region_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 region_id() const;
  void set_region_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region_id() const;
  void _internal_set_region_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 group_id = 4;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:server.config.SvrConfigBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SvrConfigBase_DbConfigsEntry_DoNotUse,
      std::string, ::server::config::DbConfig,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > db_configs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SvrConfigBase_RedisConfigsEntry_DoNotUse,
      std::string, ::server::config::RedisConfig,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > redis_configs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ns_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::server::config::LogConfig* log_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstanceInfo

// uint32 region_id = 1;
inline void InstanceInfo::clear_region_id() {
  region_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceInfo::_internal_region_id() const {
  return region_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceInfo::region_id() const {
  // @@protoc_insertion_point(field_get:server.config.InstanceInfo.region_id)
  return _internal_region_id();
}
inline void InstanceInfo::_internal_set_region_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  region_id_ = value;
}
inline void InstanceInfo::set_region_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:server.config.InstanceInfo.region_id)
}

// uint32 group_id = 2;
inline void InstanceInfo::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceInfo::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceInfo::group_id() const {
  // @@protoc_insertion_point(field_get:server.config.InstanceInfo.group_id)
  return _internal_group_id();
}
inline void InstanceInfo::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void InstanceInfo::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.config.InstanceInfo.group_id)
}

// string endpoint = 3;
inline void InstanceInfo::clear_endpoint() {
  endpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstanceInfo::endpoint() const {
  // @@protoc_insertion_point(field_get:server.config.InstanceInfo.endpoint)
  return _internal_endpoint();
}
inline void InstanceInfo::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:server.config.InstanceInfo.endpoint)
}
inline std::string* InstanceInfo::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:server.config.InstanceInfo.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& InstanceInfo::_internal_endpoint() const {
  return endpoint_.Get();
}
inline void InstanceInfo::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstanceInfo::set_endpoint(std::string&& value) {
  
  endpoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.config.InstanceInfo.endpoint)
}
inline void InstanceInfo::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.config.InstanceInfo.endpoint)
}
inline void InstanceInfo::set_endpoint(const char* value,
    size_t size) {
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.config.InstanceInfo.endpoint)
}
inline std::string* InstanceInfo::_internal_mutable_endpoint() {
  
  return endpoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstanceInfo::release_endpoint() {
  // @@protoc_insertion_point(field_release:server.config.InstanceInfo.endpoint)
  return endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstanceInfo::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.config.InstanceInfo.endpoint)
}
inline std::string* InstanceInfo::unsafe_arena_release_endpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.config.InstanceInfo.endpoint)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endpoint_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstanceInfo::unsafe_arena_set_allocated_endpoint(
    std::string* endpoint) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endpoint, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.config.InstanceInfo.endpoint)
}

// -------------------------------------------------------------------

// DbConfig

// string instance_name = 1;
inline void DbConfig::clear_instance_name() {
  instance_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DbConfig::instance_name() const {
  // @@protoc_insertion_point(field_get:server.config.DbConfig.instance_name)
  return _internal_instance_name();
}
inline void DbConfig::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:server.config.DbConfig.instance_name)
}
inline std::string* DbConfig::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:server.config.DbConfig.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& DbConfig::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void DbConfig::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DbConfig::set_instance_name(std::string&& value) {
  
  instance_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.config.DbConfig.instance_name)
}
inline void DbConfig::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.config.DbConfig.instance_name)
}
inline void DbConfig::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.config.DbConfig.instance_name)
}
inline std::string* DbConfig::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DbConfig::release_instance_name() {
  // @@protoc_insertion_point(field_release:server.config.DbConfig.instance_name)
  return instance_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DbConfig::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.config.DbConfig.instance_name)
}
inline std::string* DbConfig::unsafe_arena_release_instance_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.config.DbConfig.instance_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DbConfig::unsafe_arena_set_allocated_instance_name(
    std::string* instance_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.config.DbConfig.instance_name)
}

// string host = 2;
inline void DbConfig::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DbConfig::host() const {
  // @@protoc_insertion_point(field_get:server.config.DbConfig.host)
  return _internal_host();
}
inline void DbConfig::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:server.config.DbConfig.host)
}
inline std::string* DbConfig::mutable_host() {
  // @@protoc_insertion_point(field_mutable:server.config.DbConfig.host)
  return _internal_mutable_host();
}
inline const std::string& DbConfig::_internal_host() const {
  return host_.Get();
}
inline void DbConfig::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DbConfig::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.config.DbConfig.host)
}
inline void DbConfig::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.config.DbConfig.host)
}
inline void DbConfig::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.config.DbConfig.host)
}
inline std::string* DbConfig::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DbConfig::release_host() {
  // @@protoc_insertion_point(field_release:server.config.DbConfig.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DbConfig::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.config.DbConfig.host)
}
inline std::string* DbConfig::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.config.DbConfig.host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DbConfig::unsafe_arena_set_allocated_host(
    std::string* host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host != nullptr) {
    
  } else {
    
  }
  host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.config.DbConfig.host)
}

// uint32 timeout_ms = 3;
inline void DbConfig::clear_timeout_ms() {
  timeout_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DbConfig::_internal_timeout_ms() const {
  return timeout_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DbConfig::timeout_ms() const {
  // @@protoc_insertion_point(field_get:server.config.DbConfig.timeout_ms)
  return _internal_timeout_ms();
}
inline void DbConfig::_internal_set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ms_ = value;
}
inline void DbConfig::set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:server.config.DbConfig.timeout_ms)
}

// -------------------------------------------------------------------

// RedisConfig

// string instance_name = 1;
inline void RedisConfig::clear_instance_name() {
  instance_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RedisConfig::instance_name() const {
  // @@protoc_insertion_point(field_get:server.config.RedisConfig.instance_name)
  return _internal_instance_name();
}
inline void RedisConfig::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:server.config.RedisConfig.instance_name)
}
inline std::string* RedisConfig::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:server.config.RedisConfig.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& RedisConfig::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void RedisConfig::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RedisConfig::set_instance_name(std::string&& value) {
  
  instance_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.config.RedisConfig.instance_name)
}
inline void RedisConfig::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.config.RedisConfig.instance_name)
}
inline void RedisConfig::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.config.RedisConfig.instance_name)
}
inline std::string* RedisConfig::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RedisConfig::release_instance_name() {
  // @@protoc_insertion_point(field_release:server.config.RedisConfig.instance_name)
  return instance_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RedisConfig::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.config.RedisConfig.instance_name)
}
inline std::string* RedisConfig::unsafe_arena_release_instance_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.config.RedisConfig.instance_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RedisConfig::unsafe_arena_set_allocated_instance_name(
    std::string* instance_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.config.RedisConfig.instance_name)
}

// string host = 2;
inline void RedisConfig::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RedisConfig::host() const {
  // @@protoc_insertion_point(field_get:server.config.RedisConfig.host)
  return _internal_host();
}
inline void RedisConfig::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:server.config.RedisConfig.host)
}
inline std::string* RedisConfig::mutable_host() {
  // @@protoc_insertion_point(field_mutable:server.config.RedisConfig.host)
  return _internal_mutable_host();
}
inline const std::string& RedisConfig::_internal_host() const {
  return host_.Get();
}
inline void RedisConfig::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RedisConfig::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.config.RedisConfig.host)
}
inline void RedisConfig::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.config.RedisConfig.host)
}
inline void RedisConfig::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.config.RedisConfig.host)
}
inline std::string* RedisConfig::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RedisConfig::release_host() {
  // @@protoc_insertion_point(field_release:server.config.RedisConfig.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RedisConfig::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.config.RedisConfig.host)
}
inline std::string* RedisConfig::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.config.RedisConfig.host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RedisConfig::unsafe_arena_set_allocated_host(
    std::string* host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host != nullptr) {
    
  } else {
    
  }
  host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.config.RedisConfig.host)
}

// uint32 timeout_ms = 3;
inline void RedisConfig::clear_timeout_ms() {
  timeout_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedisConfig::_internal_timeout_ms() const {
  return timeout_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedisConfig::timeout_ms() const {
  // @@protoc_insertion_point(field_get:server.config.RedisConfig.timeout_ms)
  return _internal_timeout_ms();
}
inline void RedisConfig::_internal_set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ms_ = value;
}
inline void RedisConfig::set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:server.config.RedisConfig.timeout_ms)
}

// -------------------------------------------------------------------

// LogConfig

// uint32 log_level = 1;
inline void LogConfig::clear_log_level() {
  log_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::_internal_log_level() const {
  return log_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::log_level() const {
  // @@protoc_insertion_point(field_get:server.config.LogConfig.log_level)
  return _internal_log_level();
}
inline void LogConfig::_internal_set_log_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  log_level_ = value;
}
inline void LogConfig::set_log_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:server.config.LogConfig.log_level)
}

// uint32 log_threshold = 2;
inline void LogConfig::clear_log_threshold() {
  log_threshold_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::_internal_log_threshold() const {
  return log_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::log_threshold() const {
  // @@protoc_insertion_point(field_get:server.config.LogConfig.log_threshold)
  return _internal_log_threshold();
}
inline void LogConfig::_internal_set_log_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  log_threshold_ = value;
}
inline void LogConfig::set_log_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_log_threshold(value);
  // @@protoc_insertion_point(field_set:server.config.LogConfig.log_threshold)
}

// uint32 remain_days = 3;
inline void LogConfig::clear_remain_days() {
  remain_days_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::_internal_remain_days() const {
  return remain_days_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogConfig::remain_days() const {
  // @@protoc_insertion_point(field_get:server.config.LogConfig.remain_days)
  return _internal_remain_days();
}
inline void LogConfig::_internal_set_remain_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remain_days_ = value;
}
inline void LogConfig::set_remain_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remain_days(value);
  // @@protoc_insertion_point(field_set:server.config.LogConfig.remain_days)
}

// bool log_to_stderr = 4;
inline void LogConfig::clear_log_to_stderr() {
  log_to_stderr_ = false;
}
inline bool LogConfig::_internal_log_to_stderr() const {
  return log_to_stderr_;
}
inline bool LogConfig::log_to_stderr() const {
  // @@protoc_insertion_point(field_get:server.config.LogConfig.log_to_stderr)
  return _internal_log_to_stderr();
}
inline void LogConfig::_internal_set_log_to_stderr(bool value) {
  
  log_to_stderr_ = value;
}
inline void LogConfig::set_log_to_stderr(bool value) {
  _internal_set_log_to_stderr(value);
  // @@protoc_insertion_point(field_set:server.config.LogConfig.log_to_stderr)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SvrConfigBase

// string ns_url = 1;
inline void SvrConfigBase::clear_ns_url() {
  ns_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SvrConfigBase::ns_url() const {
  // @@protoc_insertion_point(field_get:server.config.SvrConfigBase.ns_url)
  return _internal_ns_url();
}
inline void SvrConfigBase::set_ns_url(const std::string& value) {
  _internal_set_ns_url(value);
  // @@protoc_insertion_point(field_set:server.config.SvrConfigBase.ns_url)
}
inline std::string* SvrConfigBase::mutable_ns_url() {
  // @@protoc_insertion_point(field_mutable:server.config.SvrConfigBase.ns_url)
  return _internal_mutable_ns_url();
}
inline const std::string& SvrConfigBase::_internal_ns_url() const {
  return ns_url_.Get();
}
inline void SvrConfigBase::_internal_set_ns_url(const std::string& value) {
  
  ns_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SvrConfigBase::set_ns_url(std::string&& value) {
  
  ns_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.config.SvrConfigBase.ns_url)
}
inline void SvrConfigBase::set_ns_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ns_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.config.SvrConfigBase.ns_url)
}
inline void SvrConfigBase::set_ns_url(const char* value,
    size_t size) {
  
  ns_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.config.SvrConfigBase.ns_url)
}
inline std::string* SvrConfigBase::_internal_mutable_ns_url() {
  
  return ns_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SvrConfigBase::release_ns_url() {
  // @@protoc_insertion_point(field_release:server.config.SvrConfigBase.ns_url)
  return ns_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SvrConfigBase::set_allocated_ns_url(std::string* ns_url) {
  if (ns_url != nullptr) {
    
  } else {
    
  }
  ns_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ns_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.config.SvrConfigBase.ns_url)
}
inline std::string* SvrConfigBase::unsafe_arena_release_ns_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.config.SvrConfigBase.ns_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ns_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SvrConfigBase::unsafe_arena_set_allocated_ns_url(
    std::string* ns_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ns_url != nullptr) {
    
  } else {
    
  }
  ns_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ns_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.config.SvrConfigBase.ns_url)
}

// string service_name = 2;
inline void SvrConfigBase::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SvrConfigBase::service_name() const {
  // @@protoc_insertion_point(field_get:server.config.SvrConfigBase.service_name)
  return _internal_service_name();
}
inline void SvrConfigBase::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:server.config.SvrConfigBase.service_name)
}
inline std::string* SvrConfigBase::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:server.config.SvrConfigBase.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& SvrConfigBase::_internal_service_name() const {
  return service_name_.Get();
}
inline void SvrConfigBase::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SvrConfigBase::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.config.SvrConfigBase.service_name)
}
inline void SvrConfigBase::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.config.SvrConfigBase.service_name)
}
inline void SvrConfigBase::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.config.SvrConfigBase.service_name)
}
inline std::string* SvrConfigBase::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SvrConfigBase::release_service_name() {
  // @@protoc_insertion_point(field_release:server.config.SvrConfigBase.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SvrConfigBase::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.config.SvrConfigBase.service_name)
}
inline std::string* SvrConfigBase::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.config.SvrConfigBase.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SvrConfigBase::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.config.SvrConfigBase.service_name)
}

// uint32 region_id = 3;
inline void SvrConfigBase::clear_region_id() {
  region_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SvrConfigBase::_internal_region_id() const {
  return region_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SvrConfigBase::region_id() const {
  // @@protoc_insertion_point(field_get:server.config.SvrConfigBase.region_id)
  return _internal_region_id();
}
inline void SvrConfigBase::_internal_set_region_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  region_id_ = value;
}
inline void SvrConfigBase::set_region_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:server.config.SvrConfigBase.region_id)
}

// uint32 group_id = 4;
inline void SvrConfigBase::clear_group_id() {
  group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SvrConfigBase::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SvrConfigBase::group_id() const {
  // @@protoc_insertion_point(field_get:server.config.SvrConfigBase.group_id)
  return _internal_group_id();
}
inline void SvrConfigBase::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_id_ = value;
}
inline void SvrConfigBase::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.config.SvrConfigBase.group_id)
}

// map<string, .server.config.DbConfig> db_configs = 5;
inline int SvrConfigBase::_internal_db_configs_size() const {
  return db_configs_.size();
}
inline int SvrConfigBase::db_configs_size() const {
  return _internal_db_configs_size();
}
inline void SvrConfigBase::clear_db_configs() {
  db_configs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >&
SvrConfigBase::_internal_db_configs() const {
  return db_configs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >&
SvrConfigBase::db_configs() const {
  // @@protoc_insertion_point(field_map:server.config.SvrConfigBase.db_configs)
  return _internal_db_configs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >*
SvrConfigBase::_internal_mutable_db_configs() {
  return db_configs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::DbConfig >*
SvrConfigBase::mutable_db_configs() {
  // @@protoc_insertion_point(field_mutable_map:server.config.SvrConfigBase.db_configs)
  return _internal_mutable_db_configs();
}

// map<string, .server.config.RedisConfig> redis_configs = 6;
inline int SvrConfigBase::_internal_redis_configs_size() const {
  return redis_configs_.size();
}
inline int SvrConfigBase::redis_configs_size() const {
  return _internal_redis_configs_size();
}
inline void SvrConfigBase::clear_redis_configs() {
  redis_configs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >&
SvrConfigBase::_internal_redis_configs() const {
  return redis_configs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >&
SvrConfigBase::redis_configs() const {
  // @@protoc_insertion_point(field_map:server.config.SvrConfigBase.redis_configs)
  return _internal_redis_configs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >*
SvrConfigBase::_internal_mutable_redis_configs() {
  return redis_configs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::server::config::RedisConfig >*
SvrConfigBase::mutable_redis_configs() {
  // @@protoc_insertion_point(field_mutable_map:server.config.SvrConfigBase.redis_configs)
  return _internal_mutable_redis_configs();
}

// .server.config.LogConfig log_config = 7;
inline bool SvrConfigBase::_internal_has_log_config() const {
  return this != internal_default_instance() && log_config_ != nullptr;
}
inline bool SvrConfigBase::has_log_config() const {
  return _internal_has_log_config();
}
inline void SvrConfigBase::clear_log_config() {
  if (GetArena() == nullptr && log_config_ != nullptr) {
    delete log_config_;
  }
  log_config_ = nullptr;
}
inline const ::server::config::LogConfig& SvrConfigBase::_internal_log_config() const {
  const ::server::config::LogConfig* p = log_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server::config::LogConfig*>(
      &::server::config::_LogConfig_default_instance_);
}
inline const ::server::config::LogConfig& SvrConfigBase::log_config() const {
  // @@protoc_insertion_point(field_get:server.config.SvrConfigBase.log_config)
  return _internal_log_config();
}
inline void SvrConfigBase::unsafe_arena_set_allocated_log_config(
    ::server::config::LogConfig* log_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_config_);
  }
  log_config_ = log_config;
  if (log_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.config.SvrConfigBase.log_config)
}
inline ::server::config::LogConfig* SvrConfigBase::release_log_config() {
  auto temp = unsafe_arena_release_log_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::config::LogConfig* SvrConfigBase::unsafe_arena_release_log_config() {
  // @@protoc_insertion_point(field_release:server.config.SvrConfigBase.log_config)
  
  ::server::config::LogConfig* temp = log_config_;
  log_config_ = nullptr;
  return temp;
}
inline ::server::config::LogConfig* SvrConfigBase::_internal_mutable_log_config() {
  
  if (log_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::config::LogConfig>(GetArena());
    log_config_ = p;
  }
  return log_config_;
}
inline ::server::config::LogConfig* SvrConfigBase::mutable_log_config() {
  // @@protoc_insertion_point(field_mutable:server.config.SvrConfigBase.log_config)
  return _internal_mutable_log_config();
}
inline void SvrConfigBase::set_allocated_log_config(::server::config::LogConfig* log_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_config_;
  }
  if (log_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log_config);
    if (message_arena != submessage_arena) {
      log_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_config, submessage_arena);
    }
    
  } else {
    
  }
  log_config_ = log_config;
  // @@protoc_insertion_point(field_set_allocated:server.config.SvrConfigBase.log_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace server

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fconfig_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validator.proto

#include "validator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_validator_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_validator_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ArrayRule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_validator_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DoubleRule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_validator_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EnumRule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_validator_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatRule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_validator_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int32Rule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_validator_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Rule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_validator_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringRule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_validator_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UInt32Rule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_validator_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UInt64Rule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_validator_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_ValidateRules;
}  // namespace protobuf_validator_2eproto
namespace validator {
class Int32RuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Int32Rule>
      _instance;
  ::google::protobuf::int32 lt_;
  ::google::protobuf::int32 lte_;
  ::google::protobuf::int32 gt_;
  ::google::protobuf::int32 gte_;
} _Int32Rule_default_instance_;
class Int64RuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Int64Rule>
      _instance;
  ::google::protobuf::int64 lt_;
  ::google::protobuf::int64 lte_;
  ::google::protobuf::int64 gt_;
  ::google::protobuf::int64 gte_;
} _Int64Rule_default_instance_;
class UInt32RuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UInt32Rule>
      _instance;
  ::google::protobuf::uint32 lt_;
  ::google::protobuf::uint32 lte_;
  ::google::protobuf::uint32 gt_;
  ::google::protobuf::uint32 gte_;
} _UInt32Rule_default_instance_;
class UInt64RuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UInt64Rule>
      _instance;
  ::google::protobuf::uint64 lt_;
  ::google::protobuf::uint64 lte_;
  ::google::protobuf::uint64 gt_;
  ::google::protobuf::uint64 gte_;
} _UInt64Rule_default_instance_;
class FloatRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FloatRule>
      _instance;
  float lt_;
  float lte_;
  float gt_;
  float gte_;
} _FloatRule_default_instance_;
class DoubleRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DoubleRule>
      _instance;
  double lt_;
  double lte_;
  double gt_;
  double gte_;
} _DoubleRule_default_instance_;
class StringRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StringRule>
      _instance;
  ::google::protobuf::uint32 min_len_;
  ::google::protobuf::uint32 max_len_;
} _StringRule_default_instance_;
class EnumRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnumRule>
      _instance;
} _EnumRule_default_instance_;
class ArrayRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArrayRule>
      _instance;
  ::google::protobuf::uint32 min_len_;
  ::google::protobuf::uint32 max_len_;
} _ArrayRule_default_instance_;
class ValidateRulesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ValidateRules>
      _instance;
  const ::validator::Int32Rule* int32_;
  const ::validator::Int64Rule* int64_;
  const ::validator::UInt32Rule* uint32_;
  const ::validator::UInt64Rule* uint64_;
  const ::validator::FloatRule* float__;
  const ::validator::DoubleRule* double__;
  const ::validator::StringRule* string_;
  const ::validator::EnumRule* enum__;
  const ::validator::ArrayRule* array_;
} _ValidateRules_default_instance_;
}  // namespace validator
namespace protobuf_validator_2eproto {
static void InitDefaultsInt32Rule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_Int32Rule_default_instance_;
    new (ptr) ::validator::Int32Rule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::Int32Rule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Int32Rule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInt32Rule}, {}};

static void InitDefaultsInt64Rule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_Int64Rule_default_instance_;
    new (ptr) ::validator::Int64Rule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::Int64Rule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Int64Rule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInt64Rule}, {}};

static void InitDefaultsUInt32Rule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_UInt32Rule_default_instance_;
    new (ptr) ::validator::UInt32Rule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::UInt32Rule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UInt32Rule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUInt32Rule}, {}};

static void InitDefaultsUInt64Rule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_UInt64Rule_default_instance_;
    new (ptr) ::validator::UInt64Rule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::UInt64Rule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UInt64Rule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUInt64Rule}, {}};

static void InitDefaultsFloatRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_FloatRule_default_instance_;
    new (ptr) ::validator::FloatRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::FloatRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FloatRule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFloatRule}, {}};

static void InitDefaultsDoubleRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_DoubleRule_default_instance_;
    new (ptr) ::validator::DoubleRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::DoubleRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DoubleRule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoubleRule}, {}};

static void InitDefaultsStringRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_StringRule_default_instance_;
    new (ptr) ::validator::StringRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::StringRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StringRule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStringRule}, {}};

static void InitDefaultsEnumRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_EnumRule_default_instance_;
    new (ptr) ::validator::EnumRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::EnumRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EnumRule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEnumRule}, {}};

static void InitDefaultsArrayRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_ArrayRule_default_instance_;
    new (ptr) ::validator::ArrayRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::ArrayRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ArrayRule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArrayRule}, {}};

static void InitDefaultsValidateRules() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_ValidateRules_default_instance_;
    new (ptr) ::validator::ValidateRules();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::ValidateRules::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_ValidateRules =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsValidateRules}, {
      &protobuf_validator_2eproto::scc_info_Int32Rule.base,
      &protobuf_validator_2eproto::scc_info_Int64Rule.base,
      &protobuf_validator_2eproto::scc_info_UInt32Rule.base,
      &protobuf_validator_2eproto::scc_info_UInt64Rule.base,
      &protobuf_validator_2eproto::scc_info_FloatRule.base,
      &protobuf_validator_2eproto::scc_info_DoubleRule.base,
      &protobuf_validator_2eproto::scc_info_StringRule.base,
      &protobuf_validator_2eproto::scc_info_EnumRule.base,
      &protobuf_validator_2eproto::scc_info_ArrayRule.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Int32Rule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Int64Rule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UInt32Rule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UInt64Rule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FloatRule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DoubleRule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StringRule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EnumRule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArrayRule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ValidateRules.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int32Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int32Rule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::validator::Int32RuleDefaultTypeInternal, lt_),
  offsetof(::validator::Int32RuleDefaultTypeInternal, lte_),
  offsetof(::validator::Int32RuleDefaultTypeInternal, gt_),
  offsetof(::validator::Int32RuleDefaultTypeInternal, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int32Rule, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int32Rule, not_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int32Rule, lt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int32Rule, lte_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int32Rule, gt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int32Rule, gte_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int64Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int64Rule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::validator::Int64RuleDefaultTypeInternal, lt_),
  offsetof(::validator::Int64RuleDefaultTypeInternal, lte_),
  offsetof(::validator::Int64RuleDefaultTypeInternal, gt_),
  offsetof(::validator::Int64RuleDefaultTypeInternal, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int64Rule, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int64Rule, not_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int64Rule, lt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int64Rule, lte_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int64Rule, gt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::Int64Rule, gte_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt32Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt32Rule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::validator::UInt32RuleDefaultTypeInternal, lt_),
  offsetof(::validator::UInt32RuleDefaultTypeInternal, lte_),
  offsetof(::validator::UInt32RuleDefaultTypeInternal, gt_),
  offsetof(::validator::UInt32RuleDefaultTypeInternal, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt32Rule, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt32Rule, not_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt32Rule, lt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt32Rule, lte_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt32Rule, gt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt32Rule, gte_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt64Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt64Rule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::validator::UInt64RuleDefaultTypeInternal, lt_),
  offsetof(::validator::UInt64RuleDefaultTypeInternal, lte_),
  offsetof(::validator::UInt64RuleDefaultTypeInternal, gt_),
  offsetof(::validator::UInt64RuleDefaultTypeInternal, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt64Rule, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt64Rule, not_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt64Rule, lt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt64Rule, lte_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt64Rule, gt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::UInt64Rule, gte_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::FloatRule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::FloatRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::validator::FloatRuleDefaultTypeInternal, lt_),
  offsetof(::validator::FloatRuleDefaultTypeInternal, lte_),
  offsetof(::validator::FloatRuleDefaultTypeInternal, gt_),
  offsetof(::validator::FloatRuleDefaultTypeInternal, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::FloatRule, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::FloatRule, not_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::FloatRule, lt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::FloatRule, lte_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::FloatRule, gt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::FloatRule, gte_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::DoubleRule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::DoubleRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::validator::DoubleRuleDefaultTypeInternal, lt_),
  offsetof(::validator::DoubleRuleDefaultTypeInternal, lte_),
  offsetof(::validator::DoubleRuleDefaultTypeInternal, gt_),
  offsetof(::validator::DoubleRuleDefaultTypeInternal, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::DoubleRule, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::DoubleRule, not_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::DoubleRule, lt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::DoubleRule, lte_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::DoubleRule, gt_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::DoubleRule, gte_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::StringRule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::StringRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::StringRule, not_empty_),
  offsetof(::validator::StringRuleDefaultTypeInternal, min_len_),
  offsetof(::validator::StringRuleDefaultTypeInternal, max_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::StringRule, regex_pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::StringRule, min_len_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::StringRule, max_len_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::EnumRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::EnumRule, in_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::ArrayRule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::ArrayRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::ArrayRule, not_empty_),
  offsetof(::validator::ArrayRuleDefaultTypeInternal, min_len_),
  offsetof(::validator::ArrayRuleDefaultTypeInternal, max_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::ArrayRule, min_len_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::ArrayRule, max_len_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::ValidateRules, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::ValidateRules, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::validator::ValidateRulesDefaultTypeInternal, int32_),
  offsetof(::validator::ValidateRulesDefaultTypeInternal, int64_),
  offsetof(::validator::ValidateRulesDefaultTypeInternal, uint32_),
  offsetof(::validator::ValidateRulesDefaultTypeInternal, uint64_),
  offsetof(::validator::ValidateRulesDefaultTypeInternal, float__),
  offsetof(::validator::ValidateRulesDefaultTypeInternal, double__),
  offsetof(::validator::ValidateRulesDefaultTypeInternal, string_),
  offsetof(::validator::ValidateRulesDefaultTypeInternal, enum__),
  offsetof(::validator::ValidateRulesDefaultTypeInternal, array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::validator::ValidateRules, rule_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::validator::Int32Rule)},
  { 15, -1, sizeof(::validator::Int64Rule)},
  { 30, -1, sizeof(::validator::UInt32Rule)},
  { 45, -1, sizeof(::validator::UInt64Rule)},
  { 60, -1, sizeof(::validator::FloatRule)},
  { 75, -1, sizeof(::validator::DoubleRule)},
  { 90, -1, sizeof(::validator::StringRule)},
  { 101, -1, sizeof(::validator::EnumRule)},
  { 107, -1, sizeof(::validator::ArrayRule)},
  { 117, -1, sizeof(::validator::ValidateRules)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::validator::_Int32Rule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::validator::_Int64Rule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::validator::_UInt32Rule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::validator::_UInt64Rule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::validator::_FloatRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::validator::_DoubleRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::validator::_StringRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::validator::_EnumRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::validator::_ArrayRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::validator::_ValidateRules_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "validator.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017validator.proto\022\tvalidator\032 google/pro"
      "tobuf/descriptor.proto\"\217\001\n\tInt32Rule\022\014\n\002"
      "lt\030\001 \001(\005H\000\022\r\n\003lte\030\002 \001(\005H\001\022\014\n\002gt\030\003 \001(\005H\002\022"
      "\r\n\003gte\030\004 \001(\005H\003\022\n\n\002in\030\005 \003(\005\022\016\n\006not_in\030\006 \003"
      "(\005B\t\n\007lt_ruleB\n\n\010lte_ruleB\t\n\007gt_ruleB\n\n\010"
      "gte_rule\"\217\001\n\tInt64Rule\022\014\n\002lt\030\001 \001(\003H\000\022\r\n\003"
      "lte\030\002 \001(\003H\001\022\014\n\002gt\030\003 \001(\003H\002\022\r\n\003gte\030\004 \001(\003H\003"
      "\022\n\n\002in\030\005 \003(\003\022\016\n\006not_in\030\006 \003(\003B\t\n\007lt_ruleB"
      "\n\n\010lte_ruleB\t\n\007gt_ruleB\n\n\010gte_rule\"\220\001\n\nU"
      "Int32Rule\022\014\n\002lt\030\001 \001(\rH\000\022\r\n\003lte\030\002 \001(\rH\001\022\014"
      "\n\002gt\030\003 \001(\rH\002\022\r\n\003gte\030\004 \001(\rH\003\022\n\n\002in\030\005 \003(\r\022"
      "\016\n\006not_in\030\006 \003(\rB\t\n\007lt_ruleB\n\n\010lte_ruleB\t"
      "\n\007gt_ruleB\n\n\010gte_rule\"\220\001\n\nUInt64Rule\022\014\n\002"
      "lt\030\001 \001(\004H\000\022\r\n\003lte\030\002 \001(\004H\001\022\014\n\002gt\030\003 \001(\004H\002\022"
      "\r\n\003gte\030\004 \001(\004H\003\022\n\n\002in\030\005 \003(\004\022\016\n\006not_in\030\006 \003"
      "(\004B\t\n\007lt_ruleB\n\n\010lte_ruleB\t\n\007gt_ruleB\n\n\010"
      "gte_rule\"\217\001\n\tFloatRule\022\014\n\002lt\030\001 \001(\002H\000\022\r\n\003"
      "lte\030\002 \001(\002H\001\022\014\n\002gt\030\003 \001(\002H\002\022\r\n\003gte\030\004 \001(\002H\003"
      "\022\n\n\002in\030\005 \003(\002\022\016\n\006not_in\030\006 \003(\002B\t\n\007lt_ruleB"
      "\n\n\010lte_ruleB\t\n\007gt_ruleB\n\n\010gte_rule\"\220\001\n\nD"
      "oubleRule\022\014\n\002lt\030\001 \001(\001H\000\022\r\n\003lte\030\002 \001(\001H\001\022\014"
      "\n\002gt\030\003 \001(\001H\002\022\r\n\003gte\030\004 \001(\001H\003\022\n\n\002in\030\005 \003(\001\022"
      "\016\n\006not_in\030\006 \003(\001B\t\n\007lt_ruleB\n\n\010lte_ruleB\t"
      "\n\007gt_ruleB\n\n\010gte_rule\"|\n\nStringRule\022\021\n\tn"
      "ot_empty\030\001 \001(\010\022\021\n\007min_len\030\002 \001(\rH\000\022\021\n\007max"
      "_len\030\003 \001(\rH\001\022\025\n\rregex_pattern\030\004 \001(\tB\016\n\014m"
      "in_len_ruleB\016\n\014max_len_rule\"\026\n\010EnumRule\022"
      "\n\n\002in\030\001 \003(\005\"d\n\tArrayRule\022\021\n\tnot_empty\030\001 "
      "\001(\010\022\021\n\007min_len\030\002 \001(\rH\000\022\021\n\007max_len\030\003 \001(\rH"
      "\001B\016\n\014min_len_ruleB\016\n\014max_len_rule\"\374\002\n\rVa"
      "lidateRules\022%\n\005int32\030\001 \001(\0132\024.validator.I"
      "nt32RuleH\000\022%\n\005int64\030\002 \001(\0132\024.validator.In"
      "t64RuleH\000\022\'\n\006uint32\030\003 \001(\0132\025.validator.UI"
      "nt32RuleH\000\022\'\n\006uint64\030\004 \001(\0132\025.validator.U"
      "Int64RuleH\000\022%\n\005float\030\005 \001(\0132\024.validator.F"
      "loatRuleH\000\022\'\n\006double\030\006 \001(\0132\025.validator.D"
      "oubleRuleH\000\022\'\n\006string\030\007 \001(\0132\025.validator."
      "StringRuleH\000\022#\n\004enum\030\010 \001(\0132\023.validator.E"
      "numRuleH\000\022%\n\005array\030\t \001(\0132\024.validator.Arr"
      "ayRuleH\000B\006\n\004rule:F\n\004Rule\022\035.google.protob"
      "uf.FieldOptions\030\220N \001(\0132\030.validator.Valid"
      "ateRulesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1656);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "validator.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_validator_2eproto
namespace validator {

// ===================================================================

void Int32Rule::InitAsDefaultInstance() {
  ::validator::_Int32Rule_default_instance_.lt_ = 0;
  ::validator::_Int32Rule_default_instance_.lte_ = 0;
  ::validator::_Int32Rule_default_instance_.gt_ = 0;
  ::validator::_Int32Rule_default_instance_.gte_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int32Rule::kLtFieldNumber;
const int Int32Rule::kLteFieldNumber;
const int Int32Rule::kGtFieldNumber;
const int Int32Rule::kGteFieldNumber;
const int Int32Rule::kInFieldNumber;
const int Int32Rule::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int32Rule::Int32Rule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_validator_2eproto::scc_info_Int32Rule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:validator.Int32Rule)
}
Int32Rule::Int32Rule(const Int32Rule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_lt_rule();
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_lte_rule();
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gt_rule();
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gte_rule();
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validator.Int32Rule)
}

void Int32Rule::SharedCtor() {
  clear_has_lt_rule();
  clear_has_lte_rule();
  clear_has_gt_rule();
  clear_has_gte_rule();
}

Int32Rule::~Int32Rule() {
  // @@protoc_insertion_point(destructor:validator.Int32Rule)
  SharedDtor();
}

void Int32Rule::SharedDtor() {
  if (has_lt_rule()) {
    clear_lt_rule();
  }
  if (has_lte_rule()) {
    clear_lte_rule();
  }
  if (has_gt_rule()) {
    clear_gt_rule();
  }
  if (has_gte_rule()) {
    clear_gte_rule();
  }
}

void Int32Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Int32Rule::descriptor() {
  ::protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Int32Rule& Int32Rule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_validator_2eproto::scc_info_Int32Rule.base);
  return *internal_default_instance();
}


void Int32Rule::clear_lt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.Int32Rule)
  switch (lt_rule_case()) {
    case kLt: {
      // No need to clear
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LT_RULE_NOT_SET;
}

void Int32Rule::clear_lte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.Int32Rule)
  switch (lte_rule_case()) {
    case kLte: {
      // No need to clear
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = LTE_RULE_NOT_SET;
}

void Int32Rule::clear_gt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.Int32Rule)
  switch (gt_rule_case()) {
    case kGt: {
      // No need to clear
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = GT_RULE_NOT_SET;
}

void Int32Rule::clear_gte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.Int32Rule)
  switch (gte_rule_case()) {
    case kGte: {
      // No need to clear
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = GTE_RULE_NOT_SET;
}


void Int32Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.Int32Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  clear_lt_rule();
  clear_lte_rule();
  clear_gt_rule();
  clear_gte_rule();
  _internal_metadata_.Clear();
}

bool Int32Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validator.Int32Rule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 lt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_lt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lt_rule_.lt_)));
          set_has_lt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lte = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_lte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lte_rule_.lte_)));
          set_has_lte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_gt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gt_rule_.gt_)));
          set_has_gt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gte = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_gte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gte_rule_.gte_)));
          set_has_gte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 in = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 not_in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validator.Int32Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validator.Int32Rule)
  return false;
#undef DO_
}

void Int32Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validator.Int32Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lt = 1;
  if (has_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lt(), output);
  }

  // int32 lte = 2;
  if (has_lte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lte(), output);
  }

  // int32 gt = 3;
  if (has_gt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gt(), output);
  }

  // int32 gte = 4;
  if (has_gte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gte(), output);
  }

  // repeated int32 in = 5;
  if (this->in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _in_cached_byte_size_));
  }
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->in(i), output);
  }

  // repeated int32 not_in = 6;
  if (this->not_in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _not_in_cached_byte_size_));
  }
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->not_in(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:validator.Int32Rule)
}

::google::protobuf::uint8* Int32Rule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validator.Int32Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lt = 1;
  if (has_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lt(), target);
  }

  // int32 lte = 2;
  if (has_lte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lte(), target);
  }

  // int32 gt = 3;
  if (has_gt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gt(), target);
  }

  // int32 gte = 4;
  if (has_gte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gte(), target);
  }

  // repeated int32 in = 5;
  if (this->in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->in_, target);
  }

  // repeated int32 not_in = 6;
  if (this->not_in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _not_in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->not_in_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.Int32Rule)
  return target;
}

size_t Int32Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.Int32Rule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 in = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->in_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 not_in = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->not_in_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _not_in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (lt_rule_case()) {
    // int32 lt = 1;
    case kLt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (lte_rule_case()) {
    // int32 lte = 2;
    case kLte: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (gt_rule_case()) {
    // int32 gt = 3;
    case kGt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (gte_rule_case()) {
    // int32 gte = 4;
    case kGte: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int32Rule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.Int32Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const Int32Rule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Int32Rule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.Int32Rule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.Int32Rule)
    MergeFrom(*source);
  }
}

void Int32Rule::MergeFrom(const Int32Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.Int32Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
}

void Int32Rule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.Int32Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int32Rule::CopyFrom(const Int32Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.Int32Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Rule::IsInitialized() const {
  return true;
}

void Int32Rule::Swap(Int32Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int32Rule::InternalSwap(Int32Rule* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(lt_rule_, other->lt_rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(lte_rule_, other->lte_rule_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(gt_rule_, other->gt_rule_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(gte_rule_, other->gte_rule_);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Int32Rule::GetMetadata() const {
  protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Int64Rule::InitAsDefaultInstance() {
  ::validator::_Int64Rule_default_instance_.lt_ = GOOGLE_LONGLONG(0);
  ::validator::_Int64Rule_default_instance_.lte_ = GOOGLE_LONGLONG(0);
  ::validator::_Int64Rule_default_instance_.gt_ = GOOGLE_LONGLONG(0);
  ::validator::_Int64Rule_default_instance_.gte_ = GOOGLE_LONGLONG(0);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int64Rule::kLtFieldNumber;
const int Int64Rule::kLteFieldNumber;
const int Int64Rule::kGtFieldNumber;
const int Int64Rule::kGteFieldNumber;
const int Int64Rule::kInFieldNumber;
const int Int64Rule::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int64Rule::Int64Rule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_validator_2eproto::scc_info_Int64Rule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:validator.Int64Rule)
}
Int64Rule::Int64Rule(const Int64Rule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_lt_rule();
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_lte_rule();
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gt_rule();
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gte_rule();
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validator.Int64Rule)
}

void Int64Rule::SharedCtor() {
  clear_has_lt_rule();
  clear_has_lte_rule();
  clear_has_gt_rule();
  clear_has_gte_rule();
}

Int64Rule::~Int64Rule() {
  // @@protoc_insertion_point(destructor:validator.Int64Rule)
  SharedDtor();
}

void Int64Rule::SharedDtor() {
  if (has_lt_rule()) {
    clear_lt_rule();
  }
  if (has_lte_rule()) {
    clear_lte_rule();
  }
  if (has_gt_rule()) {
    clear_gt_rule();
  }
  if (has_gte_rule()) {
    clear_gte_rule();
  }
}

void Int64Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Int64Rule::descriptor() {
  ::protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Int64Rule& Int64Rule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_validator_2eproto::scc_info_Int64Rule.base);
  return *internal_default_instance();
}


void Int64Rule::clear_lt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.Int64Rule)
  switch (lt_rule_case()) {
    case kLt: {
      // No need to clear
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LT_RULE_NOT_SET;
}

void Int64Rule::clear_lte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.Int64Rule)
  switch (lte_rule_case()) {
    case kLte: {
      // No need to clear
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = LTE_RULE_NOT_SET;
}

void Int64Rule::clear_gt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.Int64Rule)
  switch (gt_rule_case()) {
    case kGt: {
      // No need to clear
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = GT_RULE_NOT_SET;
}

void Int64Rule::clear_gte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.Int64Rule)
  switch (gte_rule_case()) {
    case kGte: {
      // No need to clear
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = GTE_RULE_NOT_SET;
}


void Int64Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.Int64Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  clear_lt_rule();
  clear_lte_rule();
  clear_gt_rule();
  clear_gte_rule();
  _internal_metadata_.Clear();
}

bool Int64Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validator.Int64Rule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 lt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_lt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lt_rule_.lt_)));
          set_has_lt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lte = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_lte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lte_rule_.lte_)));
          set_has_lte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_gt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gt_rule_.gt_)));
          set_has_gt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gte = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_gte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gte_rule_.gte_)));
          set_has_gte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 in = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 42u, input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 not_in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 50u, input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validator.Int64Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validator.Int64Rule)
  return false;
#undef DO_
}

void Int64Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validator.Int64Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 lt = 1;
  if (has_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lt(), output);
  }

  // int64 lte = 2;
  if (has_lte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lte(), output);
  }

  // int64 gt = 3;
  if (has_gt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gt(), output);
  }

  // int64 gte = 4;
  if (has_gte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gte(), output);
  }

  // repeated int64 in = 5;
  if (this->in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _in_cached_byte_size_));
  }
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->in(i), output);
  }

  // repeated int64 not_in = 6;
  if (this->not_in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _not_in_cached_byte_size_));
  }
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->not_in(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:validator.Int64Rule)
}

::google::protobuf::uint8* Int64Rule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validator.Int64Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 lt = 1;
  if (has_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lt(), target);
  }

  // int64 lte = 2;
  if (has_lte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lte(), target);
  }

  // int64 gt = 3;
  if (has_gt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gt(), target);
  }

  // int64 gte = 4;
  if (has_gte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gte(), target);
  }

  // repeated int64 in = 5;
  if (this->in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->in_, target);
  }

  // repeated int64 not_in = 6;
  if (this->not_in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _not_in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->not_in_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.Int64Rule)
  return target;
}

size_t Int64Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.Int64Rule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 in = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->in_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 not_in = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->not_in_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _not_in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (lt_rule_case()) {
    // int64 lt = 1;
    case kLt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (lte_rule_case()) {
    // int64 lte = 2;
    case kLte: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (gt_rule_case()) {
    // int64 gt = 3;
    case kGt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (gte_rule_case()) {
    // int64 gte = 4;
    case kGte: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int64Rule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.Int64Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const Int64Rule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Int64Rule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.Int64Rule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.Int64Rule)
    MergeFrom(*source);
  }
}

void Int64Rule::MergeFrom(const Int64Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.Int64Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
}

void Int64Rule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.Int64Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64Rule::CopyFrom(const Int64Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.Int64Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Rule::IsInitialized() const {
  return true;
}

void Int64Rule::Swap(Int64Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int64Rule::InternalSwap(Int64Rule* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(lt_rule_, other->lt_rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(lte_rule_, other->lte_rule_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(gt_rule_, other->gt_rule_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(gte_rule_, other->gte_rule_);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Int64Rule::GetMetadata() const {
  protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UInt32Rule::InitAsDefaultInstance() {
  ::validator::_UInt32Rule_default_instance_.lt_ = 0u;
  ::validator::_UInt32Rule_default_instance_.lte_ = 0u;
  ::validator::_UInt32Rule_default_instance_.gt_ = 0u;
  ::validator::_UInt32Rule_default_instance_.gte_ = 0u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt32Rule::kLtFieldNumber;
const int UInt32Rule::kLteFieldNumber;
const int UInt32Rule::kGtFieldNumber;
const int UInt32Rule::kGteFieldNumber;
const int UInt32Rule::kInFieldNumber;
const int UInt32Rule::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt32Rule::UInt32Rule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_validator_2eproto::scc_info_UInt32Rule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:validator.UInt32Rule)
}
UInt32Rule::UInt32Rule(const UInt32Rule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_lt_rule();
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_lte_rule();
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gt_rule();
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gte_rule();
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validator.UInt32Rule)
}

void UInt32Rule::SharedCtor() {
  clear_has_lt_rule();
  clear_has_lte_rule();
  clear_has_gt_rule();
  clear_has_gte_rule();
}

UInt32Rule::~UInt32Rule() {
  // @@protoc_insertion_point(destructor:validator.UInt32Rule)
  SharedDtor();
}

void UInt32Rule::SharedDtor() {
  if (has_lt_rule()) {
    clear_lt_rule();
  }
  if (has_lte_rule()) {
    clear_lte_rule();
  }
  if (has_gt_rule()) {
    clear_gt_rule();
  }
  if (has_gte_rule()) {
    clear_gte_rule();
  }
}

void UInt32Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UInt32Rule::descriptor() {
  ::protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UInt32Rule& UInt32Rule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_validator_2eproto::scc_info_UInt32Rule.base);
  return *internal_default_instance();
}


void UInt32Rule::clear_lt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.UInt32Rule)
  switch (lt_rule_case()) {
    case kLt: {
      // No need to clear
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LT_RULE_NOT_SET;
}

void UInt32Rule::clear_lte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.UInt32Rule)
  switch (lte_rule_case()) {
    case kLte: {
      // No need to clear
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = LTE_RULE_NOT_SET;
}

void UInt32Rule::clear_gt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.UInt32Rule)
  switch (gt_rule_case()) {
    case kGt: {
      // No need to clear
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = GT_RULE_NOT_SET;
}

void UInt32Rule::clear_gte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.UInt32Rule)
  switch (gte_rule_case()) {
    case kGte: {
      // No need to clear
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = GTE_RULE_NOT_SET;
}


void UInt32Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.UInt32Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  clear_lt_rule();
  clear_lte_rule();
  clear_gt_rule();
  clear_gte_rule();
  _internal_metadata_.Clear();
}

bool UInt32Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validator.UInt32Rule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 lt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_lt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lt_rule_.lt_)));
          set_has_lt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lte = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_lte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lte_rule_.lte_)));
          set_has_lte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_gt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gt_rule_.gt_)));
          set_has_gt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gte = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_gte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gte_rule_.gte_)));
          set_has_gte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 in = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 not_in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validator.UInt32Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validator.UInt32Rule)
  return false;
#undef DO_
}

void UInt32Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validator.UInt32Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lt = 1;
  if (has_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lt(), output);
  }

  // uint32 lte = 2;
  if (has_lte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lte(), output);
  }

  // uint32 gt = 3;
  if (has_gt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gt(), output);
  }

  // uint32 gte = 4;
  if (has_gte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gte(), output);
  }

  // repeated uint32 in = 5;
  if (this->in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _in_cached_byte_size_));
  }
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->in(i), output);
  }

  // repeated uint32 not_in = 6;
  if (this->not_in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _not_in_cached_byte_size_));
  }
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->not_in(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:validator.UInt32Rule)
}

::google::protobuf::uint8* UInt32Rule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validator.UInt32Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lt = 1;
  if (has_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lt(), target);
  }

  // uint32 lte = 2;
  if (has_lte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lte(), target);
  }

  // uint32 gt = 3;
  if (has_gt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gt(), target);
  }

  // uint32 gte = 4;
  if (has_gte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gte(), target);
  }

  // repeated uint32 in = 5;
  if (this->in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->in_, target);
  }

  // repeated uint32 not_in = 6;
  if (this->not_in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _not_in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->not_in_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.UInt32Rule)
  return target;
}

size_t UInt32Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.UInt32Rule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 in = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->in_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 not_in = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->not_in_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _not_in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (lt_rule_case()) {
    // uint32 lt = 1;
    case kLt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (lte_rule_case()) {
    // uint32 lte = 2;
    case kLte: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (gt_rule_case()) {
    // uint32 gt = 3;
    case kGt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (gte_rule_case()) {
    // uint32 gte = 4;
    case kGte: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UInt32Rule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.UInt32Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt32Rule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt32Rule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.UInt32Rule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.UInt32Rule)
    MergeFrom(*source);
  }
}

void UInt32Rule::MergeFrom(const UInt32Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.UInt32Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
}

void UInt32Rule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.UInt32Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt32Rule::CopyFrom(const UInt32Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.UInt32Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt32Rule::IsInitialized() const {
  return true;
}

void UInt32Rule::Swap(UInt32Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt32Rule::InternalSwap(UInt32Rule* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(lt_rule_, other->lt_rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(lte_rule_, other->lte_rule_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(gt_rule_, other->gt_rule_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(gte_rule_, other->gte_rule_);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UInt32Rule::GetMetadata() const {
  protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UInt64Rule::InitAsDefaultInstance() {
  ::validator::_UInt64Rule_default_instance_.lt_ = GOOGLE_ULONGLONG(0);
  ::validator::_UInt64Rule_default_instance_.lte_ = GOOGLE_ULONGLONG(0);
  ::validator::_UInt64Rule_default_instance_.gt_ = GOOGLE_ULONGLONG(0);
  ::validator::_UInt64Rule_default_instance_.gte_ = GOOGLE_ULONGLONG(0);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt64Rule::kLtFieldNumber;
const int UInt64Rule::kLteFieldNumber;
const int UInt64Rule::kGtFieldNumber;
const int UInt64Rule::kGteFieldNumber;
const int UInt64Rule::kInFieldNumber;
const int UInt64Rule::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt64Rule::UInt64Rule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_validator_2eproto::scc_info_UInt64Rule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:validator.UInt64Rule)
}
UInt64Rule::UInt64Rule(const UInt64Rule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_lt_rule();
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_lte_rule();
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gt_rule();
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gte_rule();
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validator.UInt64Rule)
}

void UInt64Rule::SharedCtor() {
  clear_has_lt_rule();
  clear_has_lte_rule();
  clear_has_gt_rule();
  clear_has_gte_rule();
}

UInt64Rule::~UInt64Rule() {
  // @@protoc_insertion_point(destructor:validator.UInt64Rule)
  SharedDtor();
}

void UInt64Rule::SharedDtor() {
  if (has_lt_rule()) {
    clear_lt_rule();
  }
  if (has_lte_rule()) {
    clear_lte_rule();
  }
  if (has_gt_rule()) {
    clear_gt_rule();
  }
  if (has_gte_rule()) {
    clear_gte_rule();
  }
}

void UInt64Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UInt64Rule::descriptor() {
  ::protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UInt64Rule& UInt64Rule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_validator_2eproto::scc_info_UInt64Rule.base);
  return *internal_default_instance();
}


void UInt64Rule::clear_lt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.UInt64Rule)
  switch (lt_rule_case()) {
    case kLt: {
      // No need to clear
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LT_RULE_NOT_SET;
}

void UInt64Rule::clear_lte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.UInt64Rule)
  switch (lte_rule_case()) {
    case kLte: {
      // No need to clear
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = LTE_RULE_NOT_SET;
}

void UInt64Rule::clear_gt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.UInt64Rule)
  switch (gt_rule_case()) {
    case kGt: {
      // No need to clear
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = GT_RULE_NOT_SET;
}

void UInt64Rule::clear_gte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.UInt64Rule)
  switch (gte_rule_case()) {
    case kGte: {
      // No need to clear
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = GTE_RULE_NOT_SET;
}


void UInt64Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.UInt64Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  clear_lt_rule();
  clear_lte_rule();
  clear_gt_rule();
  clear_gte_rule();
  _internal_metadata_.Clear();
}

bool UInt64Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validator.UInt64Rule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 lt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_lt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lt_rule_.lt_)));
          set_has_lt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lte = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_lte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lte_rule_.lte_)));
          set_has_lte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 gt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_gt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gt_rule_.gt_)));
          set_has_gt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 gte = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_gte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gte_rule_.gte_)));
          set_has_gte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 in = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42u, input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 not_in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 50u, input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validator.UInt64Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validator.UInt64Rule)
  return false;
#undef DO_
}

void UInt64Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validator.UInt64Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lt = 1;
  if (has_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lt(), output);
  }

  // uint64 lte = 2;
  if (has_lte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lte(), output);
  }

  // uint64 gt = 3;
  if (has_gt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gt(), output);
  }

  // uint64 gte = 4;
  if (has_gte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gte(), output);
  }

  // repeated uint64 in = 5;
  if (this->in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _in_cached_byte_size_));
  }
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->in(i), output);
  }

  // repeated uint64 not_in = 6;
  if (this->not_in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _not_in_cached_byte_size_));
  }
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->not_in(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:validator.UInt64Rule)
}

::google::protobuf::uint8* UInt64Rule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validator.UInt64Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lt = 1;
  if (has_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lt(), target);
  }

  // uint64 lte = 2;
  if (has_lte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lte(), target);
  }

  // uint64 gt = 3;
  if (has_gt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gt(), target);
  }

  // uint64 gte = 4;
  if (has_gte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gte(), target);
  }

  // repeated uint64 in = 5;
  if (this->in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->in_, target);
  }

  // repeated uint64 not_in = 6;
  if (this->not_in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _not_in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->not_in_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.UInt64Rule)
  return target;
}

size_t UInt64Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.UInt64Rule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 in = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->in_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 not_in = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->not_in_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _not_in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (lt_rule_case()) {
    // uint64 lt = 1;
    case kLt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (lte_rule_case()) {
    // uint64 lte = 2;
    case kLte: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (gt_rule_case()) {
    // uint64 gt = 3;
    case kGt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (gte_rule_case()) {
    // uint64 gte = 4;
    case kGte: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UInt64Rule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.UInt64Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt64Rule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt64Rule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.UInt64Rule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.UInt64Rule)
    MergeFrom(*source);
  }
}

void UInt64Rule::MergeFrom(const UInt64Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.UInt64Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
}

void UInt64Rule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.UInt64Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt64Rule::CopyFrom(const UInt64Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.UInt64Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt64Rule::IsInitialized() const {
  return true;
}

void UInt64Rule::Swap(UInt64Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt64Rule::InternalSwap(UInt64Rule* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(lt_rule_, other->lt_rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(lte_rule_, other->lte_rule_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(gt_rule_, other->gt_rule_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(gte_rule_, other->gte_rule_);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UInt64Rule::GetMetadata() const {
  protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FloatRule::InitAsDefaultInstance() {
  ::validator::_FloatRule_default_instance_.lt_ = 0;
  ::validator::_FloatRule_default_instance_.lte_ = 0;
  ::validator::_FloatRule_default_instance_.gt_ = 0;
  ::validator::_FloatRule_default_instance_.gte_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatRule::kLtFieldNumber;
const int FloatRule::kLteFieldNumber;
const int FloatRule::kGtFieldNumber;
const int FloatRule::kGteFieldNumber;
const int FloatRule::kInFieldNumber;
const int FloatRule::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatRule::FloatRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_validator_2eproto::scc_info_FloatRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:validator.FloatRule)
}
FloatRule::FloatRule(const FloatRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_lt_rule();
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_lte_rule();
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gt_rule();
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gte_rule();
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validator.FloatRule)
}

void FloatRule::SharedCtor() {
  clear_has_lt_rule();
  clear_has_lte_rule();
  clear_has_gt_rule();
  clear_has_gte_rule();
}

FloatRule::~FloatRule() {
  // @@protoc_insertion_point(destructor:validator.FloatRule)
  SharedDtor();
}

void FloatRule::SharedDtor() {
  if (has_lt_rule()) {
    clear_lt_rule();
  }
  if (has_lte_rule()) {
    clear_lte_rule();
  }
  if (has_gt_rule()) {
    clear_gt_rule();
  }
  if (has_gte_rule()) {
    clear_gte_rule();
  }
}

void FloatRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FloatRule::descriptor() {
  ::protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FloatRule& FloatRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_validator_2eproto::scc_info_FloatRule.base);
  return *internal_default_instance();
}


void FloatRule::clear_lt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.FloatRule)
  switch (lt_rule_case()) {
    case kLt: {
      // No need to clear
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LT_RULE_NOT_SET;
}

void FloatRule::clear_lte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.FloatRule)
  switch (lte_rule_case()) {
    case kLte: {
      // No need to clear
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = LTE_RULE_NOT_SET;
}

void FloatRule::clear_gt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.FloatRule)
  switch (gt_rule_case()) {
    case kGt: {
      // No need to clear
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = GT_RULE_NOT_SET;
}

void FloatRule::clear_gte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.FloatRule)
  switch (gte_rule_case()) {
    case kGte: {
      // No need to clear
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = GTE_RULE_NOT_SET;
}


void FloatRule::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.FloatRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  clear_lt_rule();
  clear_lte_rule();
  clear_gt_rule();
  clear_gte_rule();
  _internal_metadata_.Clear();
}

bool FloatRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validator.FloatRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float lt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          clear_lt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lt_rule_.lt_)));
          set_has_lt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lte = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          clear_lte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lte_rule_.lte_)));
          set_has_lte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          clear_gt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gt_rule_.gt_)));
          set_has_gt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gte = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          clear_gte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gte_rule_.gte_)));
          set_has_gte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float in = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float not_in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validator.FloatRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validator.FloatRule)
  return false;
#undef DO_
}

void FloatRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validator.FloatRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lt = 1;
  if (has_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lt(), output);
  }

  // float lte = 2;
  if (has_lte()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lte(), output);
  }

  // float gt = 3;
  if (has_gt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gt(), output);
  }

  // float gte = 4;
  if (has_gte()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gte(), output);
  }

  // repeated float in = 5;
  if (this->in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _in_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->in().data(), this->in_size(), output);
  }

  // repeated float not_in = 6;
  if (this->not_in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _not_in_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->not_in().data(), this->not_in_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:validator.FloatRule)
}

::google::protobuf::uint8* FloatRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validator.FloatRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lt = 1;
  if (has_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lt(), target);
  }

  // float lte = 2;
  if (has_lte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lte(), target);
  }

  // float gt = 3;
  if (has_gt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gt(), target);
  }

  // float gte = 4;
  if (has_gte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gte(), target);
  }

  // repeated float in = 5;
  if (this->in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->in_, target);
  }

  // repeated float not_in = 6;
  if (this->not_in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _not_in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->not_in_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.FloatRule)
  return target;
}

size_t FloatRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.FloatRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float in = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->in_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float not_in = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->not_in_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _not_in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (lt_rule_case()) {
    // float lt = 1;
    case kLt: {
      total_size += 1 + 4;
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (lte_rule_case()) {
    // float lte = 2;
    case kLte: {
      total_size += 1 + 4;
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (gt_rule_case()) {
    // float gt = 3;
    case kGt: {
      total_size += 1 + 4;
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (gte_rule_case()) {
    // float gte = 4;
    case kGte: {
      total_size += 1 + 4;
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.FloatRule)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.FloatRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.FloatRule)
    MergeFrom(*source);
  }
}

void FloatRule::MergeFrom(const FloatRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.FloatRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
}

void FloatRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.FloatRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatRule::CopyFrom(const FloatRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.FloatRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatRule::IsInitialized() const {
  return true;
}

void FloatRule::Swap(FloatRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatRule::InternalSwap(FloatRule* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(lt_rule_, other->lt_rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(lte_rule_, other->lte_rule_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(gt_rule_, other->gt_rule_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(gte_rule_, other->gte_rule_);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FloatRule::GetMetadata() const {
  protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DoubleRule::InitAsDefaultInstance() {
  ::validator::_DoubleRule_default_instance_.lt_ = 0;
  ::validator::_DoubleRule_default_instance_.lte_ = 0;
  ::validator::_DoubleRule_default_instance_.gt_ = 0;
  ::validator::_DoubleRule_default_instance_.gte_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleRule::kLtFieldNumber;
const int DoubleRule::kLteFieldNumber;
const int DoubleRule::kGtFieldNumber;
const int DoubleRule::kGteFieldNumber;
const int DoubleRule::kInFieldNumber;
const int DoubleRule::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleRule::DoubleRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_validator_2eproto::scc_info_DoubleRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:validator.DoubleRule)
}
DoubleRule::DoubleRule(const DoubleRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_lt_rule();
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_lte_rule();
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gt_rule();
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_gte_rule();
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validator.DoubleRule)
}

void DoubleRule::SharedCtor() {
  clear_has_lt_rule();
  clear_has_lte_rule();
  clear_has_gt_rule();
  clear_has_gte_rule();
}

DoubleRule::~DoubleRule() {
  // @@protoc_insertion_point(destructor:validator.DoubleRule)
  SharedDtor();
}

void DoubleRule::SharedDtor() {
  if (has_lt_rule()) {
    clear_lt_rule();
  }
  if (has_lte_rule()) {
    clear_lte_rule();
  }
  if (has_gt_rule()) {
    clear_gt_rule();
  }
  if (has_gte_rule()) {
    clear_gte_rule();
  }
}

void DoubleRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DoubleRule::descriptor() {
  ::protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoubleRule& DoubleRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_validator_2eproto::scc_info_DoubleRule.base);
  return *internal_default_instance();
}


void DoubleRule::clear_lt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.DoubleRule)
  switch (lt_rule_case()) {
    case kLt: {
      // No need to clear
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LT_RULE_NOT_SET;
}

void DoubleRule::clear_lte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.DoubleRule)
  switch (lte_rule_case()) {
    case kLte: {
      // No need to clear
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = LTE_RULE_NOT_SET;
}

void DoubleRule::clear_gt_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.DoubleRule)
  switch (gt_rule_case()) {
    case kGt: {
      // No need to clear
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = GT_RULE_NOT_SET;
}

void DoubleRule::clear_gte_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.DoubleRule)
  switch (gte_rule_case()) {
    case kGte: {
      // No need to clear
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = GTE_RULE_NOT_SET;
}


void DoubleRule::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.DoubleRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  clear_lt_rule();
  clear_lte_rule();
  clear_gt_rule();
  clear_gte_rule();
  _internal_metadata_.Clear();
}

bool DoubleRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validator.DoubleRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          clear_lt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lt_rule_.lt_)));
          set_has_lt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lte = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          clear_lte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lte_rule_.lte_)));
          set_has_lte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          clear_gt_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gt_rule_.gt_)));
          set_has_gt();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gte = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          clear_gte_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gte_rule_.gte_)));
          set_has_gte();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double in = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double not_in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validator.DoubleRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validator.DoubleRule)
  return false;
#undef DO_
}

void DoubleRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validator.DoubleRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lt = 1;
  if (has_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lt(), output);
  }

  // double lte = 2;
  if (has_lte()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lte(), output);
  }

  // double gt = 3;
  if (has_gt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gt(), output);
  }

  // double gte = 4;
  if (has_gte()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gte(), output);
  }

  // repeated double in = 5;
  if (this->in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _in_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->in().data(), this->in_size(), output);
  }

  // repeated double not_in = 6;
  if (this->not_in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _not_in_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->not_in().data(), this->not_in_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:validator.DoubleRule)
}

::google::protobuf::uint8* DoubleRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validator.DoubleRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lt = 1;
  if (has_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lt(), target);
  }

  // double lte = 2;
  if (has_lte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lte(), target);
  }

  // double gt = 3;
  if (has_gt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gt(), target);
  }

  // double gte = 4;
  if (has_gte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gte(), target);
  }

  // repeated double in = 5;
  if (this->in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->in_, target);
  }

  // repeated double not_in = 6;
  if (this->not_in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _not_in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->not_in_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.DoubleRule)
  return target;
}

size_t DoubleRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.DoubleRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double in = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->in_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double not_in = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->not_in_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _not_in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (lt_rule_case()) {
    // double lt = 1;
    case kLt: {
      total_size += 1 + 8;
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (lte_rule_case()) {
    // double lte = 2;
    case kLte: {
      total_size += 1 + 8;
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (gt_rule_case()) {
    // double gt = 3;
    case kGt: {
      total_size += 1 + 8;
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (gte_rule_case()) {
    // double gte = 4;
    case kGte: {
      total_size += 1 + 8;
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.DoubleRule)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.DoubleRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.DoubleRule)
    MergeFrom(*source);
  }
}

void DoubleRule::MergeFrom(const DoubleRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.DoubleRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  switch (from.lt_rule_case()) {
    case kLt: {
      set_lt(from.lt());
      break;
    }
    case LT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.lte_rule_case()) {
    case kLte: {
      set_lte(from.lte());
      break;
    }
    case LTE_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gt_rule_case()) {
    case kGt: {
      set_gt(from.gt());
      break;
    }
    case GT_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.gte_rule_case()) {
    case kGte: {
      set_gte(from.gte());
      break;
    }
    case GTE_RULE_NOT_SET: {
      break;
    }
  }
}

void DoubleRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.DoubleRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleRule::CopyFrom(const DoubleRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.DoubleRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleRule::IsInitialized() const {
  return true;
}

void DoubleRule::Swap(DoubleRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleRule::InternalSwap(DoubleRule* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(lt_rule_, other->lt_rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(lte_rule_, other->lte_rule_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(gt_rule_, other->gt_rule_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(gte_rule_, other->gte_rule_);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DoubleRule::GetMetadata() const {
  protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StringRule::InitAsDefaultInstance() {
  ::validator::_StringRule_default_instance_.min_len_ = 0u;
  ::validator::_StringRule_default_instance_.max_len_ = 0u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringRule::kNotEmptyFieldNumber;
const int StringRule::kMinLenFieldNumber;
const int StringRule::kMaxLenFieldNumber;
const int StringRule::kRegexPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringRule::StringRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_validator_2eproto::scc_info_StringRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:validator.StringRule)
}
StringRule::StringRule(const StringRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  regex_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.regex_pattern().size() > 0) {
    regex_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regex_pattern_);
  }
  not_empty_ = from.not_empty_;
  clear_has_min_len_rule();
  switch (from.min_len_rule_case()) {
    case kMinLen: {
      set_min_len(from.min_len());
      break;
    }
    case MIN_LEN_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_max_len_rule();
  switch (from.max_len_rule_case()) {
    case kMaxLen: {
      set_max_len(from.max_len());
      break;
    }
    case MAX_LEN_RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validator.StringRule)
}

void StringRule::SharedCtor() {
  regex_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  not_empty_ = false;
  clear_has_min_len_rule();
  clear_has_max_len_rule();
}

StringRule::~StringRule() {
  // @@protoc_insertion_point(destructor:validator.StringRule)
  SharedDtor();
}

void StringRule::SharedDtor() {
  regex_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_min_len_rule()) {
    clear_min_len_rule();
  }
  if (has_max_len_rule()) {
    clear_max_len_rule();
  }
}

void StringRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StringRule::descriptor() {
  ::protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StringRule& StringRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_validator_2eproto::scc_info_StringRule.base);
  return *internal_default_instance();
}


void StringRule::clear_min_len_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.StringRule)
  switch (min_len_rule_case()) {
    case kMinLen: {
      // No need to clear
      break;
    }
    case MIN_LEN_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MIN_LEN_RULE_NOT_SET;
}

void StringRule::clear_max_len_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.StringRule)
  switch (max_len_rule_case()) {
    case kMaxLen: {
      // No need to clear
      break;
    }
    case MAX_LEN_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MAX_LEN_RULE_NOT_SET;
}


void StringRule::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.StringRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regex_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  not_empty_ = false;
  clear_min_len_rule();
  clear_max_len_rule();
  _internal_metadata_.Clear();
}

bool StringRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validator.StringRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool not_empty = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_empty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 min_len = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_min_len_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_len_rule_.min_len_)));
          set_has_min_len();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_len = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_max_len_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_len_rule_.max_len_)));
          set_has_max_len();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string regex_pattern = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regex_pattern().data(), static_cast<int>(this->regex_pattern().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "validator.StringRule.regex_pattern"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validator.StringRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validator.StringRule)
  return false;
#undef DO_
}

void StringRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validator.StringRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool not_empty = 1;
  if (this->not_empty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->not_empty(), output);
  }

  // uint32 min_len = 2;
  if (has_min_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_len(), output);
  }

  // uint32 max_len = 3;
  if (has_max_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_len(), output);
  }

  // string regex_pattern = 4;
  if (this->regex_pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex_pattern().data(), static_cast<int>(this->regex_pattern().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "validator.StringRule.regex_pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->regex_pattern(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:validator.StringRule)
}

::google::protobuf::uint8* StringRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validator.StringRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool not_empty = 1;
  if (this->not_empty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->not_empty(), target);
  }

  // uint32 min_len = 2;
  if (has_min_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_len(), target);
  }

  // uint32 max_len = 3;
  if (has_max_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_len(), target);
  }

  // string regex_pattern = 4;
  if (this->regex_pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex_pattern().data(), static_cast<int>(this->regex_pattern().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "validator.StringRule.regex_pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->regex_pattern(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.StringRule)
  return target;
}

size_t StringRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.StringRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string regex_pattern = 4;
  if (this->regex_pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->regex_pattern());
  }

  // bool not_empty = 1;
  if (this->not_empty() != 0) {
    total_size += 1 + 1;
  }

  switch (min_len_rule_case()) {
    // uint32 min_len = 2;
    case kMinLen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_len());
      break;
    }
    case MIN_LEN_RULE_NOT_SET: {
      break;
    }
  }
  switch (max_len_rule_case()) {
    // uint32 max_len = 3;
    case kMaxLen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_len());
      break;
    }
    case MAX_LEN_RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.StringRule)
  GOOGLE_DCHECK_NE(&from, this);
  const StringRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StringRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.StringRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.StringRule)
    MergeFrom(*source);
  }
}

void StringRule::MergeFrom(const StringRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.StringRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.regex_pattern().size() > 0) {

    regex_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regex_pattern_);
  }
  if (from.not_empty() != 0) {
    set_not_empty(from.not_empty());
  }
  switch (from.min_len_rule_case()) {
    case kMinLen: {
      set_min_len(from.min_len());
      break;
    }
    case MIN_LEN_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.max_len_rule_case()) {
    case kMaxLen: {
      set_max_len(from.max_len());
      break;
    }
    case MAX_LEN_RULE_NOT_SET: {
      break;
    }
  }
}

void StringRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.StringRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringRule::CopyFrom(const StringRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.StringRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringRule::IsInitialized() const {
  return true;
}

void StringRule::Swap(StringRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringRule::InternalSwap(StringRule* other) {
  using std::swap;
  regex_pattern_.Swap(&other->regex_pattern_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(not_empty_, other->not_empty_);
  swap(min_len_rule_, other->min_len_rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(max_len_rule_, other->max_len_rule_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StringRule::GetMetadata() const {
  protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnumRule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnumRule::kInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnumRule::EnumRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_validator_2eproto::scc_info_EnumRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:validator.EnumRule)
}
EnumRule::EnumRule(const EnumRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      in_(from.in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:validator.EnumRule)
}

void EnumRule::SharedCtor() {
}

EnumRule::~EnumRule() {
  // @@protoc_insertion_point(destructor:validator.EnumRule)
  SharedDtor();
}

void EnumRule::SharedDtor() {
}

void EnumRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EnumRule::descriptor() {
  ::protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnumRule& EnumRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_validator_2eproto::scc_info_EnumRule.base);
  return *internal_default_instance();
}


void EnumRule::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.EnumRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  _internal_metadata_.Clear();
}

bool EnumRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validator.EnumRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 in = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validator.EnumRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validator.EnumRule)
  return false;
#undef DO_
}

void EnumRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validator.EnumRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 in = 1;
  if (this->in_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _in_cached_byte_size_));
  }
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->in(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:validator.EnumRule)
}

::google::protobuf::uint8* EnumRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validator.EnumRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 in = 1;
  if (this->in_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _in_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->in_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.EnumRule)
  return target;
}

size_t EnumRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.EnumRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 in = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->in_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _in_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnumRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.EnumRule)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnumRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.EnumRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.EnumRule)
    MergeFrom(*source);
  }
}

void EnumRule::MergeFrom(const EnumRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.EnumRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
}

void EnumRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.EnumRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumRule::CopyFrom(const EnumRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.EnumRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumRule::IsInitialized() const {
  return true;
}

void EnumRule::Swap(EnumRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnumRule::InternalSwap(EnumRule* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EnumRule::GetMetadata() const {
  protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArrayRule::InitAsDefaultInstance() {
  ::validator::_ArrayRule_default_instance_.min_len_ = 0u;
  ::validator::_ArrayRule_default_instance_.max_len_ = 0u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArrayRule::kNotEmptyFieldNumber;
const int ArrayRule::kMinLenFieldNumber;
const int ArrayRule::kMaxLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArrayRule::ArrayRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_validator_2eproto::scc_info_ArrayRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:validator.ArrayRule)
}
ArrayRule::ArrayRule(const ArrayRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  not_empty_ = from.not_empty_;
  clear_has_min_len_rule();
  switch (from.min_len_rule_case()) {
    case kMinLen: {
      set_min_len(from.min_len());
      break;
    }
    case MIN_LEN_RULE_NOT_SET: {
      break;
    }
  }
  clear_has_max_len_rule();
  switch (from.max_len_rule_case()) {
    case kMaxLen: {
      set_max_len(from.max_len());
      break;
    }
    case MAX_LEN_RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validator.ArrayRule)
}

void ArrayRule::SharedCtor() {
  not_empty_ = false;
  clear_has_min_len_rule();
  clear_has_max_len_rule();
}

ArrayRule::~ArrayRule() {
  // @@protoc_insertion_point(destructor:validator.ArrayRule)
  SharedDtor();
}

void ArrayRule::SharedDtor() {
  if (has_min_len_rule()) {
    clear_min_len_rule();
  }
  if (has_max_len_rule()) {
    clear_max_len_rule();
  }
}

void ArrayRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ArrayRule::descriptor() {
  ::protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArrayRule& ArrayRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_validator_2eproto::scc_info_ArrayRule.base);
  return *internal_default_instance();
}


void ArrayRule::clear_min_len_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.ArrayRule)
  switch (min_len_rule_case()) {
    case kMinLen: {
      // No need to clear
      break;
    }
    case MIN_LEN_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MIN_LEN_RULE_NOT_SET;
}

void ArrayRule::clear_max_len_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.ArrayRule)
  switch (max_len_rule_case()) {
    case kMaxLen: {
      // No need to clear
      break;
    }
    case MAX_LEN_RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MAX_LEN_RULE_NOT_SET;
}


void ArrayRule::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.ArrayRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  not_empty_ = false;
  clear_min_len_rule();
  clear_max_len_rule();
  _internal_metadata_.Clear();
}

bool ArrayRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validator.ArrayRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool not_empty = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_empty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 min_len = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_min_len_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_len_rule_.min_len_)));
          set_has_min_len();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_len = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_max_len_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_len_rule_.max_len_)));
          set_has_max_len();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validator.ArrayRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validator.ArrayRule)
  return false;
#undef DO_
}

void ArrayRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validator.ArrayRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool not_empty = 1;
  if (this->not_empty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->not_empty(), output);
  }

  // uint32 min_len = 2;
  if (has_min_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_len(), output);
  }

  // uint32 max_len = 3;
  if (has_max_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_len(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:validator.ArrayRule)
}

::google::protobuf::uint8* ArrayRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validator.ArrayRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool not_empty = 1;
  if (this->not_empty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->not_empty(), target);
  }

  // uint32 min_len = 2;
  if (has_min_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_len(), target);
  }

  // uint32 max_len = 3;
  if (has_max_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_len(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.ArrayRule)
  return target;
}

size_t ArrayRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.ArrayRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool not_empty = 1;
  if (this->not_empty() != 0) {
    total_size += 1 + 1;
  }

  switch (min_len_rule_case()) {
    // uint32 min_len = 2;
    case kMinLen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_len());
      break;
    }
    case MIN_LEN_RULE_NOT_SET: {
      break;
    }
  }
  switch (max_len_rule_case()) {
    // uint32 max_len = 3;
    case kMaxLen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_len());
      break;
    }
    case MAX_LEN_RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.ArrayRule)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArrayRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.ArrayRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.ArrayRule)
    MergeFrom(*source);
  }
}

void ArrayRule::MergeFrom(const ArrayRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.ArrayRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.not_empty() != 0) {
    set_not_empty(from.not_empty());
  }
  switch (from.min_len_rule_case()) {
    case kMinLen: {
      set_min_len(from.min_len());
      break;
    }
    case MIN_LEN_RULE_NOT_SET: {
      break;
    }
  }
  switch (from.max_len_rule_case()) {
    case kMaxLen: {
      set_max_len(from.max_len());
      break;
    }
    case MAX_LEN_RULE_NOT_SET: {
      break;
    }
  }
}

void ArrayRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.ArrayRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayRule::CopyFrom(const ArrayRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.ArrayRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayRule::IsInitialized() const {
  return true;
}

void ArrayRule::Swap(ArrayRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArrayRule::InternalSwap(ArrayRule* other) {
  using std::swap;
  swap(not_empty_, other->not_empty_);
  swap(min_len_rule_, other->min_len_rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(max_len_rule_, other->max_len_rule_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ArrayRule::GetMetadata() const {
  protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ValidateRules::InitAsDefaultInstance() {
  ::validator::_ValidateRules_default_instance_.int32_ = const_cast< ::validator::Int32Rule*>(
      ::validator::Int32Rule::internal_default_instance());
  ::validator::_ValidateRules_default_instance_.int64_ = const_cast< ::validator::Int64Rule*>(
      ::validator::Int64Rule::internal_default_instance());
  ::validator::_ValidateRules_default_instance_.uint32_ = const_cast< ::validator::UInt32Rule*>(
      ::validator::UInt32Rule::internal_default_instance());
  ::validator::_ValidateRules_default_instance_.uint64_ = const_cast< ::validator::UInt64Rule*>(
      ::validator::UInt64Rule::internal_default_instance());
  ::validator::_ValidateRules_default_instance_.float__ = const_cast< ::validator::FloatRule*>(
      ::validator::FloatRule::internal_default_instance());
  ::validator::_ValidateRules_default_instance_.double__ = const_cast< ::validator::DoubleRule*>(
      ::validator::DoubleRule::internal_default_instance());
  ::validator::_ValidateRules_default_instance_.string_ = const_cast< ::validator::StringRule*>(
      ::validator::StringRule::internal_default_instance());
  ::validator::_ValidateRules_default_instance_.enum__ = const_cast< ::validator::EnumRule*>(
      ::validator::EnumRule::internal_default_instance());
  ::validator::_ValidateRules_default_instance_.array_ = const_cast< ::validator::ArrayRule*>(
      ::validator::ArrayRule::internal_default_instance());
}
void ValidateRules::set_allocated_int32(::validator::Int32Rule* int32) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (int32) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      int32 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, int32, submessage_arena);
    }
    set_has_int32();
    rule_.int32_ = int32;
  }
  // @@protoc_insertion_point(field_set_allocated:validator.ValidateRules.int32)
}
void ValidateRules::set_allocated_int64(::validator::Int64Rule* int64) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (int64) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      int64 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, int64, submessage_arena);
    }
    set_has_int64();
    rule_.int64_ = int64;
  }
  // @@protoc_insertion_point(field_set_allocated:validator.ValidateRules.int64)
}
void ValidateRules::set_allocated_uint32(::validator::UInt32Rule* uint32) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (uint32) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uint32 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uint32, submessage_arena);
    }
    set_has_uint32();
    rule_.uint32_ = uint32;
  }
  // @@protoc_insertion_point(field_set_allocated:validator.ValidateRules.uint32)
}
void ValidateRules::set_allocated_uint64(::validator::UInt64Rule* uint64) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (uint64) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uint64 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uint64, submessage_arena);
    }
    set_has_uint64();
    rule_.uint64_ = uint64;
  }
  // @@protoc_insertion_point(field_set_allocated:validator.ValidateRules.uint64)
}
void ValidateRules::set_allocated_float_(::validator::FloatRule* float_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (float_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      float_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, float_, submessage_arena);
    }
    set_has_float_();
    rule_.float__ = float_;
  }
  // @@protoc_insertion_point(field_set_allocated:validator.ValidateRules.float)
}
void ValidateRules::set_allocated_double_(::validator::DoubleRule* double_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (double_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      double_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, double_, submessage_arena);
    }
    set_has_double_();
    rule_.double__ = double_;
  }
  // @@protoc_insertion_point(field_set_allocated:validator.ValidateRules.double)
}
void ValidateRules::set_allocated_string(::validator::StringRule* string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    rule_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:validator.ValidateRules.string)
}
void ValidateRules::set_allocated_enum_(::validator::EnumRule* enum_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (enum_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      enum_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enum_, submessage_arena);
    }
    set_has_enum_();
    rule_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_set_allocated:validator.ValidateRules.enum)
}
void ValidateRules::set_allocated_array(::validator::ArrayRule* array) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (array) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      array = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, array, submessage_arena);
    }
    set_has_array();
    rule_.array_ = array;
  }
  // @@protoc_insertion_point(field_set_allocated:validator.ValidateRules.array)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidateRules::kInt32FieldNumber;
const int ValidateRules::kInt64FieldNumber;
const int ValidateRules::kUint32FieldNumber;
const int ValidateRules::kUint64FieldNumber;
const int ValidateRules::kFloatFieldNumber;
const int ValidateRules::kDoubleFieldNumber;
const int ValidateRules::kStringFieldNumber;
const int ValidateRules::kEnumFieldNumber;
const int ValidateRules::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidateRules::ValidateRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_validator_2eproto::scc_info_ValidateRules.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:validator.ValidateRules)
}
ValidateRules::ValidateRules(const ValidateRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rule();
  switch (from.rule_case()) {
    case kInt32: {
      mutable_int32()->::validator::Int32Rule::MergeFrom(from.int32());
      break;
    }
    case kInt64: {
      mutable_int64()->::validator::Int64Rule::MergeFrom(from.int64());
      break;
    }
    case kUint32: {
      mutable_uint32()->::validator::UInt32Rule::MergeFrom(from.uint32());
      break;
    }
    case kUint64: {
      mutable_uint64()->::validator::UInt64Rule::MergeFrom(from.uint64());
      break;
    }
    case kFloat: {
      mutable_float_()->::validator::FloatRule::MergeFrom(from.float_());
      break;
    }
    case kDouble: {
      mutable_double_()->::validator::DoubleRule::MergeFrom(from.double_());
      break;
    }
    case kString: {
      mutable_string()->::validator::StringRule::MergeFrom(from.string());
      break;
    }
    case kEnum: {
      mutable_enum_()->::validator::EnumRule::MergeFrom(from.enum_());
      break;
    }
    case kArray: {
      mutable_array()->::validator::ArrayRule::MergeFrom(from.array());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validator.ValidateRules)
}

void ValidateRules::SharedCtor() {
  clear_has_rule();
}

ValidateRules::~ValidateRules() {
  // @@protoc_insertion_point(destructor:validator.ValidateRules)
  SharedDtor();
}

void ValidateRules::SharedDtor() {
  if (has_rule()) {
    clear_rule();
  }
}

void ValidateRules::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ValidateRules::descriptor() {
  ::protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ValidateRules& ValidateRules::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_validator_2eproto::scc_info_ValidateRules.base);
  return *internal_default_instance();
}


void ValidateRules::clear_rule() {
// @@protoc_insertion_point(one_of_clear_start:validator.ValidateRules)
  switch (rule_case()) {
    case kInt32: {
      delete rule_.int32_;
      break;
    }
    case kInt64: {
      delete rule_.int64_;
      break;
    }
    case kUint32: {
      delete rule_.uint32_;
      break;
    }
    case kUint64: {
      delete rule_.uint64_;
      break;
    }
    case kFloat: {
      delete rule_.float__;
      break;
    }
    case kDouble: {
      delete rule_.double__;
      break;
    }
    case kString: {
      delete rule_.string_;
      break;
    }
    case kEnum: {
      delete rule_.enum__;
      break;
    }
    case kArray: {
      delete rule_.array_;
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RULE_NOT_SET;
}


void ValidateRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.ValidateRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rule();
  _internal_metadata_.Clear();
}

bool ValidateRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validator.ValidateRules)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .validator.Int32Rule int32 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_int32()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .validator.Int64Rule int64 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_int64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .validator.UInt32Rule uint32 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uint32()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .validator.UInt64Rule uint64 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uint64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .validator.FloatRule float = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_float_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .validator.DoubleRule double = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_double_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .validator.StringRule string = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .validator.EnumRule enum = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_enum_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .validator.ArrayRule array = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validator.ValidateRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validator.ValidateRules)
  return false;
#undef DO_
}

void ValidateRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validator.ValidateRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .validator.Int32Rule int32 = 1;
  if (has_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_int32(), output);
  }

  // .validator.Int64Rule int64 = 2;
  if (has_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_int64(), output);
  }

  // .validator.UInt32Rule uint32 = 3;
  if (has_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_uint32(), output);
  }

  // .validator.UInt64Rule uint64 = 4;
  if (has_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_uint64(), output);
  }

  // .validator.FloatRule float = 5;
  if (has_float_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_float_(), output);
  }

  // .validator.DoubleRule double = 6;
  if (has_double_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_double_(), output);
  }

  // .validator.StringRule string = 7;
  if (has_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_string(), output);
  }

  // .validator.EnumRule enum = 8;
  if (has_enum_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_enum_(), output);
  }

  // .validator.ArrayRule array = 9;
  if (has_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_array(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:validator.ValidateRules)
}

::google::protobuf::uint8* ValidateRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validator.ValidateRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .validator.Int32Rule int32 = 1;
  if (has_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_int32(), deterministic, target);
  }

  // .validator.Int64Rule int64 = 2;
  if (has_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_int64(), deterministic, target);
  }

  // .validator.UInt32Rule uint32 = 3;
  if (has_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_uint32(), deterministic, target);
  }

  // .validator.UInt64Rule uint64 = 4;
  if (has_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_uint64(), deterministic, target);
  }

  // .validator.FloatRule float = 5;
  if (has_float_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_float_(), deterministic, target);
  }

  // .validator.DoubleRule double = 6;
  if (has_double_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_double_(), deterministic, target);
  }

  // .validator.StringRule string = 7;
  if (has_string()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_string(), deterministic, target);
  }

  // .validator.EnumRule enum = 8;
  if (has_enum_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_enum_(), deterministic, target);
  }

  // .validator.ArrayRule array = 9;
  if (has_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_array(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.ValidateRules)
  return target;
}

size_t ValidateRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.ValidateRules)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (rule_case()) {
    // .validator.Int32Rule int32 = 1;
    case kInt32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.int32_);
      break;
    }
    // .validator.Int64Rule int64 = 2;
    case kInt64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.int64_);
      break;
    }
    // .validator.UInt32Rule uint32 = 3;
    case kUint32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.uint32_);
      break;
    }
    // .validator.UInt64Rule uint64 = 4;
    case kUint64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.uint64_);
      break;
    }
    // .validator.FloatRule float = 5;
    case kFloat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.float__);
      break;
    }
    // .validator.DoubleRule double = 6;
    case kDouble: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.double__);
      break;
    }
    // .validator.StringRule string = 7;
    case kString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.string_);
      break;
    }
    // .validator.EnumRule enum = 8;
    case kEnum: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.enum__);
      break;
    }
    // .validator.ArrayRule array = 9;
    case kArray: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.array_);
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.ValidateRules)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidateRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.ValidateRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.ValidateRules)
    MergeFrom(*source);
  }
}

void ValidateRules::MergeFrom(const ValidateRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.ValidateRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rule_case()) {
    case kInt32: {
      mutable_int32()->::validator::Int32Rule::MergeFrom(from.int32());
      break;
    }
    case kInt64: {
      mutable_int64()->::validator::Int64Rule::MergeFrom(from.int64());
      break;
    }
    case kUint32: {
      mutable_uint32()->::validator::UInt32Rule::MergeFrom(from.uint32());
      break;
    }
    case kUint64: {
      mutable_uint64()->::validator::UInt64Rule::MergeFrom(from.uint64());
      break;
    }
    case kFloat: {
      mutable_float_()->::validator::FloatRule::MergeFrom(from.float_());
      break;
    }
    case kDouble: {
      mutable_double_()->::validator::DoubleRule::MergeFrom(from.double_());
      break;
    }
    case kString: {
      mutable_string()->::validator::StringRule::MergeFrom(from.string());
      break;
    }
    case kEnum: {
      mutable_enum_()->::validator::EnumRule::MergeFrom(from.enum_());
      break;
    }
    case kArray: {
      mutable_array()->::validator::ArrayRule::MergeFrom(from.array());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
}

void ValidateRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.ValidateRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateRules::CopyFrom(const ValidateRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.ValidateRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateRules::IsInitialized() const {
  return true;
}

void ValidateRules::Swap(ValidateRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidateRules::InternalSwap(ValidateRules* other) {
  using std::swap;
  swap(rule_, other->rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ValidateRules::GetMetadata() const {
  protobuf_validator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_validator_2eproto::file_level_metadata[kIndexInFileMessages];
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::validator::ValidateRules >, 11, false >
  Rule(kRuleFieldNumber, *::validator::ValidateRules::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace validator
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::validator::Int32Rule* Arena::CreateMaybeMessage< ::validator::Int32Rule >(Arena* arena) {
  return Arena::CreateInternal< ::validator::Int32Rule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::validator::Int64Rule* Arena::CreateMaybeMessage< ::validator::Int64Rule >(Arena* arena) {
  return Arena::CreateInternal< ::validator::Int64Rule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::validator::UInt32Rule* Arena::CreateMaybeMessage< ::validator::UInt32Rule >(Arena* arena) {
  return Arena::CreateInternal< ::validator::UInt32Rule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::validator::UInt64Rule* Arena::CreateMaybeMessage< ::validator::UInt64Rule >(Arena* arena) {
  return Arena::CreateInternal< ::validator::UInt64Rule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::validator::FloatRule* Arena::CreateMaybeMessage< ::validator::FloatRule >(Arena* arena) {
  return Arena::CreateInternal< ::validator::FloatRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::validator::DoubleRule* Arena::CreateMaybeMessage< ::validator::DoubleRule >(Arena* arena) {
  return Arena::CreateInternal< ::validator::DoubleRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::validator::StringRule* Arena::CreateMaybeMessage< ::validator::StringRule >(Arena* arena) {
  return Arena::CreateInternal< ::validator::StringRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::validator::EnumRule* Arena::CreateMaybeMessage< ::validator::EnumRule >(Arena* arena) {
  return Arena::CreateInternal< ::validator::EnumRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::validator::ArrayRule* Arena::CreateMaybeMessage< ::validator::ArrayRule >(Arena* arena) {
  return Arena::CreateInternal< ::validator::ArrayRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::validator::ValidateRules* Arena::CreateMaybeMessage< ::validator::ValidateRules >(Arena* arena) {
  return Arena::CreateInternal< ::validator::ValidateRules >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

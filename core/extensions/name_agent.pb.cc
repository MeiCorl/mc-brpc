// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: name_agent.proto

#include "name_agent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace name_agent {
class TestReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestReq> _instance;
} _TestReq_default_instance_;
class TestResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRes> _instance;
} _TestRes_default_instance_;
class GetServersReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServersReq> _instance;
} _GetServersReq_default_instance_;
class GetServersResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServersRes> _instance;
} _GetServersRes_default_instance_;
}  // namespace name_agent
static void InitDefaultsscc_info_GetServersReq_name_5fagent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::name_agent::_GetServersReq_default_instance_;
    new (ptr) ::name_agent::GetServersReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::name_agent::GetServersReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServersReq_name_5fagent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServersReq_name_5fagent_2eproto}, {}};

static void InitDefaultsscc_info_GetServersRes_name_5fagent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::name_agent::_GetServersRes_default_instance_;
    new (ptr) ::name_agent::GetServersRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::name_agent::GetServersRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServersRes_name_5fagent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetServersRes_name_5fagent_2eproto}, {}};

static void InitDefaultsscc_info_TestReq_name_5fagent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::name_agent::_TestReq_default_instance_;
    new (ptr) ::name_agent::TestReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::name_agent::TestReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestReq_name_5fagent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestReq_name_5fagent_2eproto}, {}};

static void InitDefaultsscc_info_TestRes_name_5fagent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::name_agent::_TestRes_default_instance_;
    new (ptr) ::name_agent::TestRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::name_agent::TestRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRes_name_5fagent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestRes_name_5fagent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_name_5fagent_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_name_5fagent_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_name_5fagent_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_name_5fagent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::name_agent::TestReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::name_agent::TestReq, seq_id_),
  PROTOBUF_FIELD_OFFSET(::name_agent::TestReq, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::name_agent::TestRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::name_agent::TestRes, seq_id_),
  PROTOBUF_FIELD_OFFSET(::name_agent::TestRes, res_code_),
  PROTOBUF_FIELD_OFFSET(::name_agent::TestRes, res_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::name_agent::GetServersReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::name_agent::GetServersReq, seq_id_),
  PROTOBUF_FIELD_OFFSET(::name_agent::GetServersReq, service_name_),
  PROTOBUF_FIELD_OFFSET(::name_agent::GetServersReq, group_strategy_),
  PROTOBUF_FIELD_OFFSET(::name_agent::GetServersReq, group_request_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::name_agent::GetServersRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::name_agent::GetServersRes, seq_id_),
  PROTOBUF_FIELD_OFFSET(::name_agent::GetServersRes, res_code_),
  PROTOBUF_FIELD_OFFSET(::name_agent::GetServersRes, endpoints_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::name_agent::TestReq)},
  { 7, -1, sizeof(::name_agent::TestRes)},
  { 15, -1, sizeof(::name_agent::GetServersReq)},
  { 24, -1, sizeof(::name_agent::GetServersRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::name_agent::_TestReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::name_agent::_TestRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::name_agent::_GetServersReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::name_agent::_GetServersRes_default_instance_),
};

const char descriptor_table_protodef_name_5fagent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020name_agent.proto\022\nname_agent\"&\n\007TestRe"
  "q\022\016\n\006seq_id\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"Q\n\007TestRe"
  "s\022\016\n\006seq_id\030\001 \001(\004\022%\n\010res_code\030\002 \001(\0162\023.na"
  "me_agent.ResCode\022\017\n\007res_msg\030\003 \001(\t\"i\n\rGet"
  "ServersReq\022\016\n\006seq_id\030\001 \001(\004\022\024\n\014service_na"
  "me\030\002 \001(\t\022\026\n\016group_strategy\030\003 \001(\r\022\032\n\022grou"
  "p_request_code\030\004 \001(\004\"Y\n\rGetServersRes\022\016\n"
  "\006seq_id\030\001 \001(\004\022%\n\010res_code\030\002 \001(\0162\023.name_a"
  "gent.ResCode\022\021\n\tendpoints\030\003 \003(\t*_\n\007ResCo"
  "de\022\021\n\rResCode_Begin\020\000\022\014\n\007Success\020\310\001\022\022\n\rI"
  "nValidParams\020\220\003\022\r\n\010NotFound\020\224\003\022\020\n\013Server"
  "Error\020\364\0032\204\001\n\014AgentService\0220\n\004Test\022\023.name"
  "_agent.TestReq\032\023.name_agent.TestRes\022B\n\nG"
  "etServers\022\031.name_agent.GetServersReq\032\031.n"
  "ame_agent.GetServersResB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_name_5fagent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_name_5fagent_2eproto_sccs[4] = {
  &scc_info_GetServersReq_name_5fagent_2eproto.base,
  &scc_info_GetServersRes_name_5fagent_2eproto.base,
  &scc_info_TestReq_name_5fagent_2eproto.base,
  &scc_info_TestRes_name_5fagent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_name_5fagent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_name_5fagent_2eproto = {
  false, false, descriptor_table_protodef_name_5fagent_2eproto, "name_agent.proto", 596,
  &descriptor_table_name_5fagent_2eproto_once, descriptor_table_name_5fagent_2eproto_sccs, descriptor_table_name_5fagent_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_name_5fagent_2eproto::offsets,
  file_level_metadata_name_5fagent_2eproto, 4, file_level_enum_descriptors_name_5fagent_2eproto, file_level_service_descriptors_name_5fagent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_name_5fagent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_name_5fagent_2eproto)), true);
namespace name_agent {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_name_5fagent_2eproto);
  return file_level_enum_descriptors_name_5fagent_2eproto[0];
}
bool ResCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 400:
    case 404:
    case 500:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TestReq::InitAsDefaultInstance() {
}
class TestReq::_Internal {
 public:
};

TestReq::TestReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:name_agent.TestReq)
}
TestReq::TestReq(const TestReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  seq_id_ = from.seq_id_;
  // @@protoc_insertion_point(copy_constructor:name_agent.TestReq)
}

void TestReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestReq_name_5fagent_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seq_id_ = 0;
}

TestReq::~TestReq() {
  // @@protoc_insertion_point(destructor:name_agent.TestReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestReq::ArenaDtor(void* object) {
  TestReq* _this = reinterpret_cast< TestReq* >(object);
  (void)_this;
}
void TestReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestReq& TestReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestReq_name_5fagent_2eproto.base);
  return *internal_default_instance();
}


void TestReq::Clear() {
// @@protoc_insertion_point(message_clear_start:name_agent.TestReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  seq_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seq_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "name_agent.TestReq.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:name_agent.TestReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seq_id = 1;
  if (this->seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seq_id(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "name_agent.TestReq.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:name_agent.TestReq)
  return target;
}

size_t TestReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:name_agent.TestReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 seq_id = 1;
  if (this->seq_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seq_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:name_agent.TestReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:name_agent.TestReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:name_agent.TestReq)
    MergeFrom(*source);
  }
}

void TestReq::MergeFrom(const TestReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:name_agent.TestReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
}

void TestReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:name_agent.TestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReq::CopyFrom(const TestReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:name_agent.TestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReq::IsInitialized() const {
  return true;
}

void TestReq::InternalSwap(TestReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(seq_id_, other->seq_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestRes::InitAsDefaultInstance() {
}
class TestRes::_Internal {
 public:
};

TestRes::TestRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:name_agent.TestRes)
}
TestRes::TestRes(const TestRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_msg().empty()) {
    res_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_res_msg(),
      GetArena());
  }
  ::memcpy(&seq_id_, &from.seq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_code_) -
    reinterpret_cast<char*>(&seq_id_)) + sizeof(res_code_));
  // @@protoc_insertion_point(copy_constructor:name_agent.TestRes)
}

void TestRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestRes_name_5fagent_2eproto.base);
  res_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_code_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(res_code_));
}

TestRes::~TestRes() {
  // @@protoc_insertion_point(destructor:name_agent.TestRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  res_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestRes::ArenaDtor(void* object) {
  TestRes* _this = reinterpret_cast< TestRes* >(object);
  (void)_this;
}
void TestRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRes& TestRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRes_name_5fagent_2eproto.base);
  return *internal_default_instance();
}


void TestRes::Clear() {
// @@protoc_insertion_point(message_clear_start:name_agent.TestRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_code_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(res_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 seq_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .name_agent.ResCode res_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res_code(static_cast<::name_agent::ResCode>(val));
        } else goto handle_unusual;
        continue;
      // string res_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_res_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "name_agent.TestRes.res_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:name_agent.TestRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq_id = 1;
  if (this->seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq_id(), target);
  }

  // .name_agent.ResCode res_code = 2;
  if (this->res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_res_code(), target);
  }

  // string res_msg = 3;
  if (this->res_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_msg().data(), static_cast<int>(this->_internal_res_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "name_agent.TestRes.res_msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_res_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:name_agent.TestRes)
  return target;
}

size_t TestRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:name_agent.TestRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_msg = 3;
  if (this->res_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_msg());
  }

  // uint64 seq_id = 1;
  if (this->seq_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_id());
  }

  // .name_agent.ResCode res_code = 2;
  if (this->res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:name_agent.TestRes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:name_agent.TestRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:name_agent.TestRes)
    MergeFrom(*source);
  }
}

void TestRes::MergeFrom(const TestRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:name_agent.TestRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res_msg().size() > 0) {
    _internal_set_res_msg(from._internal_res_msg());
  }
  if (from.seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  if (from.res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
}

void TestRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:name_agent.TestRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRes::CopyFrom(const TestRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:name_agent.TestRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRes::IsInitialized() const {
  return true;
}

void TestRes::InternalSwap(TestRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  res_msg_.Swap(&other->res_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestRes, res_code_)
      + sizeof(TestRes::res_code_)
      - PROTOBUF_FIELD_OFFSET(TestRes, seq_id_)>(
          reinterpret_cast<char*>(&seq_id_),
          reinterpret_cast<char*>(&other->seq_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetServersReq::InitAsDefaultInstance() {
}
class GetServersReq::_Internal {
 public:
};

GetServersReq::GetServersReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:name_agent.GetServersReq)
}
GetServersReq::GetServersReq(const GetServersReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  ::memcpy(&seq_id_, &from.seq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_strategy_) -
    reinterpret_cast<char*>(&seq_id_)) + sizeof(group_strategy_));
  // @@protoc_insertion_point(copy_constructor:name_agent.GetServersReq)
}

void GetServersReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServersReq_name_5fagent_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_strategy_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(group_strategy_));
}

GetServersReq::~GetServersReq() {
  // @@protoc_insertion_point(destructor:name_agent.GetServersReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServersReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServersReq::ArenaDtor(void* object) {
  GetServersReq* _this = reinterpret_cast< GetServersReq* >(object);
  (void)_this;
}
void GetServersReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServersReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServersReq& GetServersReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServersReq_name_5fagent_2eproto.base);
  return *internal_default_instance();
}


void GetServersReq::Clear() {
// @@protoc_insertion_point(message_clear_start:name_agent.GetServersReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_strategy_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(group_strategy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServersReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 seq_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "name_agent.GetServersReq.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 group_strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          group_strategy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 group_request_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          group_request_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServersReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:name_agent.GetServersReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq_id = 1;
  if (this->seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq_id(), target);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "name_agent.GetServersReq.service_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_name(), target);
  }

  // uint32 group_strategy = 3;
  if (this->group_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_group_strategy(), target);
  }

  // uint64 group_request_code = 4;
  if (this->group_request_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_group_request_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:name_agent.GetServersReq)
  return target;
}

size_t GetServersReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:name_agent.GetServersReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // uint64 seq_id = 1;
  if (this->seq_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_id());
  }

  // uint64 group_request_code = 4;
  if (this->group_request_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_group_request_code());
  }

  // uint32 group_strategy = 3;
  if (this->group_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group_strategy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServersReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:name_agent.GetServersReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServersReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServersReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:name_agent.GetServersReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:name_agent.GetServersReq)
    MergeFrom(*source);
  }
}

void GetServersReq::MergeFrom(const GetServersReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:name_agent.GetServersReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  if (from.group_request_code() != 0) {
    _internal_set_group_request_code(from._internal_group_request_code());
  }
  if (from.group_strategy() != 0) {
    _internal_set_group_strategy(from._internal_group_strategy());
  }
}

void GetServersReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:name_agent.GetServersReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServersReq::CopyFrom(const GetServersReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:name_agent.GetServersReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServersReq::IsInitialized() const {
  return true;
}

void GetServersReq::InternalSwap(GetServersReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServersReq, group_strategy_)
      + sizeof(GetServersReq::group_strategy_)
      - PROTOBUF_FIELD_OFFSET(GetServersReq, seq_id_)>(
          reinterpret_cast<char*>(&seq_id_),
          reinterpret_cast<char*>(&other->seq_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServersReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetServersRes::InitAsDefaultInstance() {
}
class GetServersRes::_Internal {
 public:
};

GetServersRes::GetServersRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  endpoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:name_agent.GetServersRes)
}
GetServersRes::GetServersRes(const GetServersRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seq_id_, &from.seq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_code_) -
    reinterpret_cast<char*>(&seq_id_)) + sizeof(res_code_));
  // @@protoc_insertion_point(copy_constructor:name_agent.GetServersRes)
}

void GetServersRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServersRes_name_5fagent_2eproto.base);
  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_code_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(res_code_));
}

GetServersRes::~GetServersRes() {
  // @@protoc_insertion_point(destructor:name_agent.GetServersRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetServersRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetServersRes::ArenaDtor(void* object) {
  GetServersRes* _this = reinterpret_cast< GetServersRes* >(object);
  (void)_this;
}
void GetServersRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServersRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServersRes& GetServersRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServersRes_name_5fagent_2eproto.base);
  return *internal_default_instance();
}


void GetServersRes::Clear() {
// @@protoc_insertion_point(message_clear_start:name_agent.GetServersRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoints_.Clear();
  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_code_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(res_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServersRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 seq_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .name_agent.ResCode res_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res_code(static_cast<::name_agent::ResCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated string endpoints = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "name_agent.GetServersRes.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServersRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:name_agent.GetServersRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq_id = 1;
  if (this->seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq_id(), target);
  }

  // .name_agent.ResCode res_code = 2;
  if (this->res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_res_code(), target);
  }

  // repeated string endpoints = 3;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "name_agent.GetServersRes.endpoints");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:name_agent.GetServersRes)
  return target;
}

size_t GetServersRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:name_agent.GetServersRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string endpoints = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // uint64 seq_id = 1;
  if (this->seq_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_id());
  }

  // .name_agent.ResCode res_code = 2;
  if (this->res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServersRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:name_agent.GetServersRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServersRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServersRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:name_agent.GetServersRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:name_agent.GetServersRes)
    MergeFrom(*source);
  }
}

void GetServersRes::MergeFrom(const GetServersRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:name_agent.GetServersRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  endpoints_.MergeFrom(from.endpoints_);
  if (from.seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  if (from.res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
}

void GetServersRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:name_agent.GetServersRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServersRes::CopyFrom(const GetServersRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:name_agent.GetServersRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServersRes::IsInitialized() const {
  return true;
}

void GetServersRes::InternalSwap(GetServersRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  endpoints_.InternalSwap(&other->endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServersRes, res_code_)
      + sizeof(GetServersRes::res_code_)
      - PROTOBUF_FIELD_OFFSET(GetServersRes, seq_id_)>(
          reinterpret_cast<char*>(&seq_id_),
          reinterpret_cast<char*>(&other->seq_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServersRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AgentService::~AgentService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* AgentService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_name_5fagent_2eproto);
  return file_level_service_descriptors_name_5fagent_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* AgentService::GetDescriptor() {
  return descriptor();
}

void AgentService::Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::name_agent::TestReq*,
                         ::name_agent::TestRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Test() not implemented.");
  done->Run();
}

void AgentService::GetServers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::name_agent::GetServersReq*,
                         ::name_agent::GetServersRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServers() not implemented.");
  done->Run();
}

void AgentService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_name_5fagent_2eproto[0]);
  switch(method->index()) {
    case 0:
      Test(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::name_agent::TestReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::name_agent::TestRes*>(
                 response),
             done);
      break;
    case 1:
      GetServers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::name_agent::GetServersReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::name_agent::GetServersRes*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& AgentService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::name_agent::TestReq::default_instance();
    case 1:
      return ::name_agent::GetServersReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& AgentService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::name_agent::TestRes::default_instance();
    case 1:
      return ::name_agent::GetServersRes::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

AgentService_Stub::AgentService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
AgentService_Stub::AgentService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
AgentService_Stub::~AgentService_Stub() {
  if (owns_channel_) delete channel_;
}

void AgentService_Stub::Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::name_agent::TestReq* request,
                              ::name_agent::TestRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void AgentService_Stub::GetServers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::name_agent::GetServersReq* request,
                              ::name_agent::GetServersRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace name_agent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::name_agent::TestReq* Arena::CreateMaybeMessage< ::name_agent::TestReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::name_agent::TestReq >(arena);
}
template<> PROTOBUF_NOINLINE ::name_agent::TestRes* Arena::CreateMaybeMessage< ::name_agent::TestRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::name_agent::TestRes >(arena);
}
template<> PROTOBUF_NOINLINE ::name_agent::GetServersReq* Arena::CreateMaybeMessage< ::name_agent::GetServersReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::name_agent::GetServersReq >(arena);
}
template<> PROTOBUF_NOINLINE ::name_agent::GetServersRes* Arena::CreateMaybeMessage< ::name_agent::GetServersRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::name_agent::GetServersRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

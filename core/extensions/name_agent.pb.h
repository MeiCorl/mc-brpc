// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: name_agent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_name_5fagent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_name_5fagent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_name_5fagent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_name_5fagent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_name_5fagent_2eproto;
namespace name_agent {
class GetServersReq;
class GetServersReqDefaultTypeInternal;
extern GetServersReqDefaultTypeInternal _GetServersReq_default_instance_;
class GetServersRes;
class GetServersResDefaultTypeInternal;
extern GetServersResDefaultTypeInternal _GetServersRes_default_instance_;
class TestReq;
class TestReqDefaultTypeInternal;
extern TestReqDefaultTypeInternal _TestReq_default_instance_;
class TestRes;
class TestResDefaultTypeInternal;
extern TestResDefaultTypeInternal _TestRes_default_instance_;
}  // namespace name_agent
PROTOBUF_NAMESPACE_OPEN
template<> ::name_agent::GetServersReq* Arena::CreateMaybeMessage<::name_agent::GetServersReq>(Arena*);
template<> ::name_agent::GetServersRes* Arena::CreateMaybeMessage<::name_agent::GetServersRes>(Arena*);
template<> ::name_agent::TestReq* Arena::CreateMaybeMessage<::name_agent::TestReq>(Arena*);
template<> ::name_agent::TestRes* Arena::CreateMaybeMessage<::name_agent::TestRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace name_agent {

enum ResCode : int {
  ResCode_Begin = 0,
  Success = 200,
  InValidParams = 400,
  NotFound = 404,
  ServerError = 500,
  ResCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResCode_IsValid(int value);
constexpr ResCode ResCode_MIN = ResCode_Begin;
constexpr ResCode ResCode_MAX = ServerError;
constexpr int ResCode_ARRAYSIZE = ResCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResCode_descriptor();
template<typename T>
inline const std::string& ResCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResCode_descriptor(), enum_t_value);
}
inline bool ResCode_Parse(
    const std::string& name, ResCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResCode>(
    ResCode_descriptor(), name, value);
}
// ===================================================================

class TestReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:name_agent.TestReq) */ {
 public:
  inline TestReq() : TestReq(nullptr) {};
  virtual ~TestReq();

  TestReq(const TestReq& from);
  TestReq(TestReq&& from) noexcept
    : TestReq() {
    *this = ::std::move(from);
  }

  inline TestReq& operator=(const TestReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestReq& operator=(TestReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestReq* internal_default_instance() {
    return reinterpret_cast<const TestReq*>(
               &_TestReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestReq& a, TestReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TestReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestReq* New() const final {
    return CreateMaybeMessage<TestReq>(nullptr);
  }

  TestReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestReq& from);
  void MergeFrom(const TestReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "name_agent.TestReq";
  }
  protected:
  explicit TestReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_name_5fagent_2eproto);
    return ::descriptor_table_name_5fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kSeqIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 seq_id = 1;
  void clear_seq_id();
  ::PROTOBUF_NAMESPACE_ID::int32 seq_id() const;
  void set_seq_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq_id() const;
  void _internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:name_agent.TestReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_name_5fagent_2eproto;
};
// -------------------------------------------------------------------

class TestRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:name_agent.TestRes) */ {
 public:
  inline TestRes() : TestRes(nullptr) {};
  virtual ~TestRes();

  TestRes(const TestRes& from);
  TestRes(TestRes&& from) noexcept
    : TestRes() {
    *this = ::std::move(from);
  }

  inline TestRes& operator=(const TestRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRes& operator=(TestRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestRes* internal_default_instance() {
    return reinterpret_cast<const TestRes*>(
               &_TestRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestRes& a, TestRes& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestRes* New() const final {
    return CreateMaybeMessage<TestRes>(nullptr);
  }

  TestRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestRes& from);
  void MergeFrom(const TestRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "name_agent.TestRes";
  }
  protected:
  explicit TestRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_name_5fagent_2eproto);
    return ::descriptor_table_name_5fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResMsgFieldNumber = 3,
    kSeqIdFieldNumber = 1,
    kResCodeFieldNumber = 2,
  };
  // string res_msg = 3;
  void clear_res_msg();
  const std::string& res_msg() const;
  void set_res_msg(const std::string& value);
  void set_res_msg(std::string&& value);
  void set_res_msg(const char* value);
  void set_res_msg(const char* value, size_t size);
  std::string* mutable_res_msg();
  std::string* release_res_msg();
  void set_allocated_res_msg(std::string* res_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_res_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_res_msg(
      std::string* res_msg);
  private:
  const std::string& _internal_res_msg() const;
  void _internal_set_res_msg(const std::string& value);
  std::string* _internal_mutable_res_msg();
  public:

  // uint64 seq_id = 1;
  void clear_seq_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id() const;
  void set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_id() const;
  void _internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .name_agent.ResCode res_code = 2;
  void clear_res_code();
  ::name_agent::ResCode res_code() const;
  void set_res_code(::name_agent::ResCode value);
  private:
  ::name_agent::ResCode _internal_res_code() const;
  void _internal_set_res_code(::name_agent::ResCode value);
  public:

  // @@protoc_insertion_point(class_scope:name_agent.TestRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id_;
  int res_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_name_5fagent_2eproto;
};
// -------------------------------------------------------------------

class GetServersReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:name_agent.GetServersReq) */ {
 public:
  inline GetServersReq() : GetServersReq(nullptr) {};
  virtual ~GetServersReq();

  GetServersReq(const GetServersReq& from);
  GetServersReq(GetServersReq&& from) noexcept
    : GetServersReq() {
    *this = ::std::move(from);
  }

  inline GetServersReq& operator=(const GetServersReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServersReq& operator=(GetServersReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServersReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServersReq* internal_default_instance() {
    return reinterpret_cast<const GetServersReq*>(
               &_GetServersReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetServersReq& a, GetServersReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServersReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServersReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServersReq* New() const final {
    return CreateMaybeMessage<GetServersReq>(nullptr);
  }

  GetServersReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServersReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServersReq& from);
  void MergeFrom(const GetServersReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServersReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "name_agent.GetServersReq";
  }
  protected:
  explicit GetServersReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_name_5fagent_2eproto);
    return ::descriptor_table_name_5fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 2,
    kSeqIdFieldNumber = 1,
    kGroupRequestCodeFieldNumber = 4,
    kGroupStrategyFieldNumber = 3,
  };
  // string service_name = 2;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // uint64 seq_id = 1;
  void clear_seq_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id() const;
  void set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_id() const;
  void _internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 group_request_code = 4;
  void clear_group_request_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 group_request_code() const;
  void set_group_request_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_group_request_code() const;
  void _internal_set_group_request_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 group_strategy = 3;
  void clear_group_strategy();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_strategy() const;
  void set_group_strategy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group_strategy() const;
  void _internal_set_group_strategy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:name_agent.GetServersReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 group_request_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_strategy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_name_5fagent_2eproto;
};
// -------------------------------------------------------------------

class GetServersRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:name_agent.GetServersRes) */ {
 public:
  inline GetServersRes() : GetServersRes(nullptr) {};
  virtual ~GetServersRes();

  GetServersRes(const GetServersRes& from);
  GetServersRes(GetServersRes&& from) noexcept
    : GetServersRes() {
    *this = ::std::move(from);
  }

  inline GetServersRes& operator=(const GetServersRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServersRes& operator=(GetServersRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServersRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServersRes* internal_default_instance() {
    return reinterpret_cast<const GetServersRes*>(
               &_GetServersRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetServersRes& a, GetServersRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServersRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServersRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServersRes* New() const final {
    return CreateMaybeMessage<GetServersRes>(nullptr);
  }

  GetServersRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServersRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServersRes& from);
  void MergeFrom(const GetServersRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServersRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "name_agent.GetServersRes";
  }
  protected:
  explicit GetServersRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_name_5fagent_2eproto);
    return ::descriptor_table_name_5fagent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointsFieldNumber = 3,
    kSeqIdFieldNumber = 1,
    kResCodeFieldNumber = 2,
  };
  // repeated string endpoints = 3;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // uint64 seq_id = 1;
  void clear_seq_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id() const;
  void set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_id() const;
  void _internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .name_agent.ResCode res_code = 2;
  void clear_res_code();
  ::name_agent::ResCode res_code() const;
  void set_res_code(::name_agent::ResCode value);
  private:
  ::name_agent::ResCode _internal_res_code() const;
  void _internal_set_res_code(::name_agent::ResCode value);
  public:

  // @@protoc_insertion_point(class_scope:name_agent.GetServersRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_id_;
  int res_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_name_5fagent_2eproto;
};
// ===================================================================

class AgentService_Stub;

class AgentService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline AgentService() {};
 public:
  virtual ~AgentService();

  typedef AgentService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::name_agent::TestReq* request,
                       ::name_agent::TestRes* response,
                       ::google::protobuf::Closure* done);
  virtual void GetServers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::name_agent::GetServersReq* request,
                       ::name_agent::GetServersRes* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(AgentService);
};

class AgentService_Stub : public AgentService {
 public:
  AgentService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  AgentService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~AgentService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements AgentService ------------------------------------------

  void Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::name_agent::TestReq* request,
                       ::name_agent::TestRes* response,
                       ::google::protobuf::Closure* done);
  void GetServers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::name_agent::GetServersReq* request,
                       ::name_agent::GetServersRes* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(AgentService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestReq

// int32 seq_id = 1;
inline void TestReq::clear_seq_id() {
  seq_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestReq::_internal_seq_id() const {
  return seq_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestReq::seq_id() const {
  // @@protoc_insertion_point(field_get:name_agent.TestReq.seq_id)
  return _internal_seq_id();
}
inline void TestReq::_internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_id_ = value;
}
inline void TestReq::set_seq_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:name_agent.TestReq.seq_id)
}

// string msg = 2;
inline void TestReq::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestReq::msg() const {
  // @@protoc_insertion_point(field_get:name_agent.TestReq.msg)
  return _internal_msg();
}
inline void TestReq::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:name_agent.TestReq.msg)
}
inline std::string* TestReq::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:name_agent.TestReq.msg)
  return _internal_mutable_msg();
}
inline const std::string& TestReq::_internal_msg() const {
  return msg_.Get();
}
inline void TestReq::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestReq::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:name_agent.TestReq.msg)
}
inline void TestReq::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:name_agent.TestReq.msg)
}
inline void TestReq::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:name_agent.TestReq.msg)
}
inline std::string* TestReq::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestReq::release_msg() {
  // @@protoc_insertion_point(field_release:name_agent.TestReq.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestReq::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:name_agent.TestReq.msg)
}
inline std::string* TestReq::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:name_agent.TestReq.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestReq::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:name_agent.TestReq.msg)
}

// -------------------------------------------------------------------

// TestRes

// uint64 seq_id = 1;
inline void TestRes::clear_seq_id() {
  seq_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestRes::_internal_seq_id() const {
  return seq_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestRes::seq_id() const {
  // @@protoc_insertion_point(field_get:name_agent.TestRes.seq_id)
  return _internal_seq_id();
}
inline void TestRes::_internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_id_ = value;
}
inline void TestRes::set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:name_agent.TestRes.seq_id)
}

// .name_agent.ResCode res_code = 2;
inline void TestRes::clear_res_code() {
  res_code_ = 0;
}
inline ::name_agent::ResCode TestRes::_internal_res_code() const {
  return static_cast< ::name_agent::ResCode >(res_code_);
}
inline ::name_agent::ResCode TestRes::res_code() const {
  // @@protoc_insertion_point(field_get:name_agent.TestRes.res_code)
  return _internal_res_code();
}
inline void TestRes::_internal_set_res_code(::name_agent::ResCode value) {
  
  res_code_ = value;
}
inline void TestRes::set_res_code(::name_agent::ResCode value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:name_agent.TestRes.res_code)
}

// string res_msg = 3;
inline void TestRes::clear_res_msg() {
  res_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestRes::res_msg() const {
  // @@protoc_insertion_point(field_get:name_agent.TestRes.res_msg)
  return _internal_res_msg();
}
inline void TestRes::set_res_msg(const std::string& value) {
  _internal_set_res_msg(value);
  // @@protoc_insertion_point(field_set:name_agent.TestRes.res_msg)
}
inline std::string* TestRes::mutable_res_msg() {
  // @@protoc_insertion_point(field_mutable:name_agent.TestRes.res_msg)
  return _internal_mutable_res_msg();
}
inline const std::string& TestRes::_internal_res_msg() const {
  return res_msg_.Get();
}
inline void TestRes::_internal_set_res_msg(const std::string& value) {
  
  res_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestRes::set_res_msg(std::string&& value) {
  
  res_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:name_agent.TestRes.res_msg)
}
inline void TestRes::set_res_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:name_agent.TestRes.res_msg)
}
inline void TestRes::set_res_msg(const char* value,
    size_t size) {
  
  res_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:name_agent.TestRes.res_msg)
}
inline std::string* TestRes::_internal_mutable_res_msg() {
  
  return res_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestRes::release_res_msg() {
  // @@protoc_insertion_point(field_release:name_agent.TestRes.res_msg)
  return res_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestRes::set_allocated_res_msg(std::string* res_msg) {
  if (res_msg != nullptr) {
    
  } else {
    
  }
  res_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:name_agent.TestRes.res_msg)
}
inline std::string* TestRes::unsafe_arena_release_res_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:name_agent.TestRes.res_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return res_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestRes::unsafe_arena_set_allocated_res_msg(
    std::string* res_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (res_msg != nullptr) {
    
  } else {
    
  }
  res_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      res_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:name_agent.TestRes.res_msg)
}

// -------------------------------------------------------------------

// GetServersReq

// uint64 seq_id = 1;
inline void GetServersReq::clear_seq_id() {
  seq_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServersReq::_internal_seq_id() const {
  return seq_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServersReq::seq_id() const {
  // @@protoc_insertion_point(field_get:name_agent.GetServersReq.seq_id)
  return _internal_seq_id();
}
inline void GetServersReq::_internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_id_ = value;
}
inline void GetServersReq::set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:name_agent.GetServersReq.seq_id)
}

// string service_name = 2;
inline void GetServersReq::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetServersReq::service_name() const {
  // @@protoc_insertion_point(field_get:name_agent.GetServersReq.service_name)
  return _internal_service_name();
}
inline void GetServersReq::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:name_agent.GetServersReq.service_name)
}
inline std::string* GetServersReq::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:name_agent.GetServersReq.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& GetServersReq::_internal_service_name() const {
  return service_name_.Get();
}
inline void GetServersReq::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetServersReq::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:name_agent.GetServersReq.service_name)
}
inline void GetServersReq::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:name_agent.GetServersReq.service_name)
}
inline void GetServersReq::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:name_agent.GetServersReq.service_name)
}
inline std::string* GetServersReq::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetServersReq::release_service_name() {
  // @@protoc_insertion_point(field_release:name_agent.GetServersReq.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServersReq::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:name_agent.GetServersReq.service_name)
}
inline std::string* GetServersReq::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:name_agent.GetServersReq.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetServersReq::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:name_agent.GetServersReq.service_name)
}

// uint32 group_strategy = 3;
inline void GetServersReq::clear_group_strategy() {
  group_strategy_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetServersReq::_internal_group_strategy() const {
  return group_strategy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetServersReq::group_strategy() const {
  // @@protoc_insertion_point(field_get:name_agent.GetServersReq.group_strategy)
  return _internal_group_strategy();
}
inline void GetServersReq::_internal_set_group_strategy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_strategy_ = value;
}
inline void GetServersReq::set_group_strategy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group_strategy(value);
  // @@protoc_insertion_point(field_set:name_agent.GetServersReq.group_strategy)
}

// uint64 group_request_code = 4;
inline void GetServersReq::clear_group_request_code() {
  group_request_code_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServersReq::_internal_group_request_code() const {
  return group_request_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServersReq::group_request_code() const {
  // @@protoc_insertion_point(field_get:name_agent.GetServersReq.group_request_code)
  return _internal_group_request_code();
}
inline void GetServersReq::_internal_set_group_request_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  group_request_code_ = value;
}
inline void GetServersReq::set_group_request_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_group_request_code(value);
  // @@protoc_insertion_point(field_set:name_agent.GetServersReq.group_request_code)
}

// -------------------------------------------------------------------

// GetServersRes

// uint64 seq_id = 1;
inline void GetServersRes::clear_seq_id() {
  seq_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServersRes::_internal_seq_id() const {
  return seq_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetServersRes::seq_id() const {
  // @@protoc_insertion_point(field_get:name_agent.GetServersRes.seq_id)
  return _internal_seq_id();
}
inline void GetServersRes::_internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_id_ = value;
}
inline void GetServersRes::set_seq_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:name_agent.GetServersRes.seq_id)
}

// .name_agent.ResCode res_code = 2;
inline void GetServersRes::clear_res_code() {
  res_code_ = 0;
}
inline ::name_agent::ResCode GetServersRes::_internal_res_code() const {
  return static_cast< ::name_agent::ResCode >(res_code_);
}
inline ::name_agent::ResCode GetServersRes::res_code() const {
  // @@protoc_insertion_point(field_get:name_agent.GetServersRes.res_code)
  return _internal_res_code();
}
inline void GetServersRes::_internal_set_res_code(::name_agent::ResCode value) {
  
  res_code_ = value;
}
inline void GetServersRes::set_res_code(::name_agent::ResCode value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:name_agent.GetServersRes.res_code)
}

// repeated string endpoints = 3;
inline int GetServersRes::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int GetServersRes::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void GetServersRes::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* GetServersRes::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:name_agent.GetServersRes.endpoints)
  return _internal_add_endpoints();
}
inline const std::string& GetServersRes::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& GetServersRes::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:name_agent.GetServersRes.endpoints)
  return _internal_endpoints(index);
}
inline std::string* GetServersRes::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:name_agent.GetServersRes.endpoints)
  return endpoints_.Mutable(index);
}
inline void GetServersRes::set_endpoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:name_agent.GetServersRes.endpoints)
  endpoints_.Mutable(index)->assign(value);
}
inline void GetServersRes::set_endpoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:name_agent.GetServersRes.endpoints)
  endpoints_.Mutable(index)->assign(std::move(value));
}
inline void GetServersRes::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:name_agent.GetServersRes.endpoints)
}
inline void GetServersRes::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:name_agent.GetServersRes.endpoints)
}
inline std::string* GetServersRes::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void GetServersRes::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:name_agent.GetServersRes.endpoints)
}
inline void GetServersRes::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:name_agent.GetServersRes.endpoints)
}
inline void GetServersRes::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:name_agent.GetServersRes.endpoints)
}
inline void GetServersRes::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:name_agent.GetServersRes.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetServersRes::endpoints() const {
  // @@protoc_insertion_point(field_list:name_agent.GetServersRes.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetServersRes::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:name_agent.GetServersRes.endpoints)
  return &endpoints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace name_agent

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::name_agent::ResCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::name_agent::ResCode>() {
  return ::name_agent::ResCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_name_5fagent_2eproto
